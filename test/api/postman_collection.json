{
	"info": {
		"_postman_id": "4e405353-c26f-4e55-ad53-f71ef8294638",
		"name": "STIGMan OSS",
		"description": "An API for managing evaluations of Security Technical Implementation Guide (STIG) assessments.\n\nContact Support:  \nName: Carl Smigielski  \nEmail: [carl.a.smigielski@saic.com](https://mailto:carl.a.smigielski@saic.com)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9301046"
	},
	"item": [
		{
			"name": "LoadTestData",
			"item": [
				{
					"name": "load standard test data",
					"item": [
						{
							"name": "Import a new STIG - Win 10  (as admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{win10Stig}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a new STIG - RHEL 7 (as admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{rhel7Stig}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a new STIG - VPN  (as admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{vpnStig}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import and overwrite application data (as elevated Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes the specified revision of a STIG v1r0 - with force - could fail if not present, so no tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate=true&force=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"revisions",
										":revisionStr"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "V1R0",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create and delete a new collection, and an asset in the testCollection",
					"item": [
						{
							"name": "Create a Collection in order to delete it",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201); \r",
											"    });\r",
											"// }\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let collectionToDelete = respJson.collectionId\r",
											"pm.environment.set(\"collectionToDelete\", collectionToDelete);\r",
											"\r",
											"// let requestToTest = JSON.parse(pm.request.body.raw)\r",
											"\r",
											"//Collection creator cannot see labels on collection it did not give itself a grant for\r",
											"// if (user == \"collectioncreator\") { \r",
											"//     requestToTest.labels = []\r",
											"// }\r",
											"console.log(\"created collection with id: \" + JSON.stringify(collectionToDelete));\r",
											"\r",
											"\r",
											"// created now being returned, but don't know what value it will be.\r",
											"// response validation will verify that the property exists.\r",
											"// delete respJson.created;\r",
											"\r",
											"// pm.test(\"Response matches request\", function () {\r",
											"//     pm.expect(collectionGetToPost(respJson))\r",
											"//     .to.eql(requestToTest)\r",
											"// })\r",
											"\r",
											"// function collectionGetToPost (collectionGet) {\r",
											"//     // extract the transformed and unposted properties\r",
											"//     const {collectionId, grants, labels, ...collectionPost} = collectionGet\r",
											"\r",
											"//     // add transformed properties to the derived post  \r",
											"//     collectionPost.grants = grantsPostToGet(grants)\r",
											"//     collectionPost.labels = labelsPostToGet(labels)\r",
											"\r",
											"//     // the derived post object\r",
											"//     return collectionPost\r",
											"// }\r",
											"\r",
											"// function grantsPostToGet(grantsGetArray) {\r",
											"//     const grantsPostArray = []\r",
											"//     for (const grant of grantsGetArray) {\r",
											"//         grantsPostArray.push({\r",
											"//             userId: grant.user.userId,\r",
											"//             accessLevel: grant.accessLevel\r",
											"//         })\r",
											"//     }\r",
											"//     return grantsPostArray\r",
											"// }\r",
											"\r",
											"// function labelsPostToGet(labelsGetArray) {\r",
											"//    return labelsGetArray.map( label => {\r",
											"//         const {labelId, uses, ...labelPost} = label\r",
											"//         return labelPost\r",
											"\r",
											"//     })\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_delete_{{$randomNoun}}-{{$randomJobType}}\",\n    \"description\": \"Collection TEST description\",\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        },\n        \"history\": {\n            \"maxReviews\": 11\n        }\n  },\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"grants\": [\n        {\n                \"userId\": \"1\",\n                \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"85\",\n                \"accessLevel\": 1\n        }        \n    ],\n    \"labels\": [\n        {\n            \"name\": \"TEST\",\n            \"description\": \"Collection label description\",\n            \"color\": \"ffffff\"\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/collections?elevate=true&projection=grants&projection=labels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "labels"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Same tests as for GET /collection/{collectionId}\r",
											"\r",
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"lvl3\" || user == \"globular\" || user == \"collectioncreator\" ) { \r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    // return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let deletedCollection = respJson.collectionId\r",
											"pm.environment.set(\"deletedCollection\", deletedCollection);\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has requested projections and values\", function () {\r",
											"    // for (let item of jsonData){\r",
											"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"    // var regex = new RegExp(collectionMatchString);\r",
											"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
											"    //     pm.expect(jsonData.name).to.match(regex);\r",
											"    // });\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
											"        pm.expect(jsonData).to.have.property('assets');\r",
											"\r",
											"        for (let asset of jsonData.assets){\r",
											"            // pm.expect(asset).to.have.property('name');\r",
											"            // pm.expect(asset).to.have.property('assetId');\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
											"        pm.expect(jsonData).to.have.property('grants');\r",
											"   \r",
											"        for (let grant of jsonData.grants){\r",
											"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
											"            // pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        pm.expect(jsonData).to.have.property('stigs');\r",
											"\r",
											"        for (let stig of jsonData.stigs){\r",
											"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
											"        // console.log(\"checking owners projection\");\r",
											"        pm.expect(jsonData).to.have.property('owners');\r",
											"        for (let owner of jsonData.owners){\r",
											"            // pm.expect(owner).to.have.all.keys(userKeys);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
											"        // console.log(\"checking statistics projection\");\r",
											"        pm.expect(jsonData).to.have.property('statistics');\r",
											"\r",
											"        // pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// // let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(jsonData.name);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     pm.expect(jsonData.name).to.match(regex);\r",
											"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
											"// });\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?elevate=true&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{collectionToDelete}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Asset to be deleted in test collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"// }\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let assetToBeDeletedInTESTCollection = respJson.assetId\r",
											"pm.environment.set(\"assetToBeDeletedInTESTCollection\", assetToBeDeletedInTESTCollection);\r",
											"\r",
											"console.log(\"created asset with id: \" + JSON.stringify(assetToBeDeletedInTESTCollection));\r",
											"\r",
											"\r",
											"// pm.test(\"Response matches request\", function () {\r",
											"//     pm.expect(assetGetToPost(respJson))\r",
											"//     .to.eql(JSON.parse(pm.request.body.raw))\r",
											"// })\r",
											"\r",
											"// function assetGetToPost(assetGet) {\r",
											"//     // extract the transformed and unposted properties\r",
											"//     const {assetId, collection, stigs, mac, fqdn, ...assetPost} = assetGet\r",
											"    \r",
											"//     // add transformed properties to the derived post  \r",
											"//     assetPost.collectionId = collection.collectionId\r",
											"//     assetPost.stigs = stigsGetToPost(stigs)\r",
											"\r",
											"//     // the derived post object\r",
											"//     return assetPost\r",
											"// }\r",
											"\r",
											"// function stigsGetToPost(stigsGetArray) {\r",
											"//     const stigsPostArray = []\r",
											"//     for (const stig of stigsGetArray) {\r",
											"//         stigsPostArray.push(stig.benchmarkId)\r",
											"//     }\r",
											"//     return stigsPostArray\r",
											"// }\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{testCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"labelIds\": [\"{{testLabel}}\"],\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "set stig-asset grants for a lvl1 user in this collection.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"{{assetToBeDeletedInTESTCollection}}\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"42\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"154\"\r\n    }        \r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"grants",
										":userId",
										"access"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										},
										{
											"key": "userId",
											"value": "{{testLvl1User}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import one or more Reviews from a JSON body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"const expectedResponse = {\r",
											"    rejected: [],\r",
											"    affected: {\r",
											"        updated: 0,\r",
											"        inserted: 1\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response matches request\", function () {\r",
											"    pm.expect(jsonData).to.eql(expectedResponse);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										},
										{
											"key": "assetId",
											"value": "{{assetToBeDeletedInTESTCollection}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an Asset in test collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{assetToBeDeletedInTESTCollection}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GETs",
			"item": [
				{
					"name": "load standard test data Copy",
					"item": [
						{
							"name": "Import and overwrite application data (as elevated Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes the specified revision of a STIG v1r0 - with force - could fail if not present, so no tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate=true&force=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"revisions",
										":revisionStr"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "V1R0",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Collection GET",
					"item": [
						{
							"name": "{collection Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}/assets",
											"item": [
												{
													"name": "Assets in a Collection attached to a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"});\r",
																	"\r",
																	"// let collectionKeys = [\r",
																	"//     \"collectionId\",\r",
																	"//     \"name\",\r",
																	"//     \"workflow\",\r",
																	"//     \"metadata\"\r",
																	"// ]\r",
																	"// let assetKeys = [\r",
																	"//     \"assetId\",\r",
																	"//     \"name\",\r",
																	"//     \"collectionId\",\r",
																	"//     \"restrictedUserAccess\"\r",
																	"// ]\r",
																	"\r",
																	"\r",
																	"pm.test(\"assets have expected properties and values\", function () {\r",
																	"    for (let asset of jsonData){\r",
																	"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
																	"        var regex = new RegExp(assetMatchString);\r",
																	"        pm.expect(asset.name).to.match(regex);\r",
																	"\r",
																	"        if (pm.request.url.getQueryString().match(/projection=restrictedUserAccess/)) {\r",
																	"            for (let grant of asset.restrictedUserAccess){\r",
																	"                console.log(grant.username)\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    };\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?projection=restrictedUserAccess",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId",
																"assets"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "restrictedUserAccess",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Assets in a Collection attached to a STIG - label",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array of proper length\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"\r",
																	"    if (user == \"lvl1\" ) {\r",
																	"        pm.expect(jsonData.length).to.equal(1);\r",
																	"    }\r",
																	"    else{\r",
																	"        pm.expect(jsonData.length).to.equal(2);\r",
																	"\r",
																	"    }    \r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"assets have expected properties and values\", function () {\r",
																	"    for (let asset of jsonData){\r",
																	"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
																	"        var regex = new RegExp(assetMatchString);\r",
																	"        pm.expect(asset.name).to.match(regex);\r",
																	"\r",
																	"        if (pm.request.url.getQueryString().match(/projection=restrictedUserAccess/)) {\r",
																	"            for (let grant of asset.restrictedUserAccess){\r",
																	"                console.log(grant.username)\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    };\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?projection=restrictedUserAccess&labelId={{testLabel}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId",
																"assets"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "restrictedUserAccess",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Assets in a Collection attached to a STIG - label-lvl1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array of proper length\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"    pm.expect(jsonData.length).to.equal(1);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"assets have expected properties and values\", function () {\r",
																	"    for (let asset of jsonData){\r",
																	"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
																	"        var regex = new RegExp(assetMatchString);\r",
																	"        pm.expect(asset.name).to.match(regex);\r",
																	"\r",
																	"        if (pm.request.url.getQueryString().match(/projection=restrictedUserAccess/)) {\r",
																	"            for (let grant of asset.restrictedUserAccess){\r",
																	"                console.log(grant.username)\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    };\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?projection=restrictedUserAccess&labelId={{testLabel-lvl1}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId",
																"assets"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "restrictedUserAccess",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel-lvl1}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "{benchmarkId}",
											"item": [
												{
													"name": "Return Pinned Revision for this STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"// let collectionKeys = [\r",
																	"//     \"collectionId\",\r",
																	"//     \"name\",\r",
																	"//     \"workflow\",\r",
																	"//     \"metadata\"\r",
																	"// ]\r",
																	"// let assetKeys = [\r",
																	"//     \"assetId\",\r",
																	"//     \"name\",\r",
																	"//     \"collectionId\",\r",
																	"//     \"restrictedUserAccess\"\r",
																	"// ]\r",
																	"\r",
																	"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
																	"let testRev = pm.environment.get(\"testRev\");\r",
																	"\r",
																	"pm.test(\"assets have expected properties and values\", function () {\r",
																	"    // for (let asset of jsonData){\r",
																	"        // let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
																	"        // var regex = new RegExp(assetMatchString);\r",
																	"        pm.expect(jsonData.benchmarkId).to.eql(testBenchmark);\r",
																	"        pm.expect(jsonData.revisionStr).to.eql(testRev);\r",
																	"        pm.expect(jsonData.revisionPinned).to.eql(false);\r",
																	"\r",
																	"        // if (pm.request.url.getQueryString().match(/projection=restrictedUserAccess/)) {\r",
																	"        //     for (let grant of asset.restrictedUserAccess){\r",
																	"        //         console.log(grant.username)\r",
																	"        //     }\r",
																	"        // }\r",
																	"\r",
																	"    // };\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return Pinned Revision for this STIG - lvl1 204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else if (user == \"lvl1\" ){\r",
																	"    pm.test(\"Status code is 204\", function () {\r",
																	"        pm.response.to.have.status(204);\r",
																	"    });\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"// let collectionKeys = [\r",
																	"//     \"collectionId\",\r",
																	"//     \"name\",\r",
																	"//     \"workflow\",\r",
																	"//     \"metadata\"\r",
																	"// ]\r",
																	"// let assetKeys = [\r",
																	"//     \"assetId\",\r",
																	"//     \"name\",\r",
																	"//     \"collectionId\",\r",
																	"//     \"restrictedUserAccess\"\r",
																	"// ]\r",
																	"\r",
																	"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
																	"let testRev = pm.environment.get(\"testRev\");\r",
																	"\r",
																	"pm.test(\"assets have expected properties and values\", function () {\r",
																	"    // for (let asset of jsonData){\r",
																	"        // let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
																	"        // var regex = new RegExp(assetMatchString);\r",
																	"        pm.expect(jsonData.benchmarkId).to.eql(\"Windows_10_STIG_TEST\");\r",
																	"        pm.expect(jsonData.revisionStr).to.eql(\"V1R23\");\r",
																	"        pm.expect(jsonData.revisionPinned).to.eql(false);\r",
																	"\r",
																	"        // if (pm.request.url.getQueryString().match(/projection=restrictedUserAccess/)) {\r",
																	"        //     for (let grant of asset.restrictedUserAccess){\r",
																	"        //         console.log(grant.username)\r",
																	"        //     }\r",
																	"        // }\r",
																	"\r",
																	"    // };\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "Windows_10_STIG_TEST",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return the info about the specified STIG from the specified Collection - asset projection",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
																	"let testRev = pm.environment.get(\"testRev\");\r",
																	"\r",
																	"pm.test(\"assets have expected properties and values\", function () {\r",
																	"    // for (let asset of jsonData){\r",
																	"        // let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
																	"        // var regex = new RegExp(assetMatchString);\r",
																	"        pm.expect(jsonData.benchmarkId).to.eql(testBenchmark);\r",
																	"        pm.expect(jsonData.revisionStr).to.eql(testRev);\r",
																	"        pm.expect(jsonData.revisionPinned).to.eql(false);\r",
																	"\r",
																	"});\r",
																	"\r",
																	"let assetRegex = new RegExp(pm.environment.get(\"assetMatchString\"));\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
																	"    for (let asset of jsonData.assets){\r",
																	"\r",
																	"        pm.test(\"Response has requested asset projection and proper assets\", function () {\r",
																	"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
																	"            pm.expect(asset.name).to.match(assetRegex);\r",
																	"            // pm.expect(stig.revisionPinned).to.eql(false);\r",
																	"        });\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId?projection=assets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "assets"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Return the STIGs mapped in the specified Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"// let stigKeys = [\r",
															"//     \"title\",\r",
															"//     \"ruleCount\",\r",
															"//     \"benchmarkId\",\r",
															"//     \"lastRevisionDate\",\r",
															"//     \"lastRevisionStr\",\r",
															"//     \"assetCount\",\r",
															"//     \"acceptedCount\",\r",
															"//     \"rejectedCount\",\r",
															"//     \"submittedCount\",\r",
															"//     \"savedCount\",\r",
															"//     \"minTs\",\r",
															"//     \"maxTs\"\r",
															"// ]\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"    for (let stig of jsonData){\r",
															"        // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"        pm.expect(stig.revisionPinned).to.eql(false);\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the STIGs mapped in the specified Collection - label",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"    for (let stig of jsonData){\r",
															"        // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"        \r",
															"        if (user == \"lvl1\" ) {\r",
															"            pm.expect(stig.assetCount).to.equal(1);\r",
															"        }\r",
															"        else{\r",
															"            pm.expect(stig.assetCount).to.equal(2);\r",
															"\r",
															"        }\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs?labelId={{testLabel}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)",
															"disabled": true
														},
														{
															"key": "labelId",
															"value": "{{testLabel}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the STIGs mapped in the specified Collection - label-lvl1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"    for (let stig of jsonData){\r",
															"        // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"        pm.expect(stig.assetCount).to.equal(1);\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs?labelId={{testLabel-lvl1}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)",
															"disabled": true
														},
														{
															"key": "labelId",
															"value": "{{testLabel-lvl1}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the STIGs mapped in the specified Collection - asset projection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"// let stigKeys = [\r",
															"//     \"title\",\r",
															"//     \"ruleCount\",\r",
															"//     \"benchmarkId\",\r",
															"//     \"lastRevisionDate\",\r",
															"//     \"lastRevisionStr\",\r",
															"//     \"assetCount\",\r",
															"//     \"acceptedCount\",\r",
															"//     \"rejectedCount\",\r",
															"//     \"submittedCount\",\r",
															"//     \"savedCount\",\r",
															"//     \"minTs\",\r",
															"//     \"maxTs\"\r",
															"// ]\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"// let assetRegex = pm.environment.get(\"assetMatchString\");\r",
															"// let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"let assetRegex = new RegExp(pm.environment.get(\"assetMatchString\"));\r",
															"\r",
															"    for (let stig of jsonData){\r",
															"        pm.test(\"Response has valid stigs\", function () {\r",
															"\r",
															"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"            pm.expect(stig.revisionPinned).to.eql(false);\r",
															"        });\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
															"            for (let asset of stig.assets){\r",
															"\r",
															"                pm.test(\"Response has requested asset projection and proper assets\", function () {\r",
															"                    // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"                    pm.expect(asset.name).to.match(assetRegex);\r",
															"                    // pm.expect(stig.revisionPinned).to.eql(false);\r",
															"                });\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs?projection=assets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "grants/{userId}/access",
									"item": [
										{
											"name": "Return stig-asset grants for a lvl1 user in this collection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"lvl2\" || user == \"globular\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array').of.length(2);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"// let stigAssetGrantKeys = [\r",
															"//     \"benchmarkId\",\r",
															"//     \"asset\"\r",
															"// ]\r",
															"\r",
															"// let assetKeys = [\r",
															"//     \"name\",\r",
															"//     \"assetId\"\r",
															"// ]\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"\r",
															"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"    var regex = new RegExp(assetMatchString);\r",
															"    \r",
															"    for (let stigAssetGrant of jsonData){\r",
															"        // pm.expect(stigAssetGrant).to.have.all.keys(stigAssetGrantKeys);\r",
															"        pm.expect(stigAssetGrant.benchmarkId).to.be.oneOf(validStigs);\r",
															"        // pm.expect(stigAssetGrant.asset).to.have.all.keys(assetKeys);\r",
															"        \r",
															"        pm.expect(stigAssetGrant.asset.name).to.match(regex);\r",
															"\r",
															"        // pm.expect(stigAssetGrant.asset).to.be.oneOf(validStigs);\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"grants",
														":userId",
														"access"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "userId",
															"value": "{{testLvl1User}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Findings",
									"item": [
										{
											"name": "Return the Findings for the specified Collection by ruleId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=ruleId&acceptedOnly=false&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "ruleId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Findings for the specified Collection by groupId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=groupId&acceptedOnly=false&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "groupId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Findings for the specified Collection by cci",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=cci&acceptedOnly=false&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "cci",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Findings for the specified Collection for benchmarkId x ruleId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=ruleId&acceptedOnly=false&benchmarkId={{testBenchmark}}&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "ruleId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Findings for the specified Collection for asset x ruleId Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=ruleId&acceptedOnly=false&assetId={{testAsset}}&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "ruleId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset"
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let user = pm.environment.get(\"user\");",
													"console.log(\"user: \" + user);",
													"",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
													"    user = \"elevated\";",
													"    console.log(\"setting user to 'elevated'\");",
													"}",
													"",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
													"        pm.response.to.have.status(403);",
													"    });",
													"    return;",
													"}",
													"else {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"if (pm.response.code !== 200) {",
													"    return;",
													"}",
													"",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Response JSON is an array with expected length\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
													"",
													"});",
													"",
													"",
													"",
													"",
													"let findingKeys = []",
													"let assetsKeys = [",
													"    \"name\",",
													"    \"assetId\"",
													"]",
													"",
													"",
													"if (pm.request.url.getQueryString().match(/aggregator=ruleId/)) {",
													"    findingKeys = [",
													"        \"ruleId\",",
													"        \"title\",",
													"        \"severity\",",
													"        \"assetCount\"",
													"    ]",
													"}",
													"if (pm.request.url.getQueryString().match(/aggregator=groupId/)) {",
													"    findingKeys = [",
													"        \"groupId\",",
													"        \"title\",",
													"        \"severity\",",
													"        \"assetCount\"",
													"    ]",
													"}",
													"",
													"if (pm.request.url.getQueryString().match(/aggregator=cci/)) {",
													"    findingKeys = [",
													"        \"cci\",",
													"        \"definition\",",
													"        \"apAcronym\",",
													"        \"assetCount\"",
													"    ]",
													"}",
													"",
													"if (pm.request.url.getQueryString().match(/projection=rules/)) {",
													"    findingKeys.push(\"rules\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=groups/)) {",
													"    findingKeys.push(\"groups\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=assets/)) {",
													"    findingKeys.push(\"assets\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
													"    findingKeys.push(\"stigs\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=ccis/)) {",
													"    findingKeys.push(\"ccis\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=poamRarSummary/)) {",
													"    findingKeys.push(\"poamRarSummary\")",
													"}",
													"",
													"pm.test(\"Each item in response has requested properties and values\", function () {",
													"    for (let item of jsonData){",
													"        pm.test(\"Check if object contains all provided keys\", function () {",
													"            pm.expect(item).to.have.all.keys(findingKeys);",
													"        });",
													"",
													"",
													"        if (pm.request.url.getQueryString().match(/projection=assets/)) {",
													"            pm.expect(item).to.have.property('assets');",
													"            let assetMatchString = pm.environment.get(\"assetMatchString\");",
													"            var regex = new RegExp(assetMatchString);",
													"            for (let asset of item.assets){",
													"                // pm.expect(asset).to.have.all.keys(assetsKeys);",
													"                pm.expect(asset.name).to.match(regex);",
													"",
													"",
													"            }",
													"        }",
													"",
													"        if (pm.request.url.getQueryString().match(/projection=statistics/)) {",
													"            // console.log(\"checking statistics projection\");",
													"            pm.expect(item).to.have.property('statistics');",
													"            // pm.expect(item.statistics).to.have.all.keys(statisticsKeys);",
													"",
													"        }",
													"",
													"        // if (user == \"lvl1\"  ) {",
													"            let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));",
													"            for (let stig of item.stigs){",
													"                pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);",
													"            }",
													"",
													"    };",
													"",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									]
								},
								{
									"name": "CKL",
									"item": [
										{
											"name": "Return the Checklist for the supplied Collection and STIG-latest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"}\r",
															"\r",
															"pm.test(\"Check for an array of checklist items.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"let checklistLength = pm.environment.get(\"checklistLength\");\r",
															"\r",
															"pm.test(\"Check for an array of correct length.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"checklists",
														":benchmarkId",
														":revisionStr"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "latest",
															"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Checklist for the supplied Collection and STIG-revStr",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"}\r",
															"\r",
															"pm.test(\"Check for an array of checklist items.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"let checklistLength = pm.environment.get(\"checklistLength\");\r",
															"\r",
															"pm.test(\"Check for an array of correct length.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"checklists",
														":benchmarkId",
														":revisionStr"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "{{testRev}}",
															"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "poam",
									"item": [
										{
											"name": "Return an EMASS formatted POAM-like spreadsheet aggregated by groupId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Tests are at poam folder level"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/poam?format=EMASS&aggregator=groupId&date=01%2F01%2F1970&office=MyOffice&status=Ongoing&acceptedOnly=true&mccastPackageId=PackageID&mccastAuthName=AuthPackageName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"poam"
													],
													"query": [
														{
															"key": "format",
															"value": "EMASS"
														},
														{
															"key": "aggregator",
															"value": "groupId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "date",
															"value": "01%2F01%2F1970"
														},
														{
															"key": "office",
															"value": "MyOffice"
														},
														{
															"key": "status",
															"value": "Ongoing"
														},
														{
															"key": "acceptedOnly",
															"value": "true"
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														},
														{
															"key": "mccastPackageId",
															"value": "PackageID"
														},
														{
															"key": "mccastAuthName",
															"value": "AuthPackageName"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return an EMASS formatted POAM-like spreadsheet aggregated by ruleId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Tests are at poam folder level"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/poam?format=EMASS&aggregator=ruleId&date=01%2F01%2F1970&office=MyOffice&status=Ongoing&mccastPackageId=PackageID&mccastAuthName=AuthPackageName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"poam"
													],
													"query": [
														{
															"key": "format",
															"value": "EMASS"
														},
														{
															"key": "aggregator",
															"value": "ruleId"
														},
														{
															"key": "date",
															"value": "01%2F01%2F1970"
														},
														{
															"key": "office",
															"value": "MyOffice"
														},
														{
															"key": "status",
															"value": "Ongoing"
														},
														{
															"key": "mccastPackageId",
															"value": "PackageID"
														},
														{
															"key": "mccastAuthName",
															"value": "AuthPackageName"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return an EMASS formatted POAM-like spreadsheet aggregated by groupId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Tests are at poam folder level"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/poam?format=MCCAST&aggregator=groupId&date=01%2F01%2F1970&office=MyOffice&status=Started&acceptedOnly=true&mccastPackageId=PackageID&mccastAuthName=AuthPackageName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"poam"
													],
													"query": [
														{
															"key": "format",
															"value": "MCCAST"
														},
														{
															"key": "aggregator",
															"value": "groupId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "date",
															"value": "01%2F01%2F1970"
														},
														{
															"key": "office",
															"value": "MyOffice"
														},
														{
															"key": "status",
															"value": "Started"
														},
														{
															"key": "acceptedOnly",
															"value": "true"
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														},
														{
															"key": "mccastPackageId",
															"value": "PackageID"
														},
														{
															"key": "mccastAuthName",
															"value": "AuthPackageName"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a MCCAST formatted POAM-like spreadsheet aggregated by ruleId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Tests are at poam folder level"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/poam?format=MCCAST&aggregator=groupId&date=01%2F01%2F1970&office=MyOffice&status=Ongoing&acceptedOnly=true&mccastPackageId=PackageID&mccastAuthName=AuthPackageName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"poam"
													],
													"query": [
														{
															"key": "format",
															"value": "MCCAST"
														},
														{
															"key": "aggregator",
															"value": "ruleId"
														},
														{
															"key": "date",
															"value": "01%2F01%2F1970"
														},
														{
															"key": "office",
															"value": "MyOffice"
														},
														{
															"key": "status",
															"value": "Started"
														},
														{
															"key": "mccastPackageId",
															"value": "PackageID"
														},
														{
															"key": "mccastAuthName",
															"value": "AuthPackageName"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let user = pm.environment.get(\"user\");",
													"console.log(\"user: \" + user);",
													"",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
													"    user = \"elevated\";",
													"    console.log(\"setting user to 'elevated'\");",
													"}",
													"",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
													"        pm.response.to.have.status(403);",
													"    });",
													"    return;",
													"}",
													"else {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"if (pm.response.code !== 200) {",
													"    return;",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "metadata",
									"item": [
										{
											"name": "Return the Metadata for a Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"//&& user != \"collectioncreator\"\r",
															"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" && user != \"lvl5\") {\r",
															"    pm.test(\"Status should be 403 for all users except stigmanAdmin(elevated), collectioncreator, or >= level 3\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for \" + user, function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Check if collection metadata object contains proper metadata\", function () {\r",
															"    let testMetadataKey = pm.environment.get(\"pocEmail\");\r",
															"    let testMetadataValue = pm.environment.get(\"pocEmail@email.com\");\r",
															"    pm.expect(jsonData[testMetadataKey]).to.eql(testMetadataValue);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metadata?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metadata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Metadata KEYS for a Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" && user != \"lvl5\") {\r",
															"    pm.test(\"Status should be 403 for all users except stigmanAdmin(elevated) or >= level 3\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Check if collection metadata object contains proper metadata\", function () {\r",
															"    pm.expect(jsonData).to.include(\"pocEmail\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metadata/keys?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metadata",
														"keys"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Metadata VALUE for a Collection metadata KEY",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" && user != \"lvl5\") {\r",
															"    pm.test(\"Status should be 403 for all users except stigmanAdmin(elevated) or >= level 3\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for \" + user, function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('string');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Check if collection metadata object contains proper metadata\", function () {\r",
															"    pm.expect(jsonData).to.eql(\"poc2Patched\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metadata/keys/:key?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metadata",
														"keys",
														":key"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "key",
															"value": "{{metadataKey}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "labels",
									"item": [
										{
											"name": "{labelId}",
											"item": [
												{
													"name": "Collection label",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response has requested properties and values\", function () {\r",
																	" \r",
																	"    if (user == \"lvl1\" ) {\r",
																	"        pm.expect(jsonData.uses).to.equal(1);\r",
																	"\r",
																	"    }\r",
																	"    else{\r",
																	"        pm.expect(jsonData.uses).to.equal(2);\r",
																	"\r",
																	"    }            \r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
																	"// // console.log(\"collection string = \" + collectionMatchString);\r",
																	"// var regex = new RegExp(collectionMatchString);\r",
																	"// // let collectionNames = _.map(jsonData, 'name');\r",
																	"// // console.log(jsonData.name);\r",
																	"\r",
																	"// pm.test(\"Check that proper Collections are returned\", function () {\r",
																	"//     pm.expect(jsonData.name).to.match(regex);\r",
																	"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
																	"// });\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/labels/:labelId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"labels",
																":labelId"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Assets in Collection with a label",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response has requested properties and values\", function () {\r",
																	"    if (user == \"lvl1\" ) {\r",
																	"        pm.expect(jsonData.length).to.equal(1);\r",
																	"    }\r",
																	"    else{\r",
																	"        pm.expect(jsonData.length).to.equal(2);\r",
																	"    }            \r",
																	"\r",
																	"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
																	"    var regex = new RegExp(assetMatchString);\r",
																	"    for (let asset of jsonData){\r",
																	"        pm.expect(asset.name).to.match(regex);\r",
																	"    }\r",
																	"\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
																	"// // console.log(\"collection string = \" + collectionMatchString);\r",
																	"// var regex = new RegExp(collectionMatchString);\r",
																	"// // let collectionNames = _.map(jsonData, 'name');\r",
																	"// // console.log(jsonData.name);\r",
																	"\r",
																	"// pm.test(\"Check that proper Collections are returned\", function () {\r",
																	"//     pm.expect(jsonData.name).to.match(regex);\r",
																	"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
																	"// });\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/labels/:labelId/assets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"labels",
																":labelId",
																"assets"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Labels for the specified Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"let testLabelLvl1 = pm.environment.get(\"testLabelName-lvl1\");\r",
															"let testLabelFull = pm.environment.get(\"testLabelName\");\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array of proper length\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    pm.expect(jsonData.length).to.equal(2);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"    for (var label of jsonData){\r",
															"        if (user == \"lvl1\" ) {\r",
															"            pm.expect(label.uses).to.equal(1);\r",
															"        }\r",
															"        else {\r",
															"            if (label.name == testLabelFull){\r",
															"                pm.expect(label.uses).to.equal(2);\r",
															"            }\r",
															"            if (label.name == testLabelLvl1){\r",
															"                pm.expect(label.uses).to.equal(1);\r",
															"            }\r",
															"\r",
															"        }\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/labels",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"labels"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Review History - various params",
									"item": [
										{
											"name": "History records - no query params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"// else if (user == \"collectioncreator\" ) {\r",
															"//     pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(204);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"// let startDate = new Date(pm.environment.get(\"testStartDate\"));\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"pm.test(\"history response has proper number of assets\", function () {\r",
															"    pm.expect(jsonData).to.have.length(2);\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"for (let assetItem of jsonData){\r",
															"\r",
															"    if (assetItem.assetId == testAsset) {\r",
															"        console.log(\"test asset found\"  );\r",
															"        pm.test(\"test asset has proper number of rule history sets\", function () {\r",
															"            pm.expect(assetItem.reviewHistories).to.have.length(2);\r",
															"            // pm.expect(Date.parse(history.ts)).to.be.above(Date.parse(testStartDate));\r",
															"        });\r",
															"        for (let history of assetItem.reviewHistories){\r",
															"                if (history.ruleId == testRuleId) {\r",
															"                    pm.test(\"test rule has proper number of history entries\", function () {\r",
															"                        pm.expect(history.history).to.have.length(2);\r",
															"                    });\r",
															"                }\r",
															"\r",
															"        }\r",
															"    }\r",
															"\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}",
															"disabled": true
														},
														{
															"key": "endDate",
															"value": "",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History records - all params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"// else if (user == \"collectioncreator\" ) {\r",
															"//     pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(204);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"// let startDate = new Date(pm.environment.get(\"testStartDate\"));\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"let expectedArrayLength = 6;//history length variable from env.\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"for (let assetItem of jsonData){\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"assetId:\" + assetItem.assetId)\r",
															"        pm.test(\"Response matches proper assetId\", function () {\r",
															"\r",
															"            pm.expect(assetItem.assetId).to.equal(testAsset);\r",
															"        });\r",
															"\r",
															"    }\r",
															"\r",
															"    for (let history of assetItem.reviewHistories){\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/ruleId=/)) {\r",
															"            console.log(\"param ruleId found\"  );\r",
															"            console.log(\"testRuleId:\" + testRuleId  );\r",
															"            console.log(\"ruleId-response:\" + history.ruleId );\r",
															"            // console.log(\"touchTs:\" + history.touchTs  );\r",
															"            pm.test(\"Response has proper ruleId\", function () {\r",
															"\r",
															"                pm.expect(history.ruleId).to.equal(testRuleId);\r",
															"            });\r",
															"\r",
															"        }\r",
															"\r",
															"        for (let historyEntry of history.history){\r",
															"            if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"                console.log(\"param startDate found\"  );\r",
															"                console.log(\"testStartDate:\" + testStartDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper startDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.above(Date.parse(testStartDate));\r",
															"                });\r",
															"\r",
															"            }\r",
															"            if (pm.request.url.getQueryString().match(/endDate=/)) {\r",
															"                console.log(\"param endDate found\"  );\r",
															"                console.log(\"testEndDate:\" + testEndDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper endDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testEndDate));\r",
															"                    // pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testStartDate));\r",
															"                });\r",
															"            }\r",
															"\r",
															"\r",
															"\r",
															"            if (pm.request.url.getQueryString().match(/status=/)) {\r",
															"                console.log(\"param status found\"  );\r",
															"                console.log(\"testStatus:\" + testStatus  );\r",
															"                // console.log(\"status:\" + historyEntry.status.label );\r",
															"                console.log(\"status:\" + historyEntry.status.label );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper status\", function () {\r",
															"                    pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                    // pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                });          \r",
															"\r",
															"        }\r",
															"\r",
															"  \r",
															"\r",
															"        }    \r",
															"    \r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history?startDate={{testStartDate}}&endDate={{testEndDate}}&assetId={{testAsset}}&ruleId={{testRuleId}}&status={{testStatus}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}"
														},
														{
															"key": "endDate",
															"value": "{{testEndDate}}"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}"
														},
														{
															"key": "status",
															"value": "{{testStatus}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History records - startDate only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"// else if (user == \"collectioncreator\" ) {\r",
															"//     pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(204);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"// let startDate = new Date(pm.environment.get(\"testStartDate\"));\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"let expectedArrayLength = 6;//history length variable from env.\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"for (let assetItem of jsonData){\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"assetId:\" + assetItem.assetId)\r",
															"        pm.test(\"Response matches proper assetId\", function () {\r",
															"\r",
															"            pm.expect(assetItem.assetId).to.equal(testAsset);\r",
															"        });\r",
															"\r",
															"    }\r",
															"\r",
															"    for (let history of assetItem.reviewHistories){\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/ruleId=/)) {\r",
															"            console.log(\"param ruleId found\"  );\r",
															"            console.log(\"testRuleId:\" + testRuleId  );\r",
															"            console.log(\"ruleId-response:\" + history.ruleId );\r",
															"            // console.log(\"touchTs:\" + history.touchTs  );\r",
															"            pm.test(\"Response has proper ruleId\", function () {\r",
															"\r",
															"                pm.expect(history.ruleId).to.equal(testRuleId);\r",
															"            });\r",
															"\r",
															"        }\r",
															"\r",
															"        for (let historyEntry of history.history){\r",
															"            if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"                console.log(\"param startDate found\"  );\r",
															"                console.log(\"testStartDate:\" + testStartDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper startDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.above(Date.parse(testStartDate));\r",
															"                });\r",
															"\r",
															"            }\r",
															"            if (pm.request.url.getQueryString().match(/endDate=/)) {\r",
															"                console.log(\"param endDate found\"  );\r",
															"                console.log(\"testEndDate:\" + testEndDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper endDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testEndDate));\r",
															"                    // pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testStartDate));\r",
															"                });\r",
															"            }\r",
															"\r",
															"\r",
															"\r",
															"            if (pm.request.url.getQueryString().match(/status=/)) {\r",
															"                console.log(\"param status found\"  );\r",
															"                console.log(\"testStatus:\" + testStatus  );\r",
															"                // console.log(\"status:\" + historyEntry.status.label );\r",
															"                console.log(\"status:\" + historyEntry.status.label );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper status\", function () {\r",
															"                    pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                    // pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                });          \r",
															"\r",
															"        }\r",
															"\r",
															"  \r",
															"\r",
															"        }    \r",
															"    \r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history?startDate={{testStartDate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}"
														},
														{
															"key": "endDate",
															"value": "",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History records - endDate only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"// else if (user == \"collectioncreator\" ) {\r",
															"//     pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(204);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"// let startDate = new Date(pm.environment.get(\"testStartDate\"));\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"let expectedArrayLength = 6;//history length variable from env.\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"for (let assetItem of jsonData){\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"assetId:\" + assetItem.assetId)\r",
															"        pm.test(\"Response matches proper assetId\", function () {\r",
															"\r",
															"            pm.expect(assetItem.assetId).to.equal(testAsset);\r",
															"        });\r",
															"\r",
															"    }\r",
															"\r",
															"    for (let history of assetItem.reviewHistories){\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/ruleId=/)) {\r",
															"            console.log(\"param ruleId found\"  );\r",
															"            console.log(\"testRuleId:\" + testRuleId  );\r",
															"            console.log(\"ruleId-response:\" + history.ruleId );\r",
															"            // console.log(\"touchTs:\" + history.touchTs  );\r",
															"            pm.test(\"Response has proper ruleId\", function () {\r",
															"\r",
															"                pm.expect(history.ruleId).to.equal(testRuleId);\r",
															"            });\r",
															"\r",
															"        }\r",
															"\r",
															"        for (let historyEntry of history.history){\r",
															"            if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"                console.log(\"param startDate found\"  );\r",
															"                console.log(\"testStartDate:\" + testStartDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper startDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.above(Date.parse(testStartDate));\r",
															"                });\r",
															"\r",
															"            }\r",
															"            if (pm.request.url.getQueryString().match(/endDate=/)) {\r",
															"                console.log(\"param endDate found\"  );\r",
															"                console.log(\"testEndDate:\" + testEndDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper endDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testEndDate));\r",
															"                    // pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testStartDate));\r",
															"                });\r",
															"            }\r",
															"\r",
															"\r",
															"\r",
															"            if (pm.request.url.getQueryString().match(/status=/)) {\r",
															"                console.log(\"param status found\"  );\r",
															"                console.log(\"testStatus:\" + testStatus  );\r",
															"                // console.log(\"status:\" + historyEntry.status.label );\r",
															"                console.log(\"status:\" + historyEntry.status.label );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper status\", function () {\r",
															"                    pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                    // pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                });          \r",
															"\r",
															"        }\r",
															"\r",
															"  \r",
															"\r",
															"        }    \r",
															"    \r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history?endDate={{testEndDate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history"
													],
													"query": [
														{
															"key": "startDate",
															"value": "2020-08-12",
															"disabled": true
														},
														{
															"key": "endDate",
															"value": "{{testEndDate}}"
														},
														{
															"key": "assetId",
															"value": "",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History records - start and end dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"// else if (user == \"collectioncreator\" ) {\r",
															"//     pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(204);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"// let startDate = new Date(pm.environment.get(\"testStartDate\"));\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"let expectedArrayLength = 6;//history length variable from env.\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"for (let assetItem of jsonData){\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"assetId:\" + assetItem.assetId)\r",
															"        pm.test(\"Response matches proper assetId\", function () {\r",
															"\r",
															"            pm.expect(assetItem.assetId).to.equal(testAsset);\r",
															"        });\r",
															"\r",
															"    }\r",
															"\r",
															"    for (let history of assetItem.reviewHistories){\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/ruleId=/)) {\r",
															"            console.log(\"param ruleId found\"  );\r",
															"            console.log(\"testRuleId:\" + testRuleId  );\r",
															"            console.log(\"ruleId-response:\" + history.ruleId );\r",
															"            // console.log(\"touchTs:\" + history.touchTs  );\r",
															"            pm.test(\"Response has proper ruleId\", function () {\r",
															"\r",
															"                pm.expect(history.ruleId).to.equal(testRuleId);\r",
															"            });\r",
															"\r",
															"        }\r",
															"\r",
															"        for (let historyEntry of history.history){\r",
															"            if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"                console.log(\"param startDate found\"  );\r",
															"                console.log(\"testStartDate:\" + testStartDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper startDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.above(Date.parse(testStartDate));\r",
															"                });\r",
															"\r",
															"            }\r",
															"            if (pm.request.url.getQueryString().match(/endDate=/)) {\r",
															"                console.log(\"param endDate found\"  );\r",
															"                console.log(\"testEndDate:\" + testEndDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper endDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testEndDate));\r",
															"                    // pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testStartDate));\r",
															"                });\r",
															"            }\r",
															"\r",
															"\r",
															"\r",
															"            if (pm.request.url.getQueryString().match(/status=/)) {\r",
															"                console.log(\"param status found\"  );\r",
															"                console.log(\"testStatus:\" + testStatus  );\r",
															"                // console.log(\"status:\" + historyEntry.status.label );\r",
															"                console.log(\"status:\" + historyEntry.status.label );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper status\", function () {\r",
															"                    pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                    // pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                });          \r",
															"\r",
															"        }\r",
															"\r",
															"  \r",
															"\r",
															"        }    \r",
															"    \r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history?startDate={{testStartDate}}&endDate={{testEndDate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}"
														},
														{
															"key": "endDate",
															"value": "{{testEndDate}}"
														},
														{
															"key": "assetId",
															"value": "",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History records - asset only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"// else if (user == \"collectioncreator\" ) {\r",
															"//     pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(204);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"// let startDate = new Date(pm.environment.get(\"testStartDate\"));\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"let expectedArrayLength = 6;//history length variable from env.\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"for (let assetItem of jsonData){\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"assetId:\" + assetItem.assetId)\r",
															"        pm.test(\"Response matches proper assetId\", function () {\r",
															"\r",
															"            pm.expect(assetItem.assetId).to.equal(testAsset);\r",
															"        });\r",
															"\r",
															"    }\r",
															"\r",
															"    for (let history of assetItem.reviewHistories){\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/ruleId=/)) {\r",
															"            console.log(\"param ruleId found\"  );\r",
															"            console.log(\"testRuleId:\" + testRuleId  );\r",
															"            console.log(\"ruleId-response:\" + history.ruleId );\r",
															"            // console.log(\"touchTs:\" + history.touchTs  );\r",
															"            pm.test(\"Response has proper ruleId\", function () {\r",
															"\r",
															"                pm.expect(history.ruleId).to.equal(testRuleId);\r",
															"            });\r",
															"\r",
															"        }\r",
															"\r",
															"        for (let historyEntry of history.history){\r",
															"            if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"                console.log(\"param startDate found\"  );\r",
															"                console.log(\"testStartDate:\" + testStartDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper startDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.above(Date.parse(testStartDate));\r",
															"                });\r",
															"\r",
															"            }\r",
															"            if (pm.request.url.getQueryString().match(/endDate=/)) {\r",
															"                console.log(\"param endDate found\"  );\r",
															"                console.log(\"testEndDate:\" + testEndDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper endDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testEndDate));\r",
															"                    // pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testStartDate));\r",
															"                });\r",
															"            }\r",
															"\r",
															"\r",
															"\r",
															"            if (pm.request.url.getQueryString().match(/status=/)) {\r",
															"                console.log(\"param status found\"  );\r",
															"                console.log(\"testStatus:\" + testStatus  );\r",
															"                // console.log(\"status:\" + historyEntry.status.label );\r",
															"                console.log(\"status:\" + historyEntry.status.label );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper status\", function () {\r",
															"                    pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                    // pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                });          \r",
															"\r",
															"        }\r",
															"\r",
															"  \r",
															"\r",
															"        }    \r",
															"    \r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history?assetId={{testAsset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}",
															"disabled": true
														},
														{
															"key": "endDate",
															"value": "{{testEndDate}}",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														},
														{
															"key": "ruleId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History records - rule only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"// else if (user == \"collectioncreator\" ) {\r",
															"//     pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(204);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"// let startDate = new Date(pm.environment.get(\"testStartDate\"));\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"let expectedArrayLength = 6;//history length variable from env.\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"for (let assetItem of jsonData){\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"assetId:\" + assetItem.assetId)\r",
															"        pm.test(\"Response matches proper assetId\", function () {\r",
															"\r",
															"            pm.expect(assetItem.assetId).to.equal(testAsset);\r",
															"        });\r",
															"\r",
															"    }\r",
															"\r",
															"    for (let history of assetItem.reviewHistories){\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/ruleId=/)) {\r",
															"            console.log(\"param ruleId found\"  );\r",
															"            console.log(\"testRuleId:\" + testRuleId  );\r",
															"            console.log(\"ruleId-response:\" + history.ruleId );\r",
															"            // console.log(\"touchTs:\" + history.touchTs  );\r",
															"            pm.test(\"Response has proper ruleId\", function () {\r",
															"\r",
															"                pm.expect(history.ruleId).to.equal(testRuleId);\r",
															"            });\r",
															"\r",
															"        }\r",
															"\r",
															"        for (let historyEntry of history.history){\r",
															"            if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"                console.log(\"param startDate found\"  );\r",
															"                console.log(\"testStartDate:\" + testStartDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper startDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.above(Date.parse(testStartDate));\r",
															"                });\r",
															"\r",
															"            }\r",
															"            if (pm.request.url.getQueryString().match(/endDate=/)) {\r",
															"                console.log(\"param endDate found\"  );\r",
															"                console.log(\"testEndDate:\" + testEndDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper endDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testEndDate));\r",
															"                    // pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testStartDate));\r",
															"                });\r",
															"            }\r",
															"\r",
															"\r",
															"\r",
															"            if (pm.request.url.getQueryString().match(/status=/)) {\r",
															"                console.log(\"param status found\"  );\r",
															"                console.log(\"testStatus:\" + testStatus  );\r",
															"                // console.log(\"status:\" + historyEntry.status.label );\r",
															"                console.log(\"status:\" + historyEntry.status.label );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper status\", function () {\r",
															"                    pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                    // pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                });          \r",
															"\r",
															"        }\r",
															"\r",
															"  \r",
															"\r",
															"        }    \r",
															"    \r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history?ruleId={{testRuleId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}",
															"disabled": true
														},
														{
															"key": "endDate",
															"value": "{{testEndDate}}",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}"
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History records - status only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"// else if (user == \"collectioncreator\" ) {\r",
															"//     pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(204);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"// let startDate = new Date(pm.environment.get(\"testStartDate\"));\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"let expectedArrayLength = 6;//history length variable from env.\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"for (let assetItem of jsonData){\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"assetId:\" + assetItem.assetId)\r",
															"        pm.test(\"Response matches proper assetId\", function () {\r",
															"\r",
															"            pm.expect(assetItem.assetId).to.equal(testAsset);\r",
															"        });\r",
															"\r",
															"    }\r",
															"\r",
															"    for (let history of assetItem.reviewHistories){\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/ruleId=/)) {\r",
															"            console.log(\"param ruleId found\"  );\r",
															"            console.log(\"testRuleId:\" + testRuleId  );\r",
															"            console.log(\"ruleId-response:\" + history.ruleId );\r",
															"            // console.log(\"touchTs:\" + history.touchTs  );\r",
															"            pm.test(\"Response has proper ruleId\", function () {\r",
															"\r",
															"                pm.expect(history.ruleId).to.equal(testRuleId);\r",
															"            });\r",
															"\r",
															"        }\r",
															"\r",
															"        for (let historyEntry of history.history){\r",
															"            if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"                console.log(\"param startDate found\"  );\r",
															"                console.log(\"testStartDate:\" + testStartDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper startDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.above(Date.parse(testStartDate));\r",
															"                });\r",
															"\r",
															"            }\r",
															"            if (pm.request.url.getQueryString().match(/endDate=/)) {\r",
															"                console.log(\"param endDate found\"  );\r",
															"                console.log(\"testEndDate:\" + testEndDate  );\r",
															"                console.log(\"ts:\" + historyEntry.ts  );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper endDate\", function () {\r",
															"\r",
															"                    pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testEndDate));\r",
															"                    // pm.expect(Date.parse(historyEntry.ts)).to.be.below(Date.parse(testStartDate));\r",
															"                });\r",
															"            }\r",
															"\r",
															"\r",
															"\r",
															"            if (pm.request.url.getQueryString().match(/status=/)) {\r",
															"                console.log(\"param status found\"  );\r",
															"                console.log(\"testStatus:\" + testStatus  );\r",
															"                // console.log(\"status:\" + historyEntry.status.label );\r",
															"                console.log(\"status:\" + historyEntry.status.label );\r",
															"                // console.log(\"touchTs:\" + historyEntry.touchTs  );\r",
															"                pm.test(\"Response has proper status\", function () {\r",
															"                    pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                    // pm.expect(historyEntry.status.label).to.equal(testStatus);\r",
															"                });          \r",
															"\r",
															"        }\r",
															"\r",
															"  \r",
															"\r",
															"        }    \r",
															"    \r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history?status={{testStatus}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}",
															"disabled": true
														},
														{
															"key": "endDate",
															"value": "{{testEndDate}}",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"disabled": true
														},
														{
															"key": "status",
															"value": "{{testStatus}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Review History Stats - various params",
									"item": [
										{
											"name": "History stats - no query params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1, lvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAssetId = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"//  if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"//     console.log(\"startdate:\"  );\r",
															"\r",
															"// }\r",
															"\r",
															"//collectionHistoryEntryCount depending on provided parameters\r",
															"// these tested totals apply only if only one parameter is provided. \r",
															"pm.test(\"Response History Entry Count has proper value and oldest entry\", function () {\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"testAssetId:\" + testAssetId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(5);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/ruleId=/) ) {\r",
															"        console.log(\"param ruleId found\"  );\r",
															"        console.log(\"testRuleId:\" + testRuleId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(4);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:30:38.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/status=/) ) {\r",
															"        console.log(\"param status found\"  );\r",
															"        console.log(\"testStatus:\" + testStatus  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(3);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else if (pm.request.url.getQueryString().match(/endDate=/) ) {\r",
															"        console.log(\"param EndDate found\"  );\r",
															"        console.log(\"testEndDate:\" + testEndDate  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(6);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else {\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(7);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }\r",
															"});\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/projection=asset/)) {\r",
															"    console.log(\"param projection=asset\"  );\r",
															"    pm.test(\"Response has array of asset history count objects\", function () {\r",
															"        pm.expect(jsonData.assetHistoryEntryCounts.length).to.eql(2);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history/stats",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history",
														"stats"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}",
															"disabled": true
														},
														{
															"key": "endDate",
															"value": "{{testEndDate}}",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"disabled": true
														},
														{
															"key": "status",
															"value": "{{testStatus}}",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "asset",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History stats - all params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1, lvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAssetId = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"//  if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"//     console.log(\"startdate:\"  );\r",
															"\r",
															"// }\r",
															"\r",
															"//collectionHistoryEntryCount depending on provided parameters\r",
															"// these tested totals apply only if only one parameter is provided. \r",
															"// Combinations that are tested are specified in test request name.\r",
															"// \"all\" params plus asset projection is tested as a special case in this test. \r",
															"pm.test(\"Response History Entry Count has proper value and oldest entry\", function () {\r",
															"    pm.expect(jsonData.collectionHistoryEntryCount).to.equal(1);\r",
															"    pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T23:37:45.000Z\"))\r",
															"\r",
															"});\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/projection=asset/)) {\r",
															"    console.log(\"param projection=asset\"  );\r",
															"    pm.test(\"Response has array of asset history count objects\", function () {\r",
															"        pm.expect(jsonData.assetHistoryEntryCounts.length).to.eql(1);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"// pm.test(\"Response History Entry Count has proper value and oldest entry\", function () {\r",
															"//     if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"//         console.log(\"param assetId found\"  );\r",
															"//         console.log(\"testAssetId:\" + testAssetId  );\r",
															"//         pm.expect(jsonData.collectionHistoryEntryCount).to.equal(5);\r",
															"//         pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"\r",
															"//     }\r",
															"//     else if (pm.request.url.getQueryString().match(/ruleId=/) ) {\r",
															"//         console.log(\"param ruleId found\"  );\r",
															"//         console.log(\"testRuleId:\" + testRuleId  );\r",
															"//         pm.expect(jsonData.collectionHistoryEntryCount).to.equal(4);\r",
															"//         pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:30:38.000Z\"))\r",
															"\r",
															"//     }\r",
															"//     else if (pm.request.url.getQueryString().match(/status=/) ) {\r",
															"//         console.log(\"param status found\"  );\r",
															"//         console.log(\"testStatus:\" + testStatus  );\r",
															"//         pm.expect(jsonData.collectionHistoryEntryCount).to.equal(3);\r",
															"//         pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"//     }    \r",
															"//     else if (pm.request.url.getQueryString().match(/endDate=/) ) {\r",
															"//         console.log(\"param EndDate found\"  );\r",
															"//         console.log(\"testEndDate:\" + testEndDate  );\r",
															"//         pm.expect(jsonData.collectionHistoryEntryCount).to.equal(6);\r",
															"//         pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"//     }    \r",
															"//     else {\r",
															"//         pm.expect(jsonData.collectionHistoryEntryCount).to.equal(7);\r",
															"//         pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"//     }\r",
															"// });\r",
															"\r",
															"// if (pm.request.url.getQueryString().match(/projection=asset/)) {\r",
															"//     console.log(\"param projection=asset\"  );\r",
															"//     pm.test(\"Response has array of asset history count objects\", function () {\r",
															"//         pm.expect(jsonData.assetHistoryEntryCounts.length).to.eql(2);\r",
															"//     });\r",
															"\r",
															"// }\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history/stats?startDate={{testStartDate}}&endDate={{testEndDate}}&assetId={{testAsset}}&ruleId={{testRuleId}}&status={{testStatus}}&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history",
														"stats"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}"
														},
														{
															"key": "endDate",
															"value": "{{testEndDate}}"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}"
														},
														{
															"key": "status",
															"value": "{{testStatus}}"
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History stats - startDate only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1, lvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAssetId = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"//  if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"//     console.log(\"startdate:\"  );\r",
															"\r",
															"// }\r",
															"\r",
															"//collectionHistoryEntryCount depending on provided parameters\r",
															"// these tested totals apply only if only one parameter is provided. \r",
															"pm.test(\"Response History Entry Count has proper value and oldest entry\", function () {\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"testAssetId:\" + testAssetId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(5);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/ruleId=/) ) {\r",
															"        console.log(\"param ruleId found\"  );\r",
															"        console.log(\"testRuleId:\" + testRuleId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(4);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:30:38.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/status=/) ) {\r",
															"        console.log(\"param status found\"  );\r",
															"        console.log(\"testStatus:\" + testStatus  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(3);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else if (pm.request.url.getQueryString().match(/endDate=/) ) {\r",
															"        console.log(\"param EndDate found\"  );\r",
															"        console.log(\"testEndDate:\" + testEndDate  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(6);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else {\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(7);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }\r",
															"});\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/projection=asset/)) {\r",
															"    console.log(\"param projection=asset\"  );\r",
															"    pm.test(\"Response has array of asset history count objects\", function () {\r",
															"        pm.expect(jsonData.assetHistoryEntryCounts.length).to.eql(2);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history/stats?startDate={{testStartDate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history",
														"stats"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}"
														},
														{
															"key": "endDate",
															"value": "",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "asset",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History stats - startDate - Asset Projection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1, lvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAssetId = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"//  if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"//     console.log(\"startdate:\"  );\r",
															"\r",
															"// }\r",
															"\r",
															"//collectionHistoryEntryCount depending on provided parameters\r",
															"// these tested totals apply only if only one parameter is provided. \r",
															"pm.test(\"Response History Entry Count has proper value and oldest entry\", function () {\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"testAssetId:\" + testAssetId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(5);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/ruleId=/) ) {\r",
															"        console.log(\"param ruleId found\"  );\r",
															"        console.log(\"testRuleId:\" + testRuleId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(4);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:30:38.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/status=/) ) {\r",
															"        console.log(\"param status found\"  );\r",
															"        console.log(\"testStatus:\" + testStatus  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(3);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else if (pm.request.url.getQueryString().match(/endDate=/) ) {\r",
															"        console.log(\"param EndDate found\"  );\r",
															"        console.log(\"testEndDate:\" + testEndDate  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(6);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else {\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(7);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }\r",
															"});\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/projection=asset/)) {\r",
															"    console.log(\"param projection=asset\"  );\r",
															"    pm.test(\"Response has array of asset history count objects\", function () {\r",
															"        pm.expect(jsonData.assetHistoryEntryCounts.length).to.eql(2);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history/stats?startDate={{testStartDate}}&projection=asset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history",
														"stats"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}"
														},
														{
															"key": "endDate",
															"value": "",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "asset"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History stats - endDate only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1, lvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAssetId = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"//  if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"//     console.log(\"startdate:\"  );\r",
															"\r",
															"// }\r",
															"\r",
															"//collectionHistoryEntryCount depending on provided parameters\r",
															"// these tested totals apply only if only one parameter is provided. \r",
															"pm.test(\"Response History Entry Count has proper value and oldest entry\", function () {\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"testAssetId:\" + testAssetId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(5);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/ruleId=/) ) {\r",
															"        console.log(\"param ruleId found\"  );\r",
															"        console.log(\"testRuleId:\" + testRuleId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(4);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:30:38.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/status=/) ) {\r",
															"        console.log(\"param status found\"  );\r",
															"        console.log(\"testStatus:\" + testStatus  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(3);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else if (pm.request.url.getQueryString().match(/endDate=/) ) {\r",
															"        console.log(\"param EndDate found\"  );\r",
															"        console.log(\"testEndDate:\" + testEndDate  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(6);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else {\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(7);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }\r",
															"});\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/projection=asset/)) {\r",
															"    console.log(\"param projection=asset\"  );\r",
															"    pm.test(\"Response has array of asset history count objects\", function () {\r",
															"        pm.expect(jsonData.assetHistoryEntryCounts.length).to.eql(2);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history/stats?endDate={{testEndDate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history",
														"stats"
													],
													"query": [
														{
															"key": "startDate",
															"value": "2020-08-12",
															"disabled": true
														},
														{
															"key": "endDate",
															"value": "{{testEndDate}}"
														},
														{
															"key": "assetId",
															"value": "",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "asset",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History stats - start and end dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1, lvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAssetId = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"//  if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"//     console.log(\"startdate:\"  );\r",
															"\r",
															"// }\r",
															"\r",
															"//collectionHistoryEntryCount depending on provided parameters\r",
															"// these tested totals apply only if only one parameter is provided. \r",
															"pm.test(\"Response History Entry Count has proper value and oldest entry\", function () {\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"testAssetId:\" + testAssetId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(5);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/ruleId=/) ) {\r",
															"        console.log(\"param ruleId found\"  );\r",
															"        console.log(\"testRuleId:\" + testRuleId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(4);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:30:38.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/status=/) ) {\r",
															"        console.log(\"param status found\"  );\r",
															"        console.log(\"testStatus:\" + testStatus  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(3);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else if (pm.request.url.getQueryString().match(/endDate=/) ) {\r",
															"        console.log(\"param EndDate found\"  );\r",
															"        console.log(\"testEndDate:\" + testEndDate  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(6);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else {\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(7);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }\r",
															"});\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/projection=asset/)) {\r",
															"    console.log(\"param projection=asset\"  );\r",
															"    pm.test(\"Response has array of asset history count objects\", function () {\r",
															"        pm.expect(jsonData.assetHistoryEntryCounts.length).to.eql(2);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history/stats?startDate={{testStartDate}}&endDate={{testEndDate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history",
														"stats"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{testStartDate}}"
														},
														{
															"key": "endDate",
															"value": "{{testEndDate}}"
														},
														{
															"key": "assetId",
															"value": "",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "asset",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History stats - asset only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1, lvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAssetId = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"//  if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"//     console.log(\"startdate:\"  );\r",
															"\r",
															"// }\r",
															"\r",
															"//collectionHistoryEntryCount depending on provided parameters\r",
															"// these tested totals apply only if only one parameter is provided. \r",
															"pm.test(\"Response History Entry Count has proper value and oldest entry\", function () {\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"testAssetId:\" + testAssetId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(5);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/ruleId=/) ) {\r",
															"        console.log(\"param ruleId found\"  );\r",
															"        console.log(\"testRuleId:\" + testRuleId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(4);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:30:38.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/status=/) ) {\r",
															"        console.log(\"param status found\"  );\r",
															"        console.log(\"testStatus:\" + testStatus  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(3);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else if (pm.request.url.getQueryString().match(/endDate=/) ) {\r",
															"        console.log(\"param EndDate found\"  );\r",
															"        console.log(\"testEndDate:\" + testEndDate  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(6);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else {\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(7);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }\r",
															"});\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/projection=asset/)) {\r",
															"    console.log(\"param projection=asset\"  );\r",
															"    pm.test(\"Response has array of asset history count objects\", function () {\r",
															"        pm.expect(jsonData.assetHistoryEntryCounts.length).to.eql(2);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history/stats?assetId={{testAsset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history",
														"stats"
													],
													"query": [
														{
															"key": "startDate",
															"value": "2020-08-12",
															"disabled": true
														},
														{
															"key": "endDate",
															"value": "2021-08-12",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														},
														{
															"key": "ruleId",
															"value": "",
															"disabled": true
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "asset",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History stats - rule only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1, lvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAssetId = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"//  if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"//     console.log(\"startdate:\"  );\r",
															"\r",
															"// }\r",
															"\r",
															"//collectionHistoryEntryCount depending on provided parameters\r",
															"// these tested totals apply only if only one parameter is provided. \r",
															"pm.test(\"Response History Entry Count has proper value and oldest entry\", function () {\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"testAssetId:\" + testAssetId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(5);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/ruleId=/) ) {\r",
															"        console.log(\"param ruleId found\"  );\r",
															"        console.log(\"testRuleId:\" + testRuleId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(4);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:30:38.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/status=/) ) {\r",
															"        console.log(\"param status found\"  );\r",
															"        console.log(\"testStatus:\" + testStatus  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(3);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else if (pm.request.url.getQueryString().match(/endDate=/) ) {\r",
															"        console.log(\"param EndDate found\"  );\r",
															"        console.log(\"testEndDate:\" + testEndDate  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(6);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else {\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(7);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }\r",
															"});\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/projection=asset/)) {\r",
															"    console.log(\"param projection=asset\"  );\r",
															"    pm.test(\"Response has array of asset history count objects\", function () {\r",
															"        pm.expect(jsonData.assetHistoryEntryCounts.length).to.eql(2);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history/stats?ruleId={{testRuleId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history",
														"stats"
													],
													"query": [
														{
															"key": "startDate",
															"value": "2020-08-12",
															"disabled": true
														},
														{
															"key": "endDate",
															"value": "2021-08-12",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "42",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}"
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "asset",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History stats - status only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1, lvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"let testStartDate = pm.environment.get(\"testStartDate\");\r",
															"let testEndDate = pm.environment.get(\"testEndDate\");\r",
															"let testAssetId = pm.environment.get(\"testAsset\");\r",
															"let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"let testStatus = pm.environment.get(\"testStatus\");\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"//  if (pm.request.url.getQueryString().match(/startDate=/)) {\r",
															"//     console.log(\"startdate:\"  );\r",
															"\r",
															"// }\r",
															"\r",
															"//collectionHistoryEntryCount depending on provided parameters\r",
															"// these tested totals apply only if only one parameter is provided. \r",
															"pm.test(\"Response History Entry Count has proper value and oldest entry\", function () {\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        console.log(\"param assetId found\"  );\r",
															"        console.log(\"testAssetId:\" + testAssetId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(5);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/ruleId=/) ) {\r",
															"        console.log(\"param ruleId found\"  );\r",
															"        console.log(\"testRuleId:\" + testRuleId  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(4);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:30:38.000Z\"))\r",
															"\r",
															"    }\r",
															"    else if (pm.request.url.getQueryString().match(/status=/) ) {\r",
															"        console.log(\"param status found\"  );\r",
															"        console.log(\"testStatus:\" + testStatus  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(3);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else if (pm.request.url.getQueryString().match(/endDate=/) ) {\r",
															"        console.log(\"param EndDate found\"  );\r",
															"        console.log(\"testEndDate:\" + testEndDate  );\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(6);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }    \r",
															"    else {\r",
															"        pm.expect(jsonData.collectionHistoryEntryCount).to.equal(7);\r",
															"        pm.expect(Date.parse(jsonData.oldestHistoryEntryDate)).to.equal(Date.parse(\"2020-08-11T22:26:50.000Z\"))\r",
															"    }\r",
															"});\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/projection=asset/)) {\r",
															"    console.log(\"param projection=asset\"  );\r",
															"    pm.test(\"Response has array of asset history count objects\", function () {\r",
															"        pm.expect(jsonData.assetHistoryEntryCounts.length).to.eql(2);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history/stats?status={{testStatus}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history",
														"stats"
													],
													"query": [
														{
															"key": "startDate",
															"value": "2020-08-12",
															"disabled": true
														},
														{
															"key": "endDate",
															"value": "2021-08-12",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "42",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"disabled": true
														},
														{
															"key": "status",
															"value": "{{testStatus}}"
														},
														{
															"key": "projection",
															"value": "asset",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Return a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    var regex = new RegExp(collectionMatchString);\r",
													"    pm.test(\"Check that proper Collections are returned\", function () {\r",
													"        pm.expect(jsonData.name).to.match(regex);\r",
													"    });\r",
													"\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        pm.expect(jsonData.assets).to.exist;\r",
													"\r",
													"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"        var assetRegex = new RegExp(assetMatchString);\r",
													"        for (let asset of jsonData.assets){\r",
													"            // pm.expect(asset).to.have.property('name');\r",
													"            // pm.expect(asset).to.have.property('assetId');\r",
													"            pm.expect(asset.name).to.match(assetRegex);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        for (let grant of jsonData.grants){\r",
													"            pm.expect(jsonData.grants).to.exist;\r",
													"\r",
													"            // pm.expect(grant).to.be(array);\r",
													"            // pm.expect(grant.user).to.be(object);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            // pm.expect(stig).to.be(object);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        // console.log(\"checking owners projection\");\r",
													"        pm.expect(jsonData.owners).to.exist;\r",
													"\r",
													"        for (let owner of jsonData.owners){\r",
													"            // pm.expect(owner).to.be(array);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData.statistics).to.exist;\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=labels/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData.labels).to.exist;\r",
													"        if (user == \"lvl1\" ) {\r",
													"            pm.expect(jsonData.labels.length).to.equal(2);\r",
													"            pm.expect(jsonData.labels[0].uses).to.equal(1);\r",
													"            pm.expect(jsonData.labels[1].uses).to.equal(1);\r",
													"\r",
													"        }\r",
													"        else{\r",
													"            pm.expect(jsonData.labels.length).to.equal(2);\r",
													"\r",
													"        }            \r",
													"\r",
													"    }\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// // let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(jsonData.name);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     pm.expect(jsonData.name).to.match(regex);\r",
													"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Collections various params",
							"item": [
								{
									"name": "Return a list of Collections accessible to the requester TEST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow.",
													"disabled": true
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return a list of Collections accessible to the requester No Filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?elevate={{elevated}}&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow.",
													"disabled": true
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return a list of Collections accessible to the requester NAME",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?name={{collectionMatchString}}&elevate={{elevated}}&projection=owners&projection=statistics&name-match={{collectionMatchType}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name"
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow.",
													"disabled": true
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "name-match",
													"value": "{{collectionMatchType}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return a list of Collections accessible to the requester METADATA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?metadata={{metadataKey}}%3A{{metadataValue}}&elevate={{elevated}}&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow.",
													"disabled": true
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}%3A{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections"
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let user = pm.environment.get(\"user\");",
											"console.log(\"user: \" + user);",
											"",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
											"    user = \"elevated\";",
											"    console.log(\"setting user to 'elevated'\");",
											"}",
											"",
											"if (user == \"bizarroLvl1\" ) {",
											"    pm.test(\"Status should be is 403 for user bizarroLvl1\", function () {",
											"        pm.response.to.have.status(403);",
											"    });",
											"    return;",
											"}",
											"else {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"}",
											"if (pm.response.code !== 200) {",
											"    return;",
											"}",
											"",
											"",
											"let jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Response JSON is an array with expected length\", function () {",
											"    pm.expect(jsonData).to.be.an('array');",
											"    if (user != \"collectioncreator\" ) {",
											"        pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    }",
											"",
											"});",
											"",
											"",
											"",
											"pm.test(\"Each item in response has requested properties and values\", function () {",
											"    for (let item of jsonData){",
											"        pm.test(\"Check if object contains all provided keys\", function () {",
											"            // pm.expect(item).to.have.all.keys(collectionKeys);",
											"        });",
											"",
											"        let collectionMatchString = pm.environment.get(\"collectionMatchString\");",
											"        var regex = new RegExp(collectionMatchString);",
											"        pm.test(\"Check that proper Collection names are returned\", function () {",
											"            pm.expect(item.name).to.match(regex);",
											"        });",
											"",
											"",
											"        pm.expect(item).to.have.property('metadata');",
											"        ",
											"        if (pm.request.url.getQueryString().match(/metadata=/)) {",
											"            let metaKey = pm.environment.get(\"metadataKey\");",
											"            let metaValue = pm.environment.get(\"metadataValue\");",
											"            let metaCheckObject = {}",
											"            metaCheckObject[metaKey] = metaValue",
											"            pm.expect(item.metadata).to.include(metaCheckObject);",
											"            // pm.expect(item.metadata).to.have.key({{metadataValue}});",
											"",
											"        }",
											"",
											"        if (pm.request.url.getQueryString().match(/projection=owners/)) {",
											"            pm.expect(item).to.have.property('owners');",
											"            for (let owner of item.owners){",
											"                // pm.expect(owner).to.have.all.keys(userKeys);",
											"            }",
											"        }",
											"",
											"        if (pm.request.url.getQueryString().match(/projection=statistics/)) {",
											"            // console.log(\"checking statistics projection\");",
											"            pm.expect(item).to.have.property('statistics');",
											"            // pm.expect(item.statistics).to.have.all.keys(statisticsKeys);",
											"",
											"        }",
											"",
											"    };",
											"",
											"});",
											"",
											"",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");",
											"// // console.log(\"collection string = \" + collectionMatchString);",
											"// var regex = new RegExp(collectionMatchString);",
											"// let collectionNames = _.map(jsonData, 'name');",
											"// // console.log(collectionNames);",
											"",
											"// pm.test(\"Check that proper Collections are returned\", function () {",
											"//     for (let name of collectionNames){",
											"//         pm.expect(name).to.match(regex);",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );",
											"",
											"//     }",
											" ",
											"// })",
											"",
											"",
											"",
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Asset GET",
					"item": [
						{
							"name": "{asset Id}",
							"item": [
								{
									"name": "metadata",
									"item": [
										{
											"name": "Return the Metadata for an Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"//&& user != \"collectioncreator\"\r",
															"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl3\" && user != \"lvl4\" && user != \"lvl5\") {\r",
															"//     pm.test(\"Status should be 403 for all users except stigmanAdmin(elevated), collectioncreator, or >= level 3\", function () {\r",
															"//         pm.response.to.have.status(403);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"if (user == \"collectioncreator\"){\r",
															"     pm.response.to.have.status(403);\r",
															"     return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for \" + user, function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"\r",
															"// pm.test(\"Check if collection metadata object contains proper metadata\", function () {\r",
															"//     let testMetadataKey = pm.environment.get(\"pocEmail\");\r",
															"//     let testMetadataValue = pm.environment.get(\"pocEmail@email.com\");\r",
															"//     pm.expect(jsonData[testMetadataKey]).to.eql(testMetadataValue);\r",
															"// });\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/metadata",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"metadata"
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Metadata KEYS for an Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (user == \"collectioncreator\"){\r",
															"     pm.response.to.have.status(403);\r",
															"     return;\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Check if asset metadata object contains proper metadata\", function () {\r",
															"    pm.expect(jsonData).to.include(\"testkey\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/metadata/keys",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"metadata",
														"keys"
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Metadata VALUE for an Asset metadata KEY",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (user == \"collectioncreator\"){\r",
															"     pm.response.to.have.status(403);\r",
															"     return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for \" + user, function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('string');\r",
															"});\r",
															"\r",
															"pm.test(\"Check if collection metadata object contains proper metadata\", function () {\r",
															"    pm.expect(jsonData).to.eql(\"testvalue\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/metadata/keys/:key",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"metadata",
														"keys",
														":key"
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														},
														{
															"key": "key",
															"value": "{{testMetadataKey}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}",
											"item": [
												{
													"name": "users",
													"item": []
												}
											]
										},
										{
											"name": "Return an Asset's STIG assignments",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"// else if (user == \"collectioncreator\" ) {\r",
															"//     pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(204);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"    for (let item of jsonData){\r",
															"        // pm.expect(item).to.have.all.keys(stigKeys);\r",
															"        pm.expect(item.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "(Required) A path parameter that indentifies an Asset"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Return an Asset (with StigGrants projection)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//normal test start block:\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user === \"stigmanadmin\" || user === \"lvl3\" || user === \"lvl4\" ) {\r",
													"    pm.test(\"Status should be is 200 \", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(jsonData.name).to.match(regex);\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        pm.expect(jsonData.stigGrants).to.exist;\r",
													"\r",
													"        pm.expect(jsonData.stigGrants).to.be.an(\"array\").of.length.at.least(1)\r",
													"\r",
													"        for (let grant of jsonData.stigGrants){\r",
													"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"            for (let user of grant.users){\r",
													"                // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        pm.expect(jsonData.stigs).to.exist;\r",
													"\r",
													"        pm.expect(jsonData.stigs).to.be.an(\"array\").of.length.at.least(1)\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
													"        pm.expect(jsonData.statusStats).to.exist;\r",
													"\r",
													"            // pm.expect(jsonData.statusStats).to.have.all.keys(statusStatsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return an Asset (with StigGrants projection) - Asset - no assigned STIGs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//normal test start block:\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user === \"stigmanadmin\" || user === \"lvl3\" || user === \"lvl4\" ) {\r",
													"    pm.test(\"Status should be is 200 \", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(jsonData.name).to.match(regex);\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        pm.expect(jsonData.stigGrants).to.exist;\r",
													"\r",
													"        pm.expect(jsonData.stigGrants).to.be.an(\"array\").of.length(0)\r",
													"\r",
													"        for (let grant of jsonData.stigGrants){\r",
													"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"            for (let user of grant.users){\r",
													"                // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        pm.expect(jsonData.stigs).to.exist;\r",
													"\r",
													"        pm.expect(jsonData.stigs).to.be.an(\"array\").of.length(0)\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
													"        pm.expect(jsonData.statusStats).to.exist;\r",
													"\r",
													"            // pm.expect(jsonData.statusStats).to.have.all.keys(statusStatsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset-NoStigs}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return an Asset (without StigGrants projection)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//normal test start block:\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, or bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(jsonData.name).to.match(regex);\r",
													"\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        for (let grant of jsonData.stigGrants){\r",
													"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"            for (let user of grant.users){\r",
													"                // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        pm.expect(jsonData.stigs).to.be.an(\"array\").of.length.at.least(1)\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
													"            pm.expect(jsonData.statusStats).to.exist;\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return an Asset (without StigGrants projection) - Asset - no assigned STIGs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//normal test start block:\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"collectioncreator\") {\r",
													"    pm.test(\"Status should be is 403 for user lvl1, collectioncreator, and bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(jsonData.name).to.match(regex);\r",
													"\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        for (let grant of jsonData.stigGrants){\r",
													"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"            for (let user of grant.users){\r",
													"                // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        pm.expect(jsonData.stigs).to.be.an(\"array\").of.length(0)\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
													"            pm.expect(jsonData.statusStats).to.exist;\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset-NoStigs}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset and STIG JSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\" ) {\r",
													"    pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(204);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"}\r",
													"\r",
													"pm.test(\"Check for an array of checklist items.\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"    // console.log(\"jsonData:\" + jsonData);\r",
													"\r",
													"});\r",
													"\r",
													"let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"\r",
													"pm.test(\"Check for an array of correct length.\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
													"    // console.log(\"jsonData:\" + jsonData);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "format",
													"value": "json",
													"description": "The format of the response. Default if missing is 'json'"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "{{testRev}}",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset and STIG XML (.ckl)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"const xml2js = require('xml2js');\r",
													"\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\" ) {\r",
													"    pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(204);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let cklData;\r",
													"\r",
													" xml2js.parseString(pm.response.text(), function (err, result) {\r",
													"        cklData = result;\r",
													"        // console.log(result);\r",
													"    });\r",
													"\r",
													"\r",
													"let cklHostName = cklData.CHECKLIST.ASSET[0].HOST_NAME[0]\r",
													"let cklIStigs = cklData.CHECKLIST.STIGS[0].iSTIG\r",
													"// let cklSiData = cklData.CHECKLIST.STIGS[0].iSTIG[0].STIG_INFO[0].SI_DATA\r",
													"// console.log(cklSiData);\r",
													"\r",
													"\r",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"\r",
													"pm.test(\"Response has allowed asset\", function () {\r",
													"\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(cklHostName).to.match(regex);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let currentStigId;\r",
													"\r",
													"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length.\", function () {\r",
													"\r",
													"    for (let iStig of cklIStigs){\r",
													"\r",
													"        for (let cklSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
													"            // console.log (cklSiDatum.SID_NAME[0])\r",
													"            if (cklSiDatum.SID_NAME[0] == 'stigid'){\r",
													"                console.log (cklSiDatum.SID_NAME[0])\r",
													"                console.log (cklSiDatum.SID_DATA[0])\r",
													"                currentStigId = cklSiDatum.SID_DATA[0]\r",
													"                pm.expect(currentStigId).to.be.oneOf(validStigs);\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        let cklVulns = iStig.VULN;\r",
													"\r",
													"        pm.expect(cklVulns).to.be.an('array');\r",
													"\r",
													"        // Right now, only VPN_SRG_TEST has a checklist length\r",
													"        if (currentStigId == 'VPN_SRG_TEST') {\r",
													"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"            pm.expect(cklVulns).to.be.an('array').of.length(checklistLength);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=ckl",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "format",
													"value": "ckl",
													"description": "The format of the response. Default if missing is 'json'"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "{{testRev}}",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset and MULTI-STIG XML (.CKL) - specified stigs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"const xml2js = require('xml2js');\r",
													"\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\"  ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if ( user == \"lvl1\" ) {\r",
													"    pm.test(\"Status should be is 400 for user  lvl1\", function () {\r",
													"        pm.response.to.have.status(400);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let cklData;\r",
													"\r",
													" xml2js.parseString(pm.response.text(), function (err, result) {\r",
													"        cklData = result;\r",
													"        // console.log(result);\r",
													"    });\r",
													"\r",
													"\r",
													"let cklHostName = cklData.CHECKLIST.ASSET[0].HOST_NAME[0]\r",
													"let cklIStigs = cklData.CHECKLIST.STIGS[0].iSTIG\r",
													"// let cklSiData = cklData.CHECKLIST.STIGS[0].iSTIG[0].STIG_INFO[0].SI_DATA\r",
													"// console.log(cklSiData);\r",
													"\r",
													"\r",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"\r",
													"pm.test(\"Response has allowed asset\", function () {\r",
													"\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(cklHostName).to.match(regex);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let currentStigId;\r",
													"\r",
													"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length.\", function () {\r",
													"\r",
													"    for (let iStig of cklIStigs){\r",
													"\r",
													"        for (let cklSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
													"            // console.log (cklSiDatum.SID_NAME[0])\r",
													"            if (cklSiDatum.SID_NAME[0] == 'stigid'){\r",
													"                console.log (cklSiDatum.SID_NAME[0])\r",
													"                console.log (cklSiDatum.SID_DATA[0])\r",
													"                currentStigId = cklSiDatum.SID_DATA[0]\r",
													"                pm.expect(currentStigId).to.be.oneOf(validStigs);\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        let cklVulns = iStig.VULN;\r",
													"\r",
													"        pm.expect(cklVulns).to.be.an('array');\r",
													"\r",
													"        // Right now, only VPN_SRG_TEST has a checklist length\r",
													"        if (currentStigId == 'VPN_SRG_TEST') {\r",
													"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"            pm.expect(cklVulns).to.be.an('array').of.length(checklistLength);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/?benchmarkId={{testBenchmark}}&benchmarkId=Windows_10_STIG_TEST",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												""
											],
											"query": [
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}"
												},
												{
													"key": "benchmarkId",
													"value": "Windows_10_STIG_TEST"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset and MULTI-STIG XML (.CKL) - no specified stigs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"const xml2js = require('xml2js');\r",
													"\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let cklData;\r",
													"\r",
													" xml2js.parseString(pm.response.text(), function (err, result) {\r",
													"        cklData = result;\r",
													"        // console.log(result);\r",
													"    });\r",
													"\r",
													"\r",
													"let cklHostName = cklData.CHECKLIST.ASSET[0].HOST_NAME[0]\r",
													"let cklIStigs = cklData.CHECKLIST.STIGS[0].iSTIG\r",
													"// let cklSiData = cklData.CHECKLIST.STIGS[0].iSTIG[0].STIG_INFO[0].SI_DATA\r",
													"// console.log(cklSiData);\r",
													"\r",
													"\r",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"\r",
													"pm.test(\"Response has allowed asset\", function () {\r",
													"\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(cklHostName).to.match(regex);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let currentStigId;\r",
													"\r",
													"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length.\", function () {\r",
													"\r",
													"    for (let iStig of cklIStigs){\r",
													"\r",
													"        for (let cklSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
													"            // console.log (cklSiDatum.SID_NAME[0])\r",
													"            if (cklSiDatum.SID_NAME[0] == 'stigid'){\r",
													"                console.log (cklSiDatum.SID_NAME[0])\r",
													"                console.log (cklSiDatum.SID_DATA[0])\r",
													"                currentStigId = cklSiDatum.SID_DATA[0]\r",
													"                pm.expect(currentStigId).to.be.oneOf(validStigs);\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        let cklVulns = iStig.VULN;\r",
													"\r",
													"        pm.expect(cklVulns).to.be.an('array');\r",
													"\r",
													"        // Right now, only VPN_SRG_TEST has a checklist length\r",
													"        if (currentStigId == 'VPN_SRG_TEST') {\r",
													"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"            pm.expect(cklVulns).to.be.an('array').of.length(checklistLength);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												""
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset and STIG XML (.cklB) - specific STIG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\" ) {\r",
													"    pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(204);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let cklbData = pm.response.json()\r",
													"\r",
													"\r",
													"let cklbHostName = cklbData.target_data.host_name\r",
													"let cklbIStigs = cklbData.stigs\r",
													"// let cklbSiData = cklbData.CHECKLIST.STIGS[0].iSTIG[0].STIG_INFO[0].SI_DATA\r",
													"// console.log(cklbSiData);\r",
													"\r",
													"console.log(cklbHostName)\r",
													"\r",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"\r",
													"pm.test(\"Response has allowed asset\", function () {\r",
													"\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(cklbHostName).to.match(regex);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let currentStigId;\r",
													"\r",
													"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length.\", function () {\r",
													"\r",
													"    for (let iStig of cklbIStigs){\r",
													"\r",
													"        // for (let cklbSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
													"            // console.log (cklbSiDatum.SID_NAME[0])\r",
													"            // if (cklbSiDatum.SID_NAME[0] == 'stigid'){\r",
													"                // console.log (cklbSiDatum.SID_NAME[0])\r",
													"                // console.log (cklbSiDatum.SID_DATA[0])\r",
													"                currentStigId = iStig.stig_id\r",
													"                pm.expect(currentStigId).to.be.oneOf(validStigs);\r",
													"\r",
													"            // }\r",
													"        // }\r",
													"\r",
													"        let cklbVulns = iStig.rules;\r",
													"\r",
													"        pm.expect(cklbVulns).to.be.an('array');\r",
													"\r",
													"        // Right now, only VPN_SRG_TEST has a checklist length\r",
													"        if (currentStigId == 'VPN_SRG_TEST') {\r",
													"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"            pm.expect(cklbVulns).to.be.an('array').of.length(checklistLength);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=cklb",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "format",
													"value": "cklb",
													"description": "The format of the response. Default if missing is 'json'"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "{{testRev}}",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset and MULTI-STIG JSON (.cklB) - no specified STIG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let cklbData = pm.response.json()\r",
													"\r",
													"\r",
													"let cklbHostName = cklbData.target_data.host_name\r",
													"let cklbIStigs = cklbData.stigs\r",
													"// let cklbSiData = cklbData.CHECKLIST.STIGS[0].iSTIG[0].STIG_INFO[0].SI_DATA\r",
													"// console.log(cklbSiData);\r",
													"\r",
													"console.log(cklbHostName)\r",
													"\r",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"\r",
													"pm.test(\"Response has allowed asset\", function () {\r",
													"\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(cklbHostName).to.match(regex);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let currentStigId;\r",
													"\r",
													"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length.\", function () {\r",
													"\r",
													"    for (let iStig of cklbIStigs){\r",
													"\r",
													"        // for (let cklbSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
													"            // console.log (cklbSiDatum.SID_NAME[0])\r",
													"            // if (cklbSiDatum.SID_NAME[0] == 'stigid'){\r",
													"                // console.log (cklbSiDatum.SID_NAME[0])\r",
													"                // console.log (cklbSiDatum.SID_DATA[0])\r",
													"                currentStigId = iStig.stig_id\r",
													"                pm.expect(currentStigId).to.be.oneOf(validStigs);\r",
													"\r",
													"            // }\r",
													"        // }\r",
													"\r",
													"        let cklbVulns = iStig.rules;\r",
													"\r",
													"        pm.expect(cklbVulns).to.be.an('array');\r",
													"\r",
													"        // Right now, only VPN_SRG_TEST has a checklist length\r",
													"        if (currentStigId == 'VPN_SRG_TEST') {\r",
													"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"            pm.expect(cklbVulns).to.be.an('array').of.length(checklistLength);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists?format=cklb",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists"
											],
											"query": [
												{
													"key": "format",
													"value": "cklb"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset and MULTI-STIG JSON (.cklB) - specific STIGs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\"  ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if ( user == \"lvl1\" ) {\r",
													"    pm.test(\"Status should be is 400 for user  lvl1\", function () {\r",
													"        pm.response.to.have.status(400);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let cklbData = pm.response.json()\r",
													"\r",
													"\r",
													"let cklbHostName = cklbData.target_data.host_name\r",
													"let cklbIStigs = cklbData.stigs\r",
													"\r",
													"console.log(cklbHostName)\r",
													"\r",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"\r",
													"pm.test(\"Response has allowed asset\", function () {\r",
													"\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(cklbHostName).to.match(regex);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let currentStigId;\r",
													"\r",
													"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length.\", function () {\r",
													"\r",
													"    for (let iStig of cklbIStigs){\r",
													"\r",
													"        // for (let cklbSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
													"            // console.log (cklbSiDatum.SID_NAME[0])\r",
													"            // if (cklbSiDatum.SID_NAME[0] == 'stigid'){\r",
													"                // console.log (cklbSiDatum.SID_NAME[0])\r",
													"                // console.log (cklbSiDatum.SID_DATA[0])\r",
													"                currentStigId = iStig.stig_id\r",
													"                pm.expect(currentStigId).to.be.oneOf(validStigs);\r",
													"\r",
													"            // }\r",
													"        // }\r",
													"\r",
													"        let cklbVulns = iStig.rules;\r",
													"\r",
													"        pm.expect(cklbVulns).to.be.an('array');\r",
													"\r",
													"        // Right now, only VPN_SRG_TEST has a checklist length\r",
													"        if (currentStigId == 'VPN_SRG_TEST') {\r",
													"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"            pm.expect(cklbVulns).to.be.an('array').of.length(checklistLength);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists?format=cklb&benchmarkId={{testBenchmark}}&benchmarkId=Windows_10_STIG_TEST",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists"
											],
											"query": [
												{
													"key": "format",
													"value": "cklb"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}"
												},
												{
													"key": "benchmarkId",
													"value": "Windows_10_STIG_TEST"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset with benchmark query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"const xml2js = require('xml2js');\r",
													"\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let cklData;\r",
													"\r",
													" xml2js.parseString(pm.response.text(), function (err, result) {\r",
													"        cklData = result;\r",
													"        // console.log(result);\r",
													"    });\r",
													"\r",
													"\r",
													"let cklHostName = cklData.CHECKLIST.ASSET[0].HOST_NAME[0]\r",
													"let cklIStigs = cklData.CHECKLIST.STIGS[0].iSTIG\r",
													"// let cklSiData = cklData.CHECKLIST.STIGS[0].iSTIG[0].STIG_INFO[0].SI_DATA\r",
													"// console.log(cklSiData);\r",
													"\r",
													"\r",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"\r",
													"pm.test(\"Response has allowed asset\", function () {\r",
													"\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(cklHostName).to.match(regex);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
													"let currentStigId;\r",
													"\r",
													"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length.\", function () {\r",
													"\r",
													"    for (let iStig of cklIStigs){\r",
													"\r",
													"        for (let cklSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
													"            // console.log (cklSiDatum.SID_NAME[0])\r",
													"            if (cklSiDatum.SID_NAME[0] == 'stigid'){\r",
													"                console.log (cklSiDatum.SID_NAME[0])\r",
													"                console.log (cklSiDatum.SID_DATA[0])\r",
													"                currentStigId = cklSiDatum.SID_DATA[0]\r",
													"                pm.expect(currentStigId).to.be.eql(testBenchmark);\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        let cklVulns = iStig.VULN;\r",
													"\r",
													"        pm.expect(cklVulns).to.be.an('array');\r",
													"\r",
													"        // Right now, only VPN_SRG_TEST has a checklist length\r",
													"        if (currentStigId == 'VPN_SRG_TEST') {\r",
													"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"            pm.expect(cklVulns).to.be.an('array').of.length(checklistLength);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists?benchmarkId={{testBenchmark}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists"
											],
											"query": [
												{
													"key": "format",
													"value": "ckl",
													"description": "The format of the response. Default if missing is 'json'",
													"disabled": true
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Assets accessible to the requester (with STIG grants projection)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"lvl2\" || user == \"globular\") {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, Lvl1, or bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let returnedAssetIds=[];\r",
											"\r",
											"pm.test(\"assets have expected properties and values\", function () {\r",
											"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    for (let asset of jsonData){\r",
											"\r",
											"        // pm.expect(asset).to.have.all.keys(assetKeys);\r",
											"        pm.expect(asset.name).to.match(regex);\r",
											"        returnedAssetIds.push(asset.assetId);\r",
											"        // pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
											"\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
											"            pm.expect(asset.statusStats).to.exist;\r",
											"                if (asset.assetId == testAsset) {\r",
											"                    console.log (\"testing testAsset\")\r",
											"                    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"                        console.log (\"testing ruleCount for testBenchmark for asset\")\r",
											"                        pm.expect(asset.statusStats.ruleCount).to.eql(81);\r",
											"                    }\r",
											"                    else{\r",
											"                        console.log (\"testing ruleCount for all stigs for asset\")\r",
											"                        pm.expect(asset.statusStats.ruleCount).to.eql(368);\r",
											"\r",
											"                    }\r",
											"                }\r",
											"            }       \r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"            for (let stig of asset.stigs){\r",
											"                // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            }\r",
											"        }\r",
											"\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"        for (let grant of asset.stigGrants){\r",
											"            // pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"            for (let user of grant.users){\r",
											"                // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"\r",
											"        for (let stig of asset.stigs){\r",
											"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"        }\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"        // if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        //     for (let grant of asset.stigGrants){\r",
											"        //         pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"        //         for (let user of grant.users){\r",
											"        //             pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"        //         }\r",
											"        //     }\r",
											"        // }\r",
											"\r",
											"    };\r",
											"\r",
											"});\r",
											"\r",
											"// let Asset_NoStigs = pm.environment.get(\"testAsset-NoStigs\");\r",
											"// console.log(returnedAssetIds)\r",
											"// console.log(Asset_NoStigs)\r",
											"\r",
											"// if (user != \"lvl1\") {\r",
											"//     pm.test(\"check for asset with no assigned stig (edge case)\", function () {\r",
											"//         pm.expect(returnedAssetIds).to.include(Asset_NoStigs);\r",
											"\r",
											"//     });\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&benchmarkId={{testBenchmark}}&projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Assets accessible to the requester (with STIG grants projection - no benchmark specified)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"lvl2\" || user == \"globular\") {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, Lvl1, or bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let returnedAssetIds=[];\r",
											"\r",
											"pm.test(\"assets have expected properties and values\", function () {\r",
											"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    for (let asset of jsonData){\r",
											"\r",
											"        // pm.expect(asset).to.have.all.keys(assetKeys);\r",
											"        pm.expect(asset.name).to.match(regex);\r",
											"        returnedAssetIds.push(asset.assetId);\r",
											"        // pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
											"\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
											"            pm.expect(asset.statusStats).to.exist;\r",
											"                if (asset.assetId == testAsset) {\r",
											"                    console.log (\"testing testAsset\")\r",
											"                    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"                        console.log (\"testing ruleCount for testBenchmark for asset\")\r",
											"                        pm.expect(asset.statusStats.ruleCount).to.eql(81);\r",
											"                    }\r",
											"                    else{\r",
											"                        console.log (\"testing ruleCount for all stigs for asset\")\r",
											"                        pm.expect(asset.statusStats.ruleCount).to.eql(368);\r",
											"\r",
											"                    }\r",
											"                }\r",
											"            }       \r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"            for (let stig of asset.stigs){\r",
											"                // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            }\r",
											"        }\r",
											"\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"        for (let grant of asset.stigGrants){\r",
											"            // pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"            for (let user of grant.users){\r",
											"                // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"\r",
											"        for (let stig of asset.stigs){\r",
											"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"        }\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"        // if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        //     for (let grant of asset.stigGrants){\r",
											"        //         pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"        //         for (let user of grant.users){\r",
											"        //             pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"        //         }\r",
											"        //     }\r",
											"        // }\r",
											"\r",
											"    };\r",
											"\r",
											"});\r",
											"\r",
											"// let Asset_NoStigs = pm.environment.get(\"testAsset-NoStigs\");\r",
											"// console.log(returnedAssetIds)\r",
											"// console.log(Asset_NoStigs)\r",
											"\r",
											"// if (user != \"lvl1\") {\r",
											"//     pm.test(\"check for asset with no assigned stig (edge case)\", function () {\r",
											"//         pm.expect(returnedAssetIds).to.include(Asset_NoStigs);\r",
											"\r",
											"//     });\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG",
											"disabled": true
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Assets accessible to the requester - No StigGrants (for lvl1 user success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\") {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, Lvl1, or bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"let returnedAssetIds=[];\r",
											"\r",
											"pm.test(\"assets have expected properties and values\", function () {\r",
											"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    for (let asset of jsonData){\r",
											"\r",
											"        // pm.expect(asset).to.have.all.keys(assetKeys);\r",
											"        pm.expect(asset.name).to.match(regex);\r",
											"        returnedAssetIds.push(asset.assetId);\r",
											"        // pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
											"\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
											"            pm.expect(asset.statusStats).to.exist;\r",
											"        }\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"            for (let stig of asset.stigs){\r",
											"                // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            }\r",
											"        }\r",
											"\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"        for (let grant of asset.stigGrants){\r",
											"            // pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"            for (let user of grant.users){\r",
											"                // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"\r",
											"        for (let stig of asset.stigs){\r",
											"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"        }\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"        // if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        //     for (let grant of asset.stigGrants){\r",
											"        //         pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"        //         for (let user of grant.users){\r",
											"        //             pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"        //         }\r",
											"        //     }\r",
											"        // }\r",
											"\r",
											"    };\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// let Asset_NoStigs = pm.environment.get(\"testAsset-NoStigs\");\r",
											"// console.log(returnedAssetIds)\r",
											"// console.log(Asset_NoStigs)\r",
											"\r",
											"// if (user != \"lvl1\") {\r",
											"//     pm.test(\"check for asset with no assigned stig (edge case)\", function () {\r",
											"//         pm.expect(returnedAssetIds).to.include(Asset_NoStigs);\r",
											"\r",
											"//     });\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&benchmarkId={{testBenchmark}}&projection=statusStats&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Assets accessible to the requester - No filters or StigGrants (for lvl1 user success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\") {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, Lvl1, or bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"let returnedAssetIds=[];\r",
											"let Asset_NoStigs = pm.environment.get(\"testAsset-NoStigs\");\r",
											"\r",
											"pm.test(\"assets have expected properties and values\", function () {\r",
											"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    for (let asset of jsonData){\r",
											"\r",
											"        // pm.expect(asset).to.have.all.keys(assetKeys);\r",
											"        pm.expect(asset.name).to.match(regex);\r",
											"        returnedAssetIds.push(asset.assetId);\r",
											"        // pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
											"\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
											"            pm.expect(asset.statusStats).to.exist;\r",
											"        }\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"            for (let stig of asset.stigs){\r",
											"                // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            }\r",
											"        }\r",
											"\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"        for (let grant of asset.stigGrants){\r",
											"            // pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"            for (let user of grant.users){\r",
											"                // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"\r",
											"        if(asset.assetId == Asset_NoStigs) {\r",
											"            pm.expect(asset.stigs).to.be.an(\"array\").of.length(0)\r",
											"        }\r",
											"        else{\r",
											"            pm.expect(asset.stigs).to.be.an(\"array\").of.length.at.least(1)\r",
											"        }\r",
											"\r",
											"        for (let stig of asset.stigs){\r",
											"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"        }\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"        // if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        //     for (let grant of asset.stigGrants){\r",
											"        //         pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"        //         for (let user of grant.users){\r",
											"        //             pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"        //         }\r",
											"        //     }\r",
											"        // }\r",
											"\r",
											"    };\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"console.log(returnedAssetIds)\r",
											"console.log(Asset_NoStigs)\r",
											"\r",
											"if (user == \"lvl1\") {\r",
											"    pm.test(\"check for asset with no assigned stig (edge case, lvl1 should not get this asset)\", function () {\r",
											"        pm.expect(returnedAssetIds).to.not.include(Asset_NoStigs);\r",
											"\r",
											"    });\r",
											"}\r",
											"else{  \r",
											"    pm.test(\"check for asset with no assigned stig (edge case)\", function () {\r",
											"        pm.expect(returnedAssetIds).to.include(Asset_NoStigs);\r",
											"\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&projection=statusStats&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG",
											"disabled": true
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Assets accessible to the requester - labels",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\") {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, Lvl1, or bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    if (user == \"lvl1\" ) {\r",
											"        pm.expect(jsonData.length).to.equal(1);\r",
											"    }\r",
											"    else{\r",
											"        pm.expect(jsonData.length).to.equal(2);\r",
											"\r",
											"    }    \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&labelId={{testLabel}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG",
											"disabled": true
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"disabled": true
										},
										{
											"key": "labelId",
											"value": "{{testLabel}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews GET",
					"item": [
						{
							"name": "reviews",
							"item": [
								{
									"name": "{asset Id}",
									"item": [
										{
											"name": "{rule Id}",
											"item": [
												{
													"name": "Return the Review for an Asset and Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
																	"    pm.expect(jsonData.stigs).to.exist;\r",
																	"}\r",
																	"if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
																	"    pm.expect(jsonData.history).to.exist;\r",
																	"}\r",
																	"if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
																	"    pm.expect(jsonData.rule).to.exist;\r",
																	"}\r",
																	"if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
																	"    pm.expect(jsonData.metadata).to.exist;\r",
																	"}\r",
																	"pm.test(\"Check if object contains all provided keys\", function () {\r",
																	"    // pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check if object contains proper ruleId\", function () {\r",
																	"    let testRuleId = pm.environment.get(\"testRuleId\");\r",
																	"    pm.expect(jsonData.ruleId).to.eql(testRuleId);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check review comment for regex match string\", function () {\r",
																	"    let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
																	"    var regex = new RegExp(reviewMatchString);\r",
																	"    pm.expect(jsonData.detail).to.match(regex);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=history&projection=stigs&projection=rule&projection=metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "history"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																},
																{
																	"key": "projection",
																	"value": "rule"
																},
																{
																	"key": "projection",
																	"value": "metadata"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return the Review Metadata for an Asset and Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check if review metadata object contains proper metadata\", function () {\r",
																	"    let testMetadataKey = pm.environment.get(\"testMetadataKey\");\r",
																	"    let testMetadataValue = pm.environment.get(\"testMetadataValue\");\r",
																	"    pm.expect(jsonData[testMetadataKey]).to.eql(testMetadataValue);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Check review comment for regex match string\", function () {\r",
																	"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
																	"//     var regex = new RegExp(reviewMatchString);\r",
																	"//     pm.expect(jsonData.detail).to.match(regex);\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return the Review Metadata KEYS for an Asset and Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check if review metadata object contains proper metadata\", function () {\r",
																	"    let testMetadataKey = pm.environment.get(\"testMetadataKey\");\r",
																	"    pm.expect(jsonData).to.include(testMetadataKey);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Check review comment for regex match string\", function () {\r",
																	"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
																	"//     var regex = new RegExp(reviewMatchString);\r",
																	"//     pm.expect(jsonData.detail).to.match(regex);\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata/keys",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata",
																"keys"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return the Review Metadata VALUE for an Asset/Rule/metadata KEY",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('string');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check if review metadata object contains proper metadata\", function () {\r",
																	"    let testMetadataValue = pm.environment.get(\"testMetadataValue\");\r",
																	"    pm.expect(jsonData).to.eql(testMetadataValue);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Check review comment for regex match string\", function () {\r",
																	"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
																	"//     var regex = new RegExp(reviewMatchString);\r",
																	"//     pm.expect(jsonData.detail).to.match(regex);\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata/keys/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata",
																"keys",
																":key"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																},
																{
																	"key": "key",
																	"value": "{{testMetadataKey}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Reviews by Asset; Parameter variations",
											"item": [
												{
													"name": "Return a list of Reviews for an Asset",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset RESULT Fail",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?result=fail&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "fail"
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset RESULT pass",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?result=pass&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass"
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset STATUS saved",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?status=saved&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "saved"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset STATUS submitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?status=submitted&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "submitted"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset BENCHMARK",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?benchmarkId={{testBenchmark}}&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "submitted",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "A query parameter that indentifies a STIG"
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset BENCHMARK - metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=rule&projection=stigs&projection=metadata&metadata={{testMetadataKey}}%3A{{testMetadataValue}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "submitted",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "metadata"
																},
																{
																	"key": "metadata",
																	"value": "{{testMetadataKey}}%3A{{testMetadataValue}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.test(\"Response JSON is an array\", function () {",
															"    pm.expect(jsonData).to.be.an('array').of.length.greaterThan(0)",
															"});",
															"",
															"",
															"",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"",
															"pm.test(\"Check if each object contains expected keys/values\", function () {",
															"    for (let review of jsonData){",
															"        // pm.expect(review).to.have.all.keys(reviewKeys);",
															"        pm.expect(review.assetId).to.equal(testAsset);",
															"",
															"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
															"            pm.expect(review.stigs).to.exist;",
															"        }",
															"        if (pm.request.url.getQueryString().match(/projection=rule/)) {",
															"            pm.expect(review.rule).to.exist;",
															"        }",
															"        if (pm.request.url.getQueryString().match(/projection=metadata/)) {",
															"            pm.expect(review.metadata).to.exist;",
															"        }",
															"",
															"        let reviewMatchString = pm.environment.get(\"reviewMatchString\");",
															"        let regex = new RegExp(reviewMatchString);",
															"        pm.expect(review.detail).to.match(regex);",
															"",
															"        if (pm.request.url.getQueryString().match(/result=/)) {",
															"            let param = pm.request.url.getQueryString().match(/result=([^&]+)&/)[1];",
															"            pm.expect(review.result).to.equal(param);",
															"        }",
															"        if (pm.request.url.getQueryString().match(/status=/)) {",
															"            let param = pm.request.url.getQueryString().match(/status=([^&]+)&/)[1];",
															"            pm.expect(review.status.label).to.equal(param);",
															"        }    ",
															"        if (pm.request.url.getQueryString().match(/ruleId=/)) {",
															"            let param = pm.request.url.getQueryString().match(/ruleId=([^&]+)&/)[1];",
															"            pm.expect(review.ruleId).to.equal(param);",
															"        }    ",
															"        if (pm.request.url.getQueryString().match(/groupId=/)) {",
															"            let param = pm.request.url.getQueryString().match(/groupId=([^&]+)&/)[1];",
															"            pm.expect(review.groupId).to.equal(param);",
															"        }    ",
															"        if (pm.request.url.getQueryString().match(/cci=/)) {",
															"            let param = pm.request.url.getQueryString().match(/cci=([^&]+)&/)[1];",
															"            pm.expect(review.cci).to.equal(param);",
															"        }    ",
															"        if (pm.request.url.getQueryString().match(/userId=/)) {",
															"            let param = pm.request.url.getQueryString().match(/userId=([^&]+)&/)[1];",
															"            pm.expect(review.userId).to.equal(param);",
															"        }    ",
															"        if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"            let param = pm.request.url.getQueryString().match(/assetId=([^&]+)&/)[1];",
															"            pm.expect(review.assetId).to.equal(param);",
															"        }        ",
															"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"            let param = pm.request.url.getQueryString().match(/benchmarkId=([^&]+)&/)[1];",
															"            pm.expect(review.stigs[0].benchmarkId).to.equal(param);",
															"        }    ",
															"    }",
															"})",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														]
													}
												}
											]
										}
									]
								},
								{
									"name": "Reviews; Parameter Variations",
									"item": [
										{
											"name": "Return a list of Reviews accessible to the requester",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester RESULT fail",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=fail&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail"
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester STATUS saved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?status=saved&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved"
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester RULEID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?ruleId={{testRuleId}}&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule"
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester USERID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?userId={{testUserId}}&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User"
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester ASSETID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?assetId={{testAsset}}&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset"
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester BENCHMARKID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?benchmarkId={{testBenchmark}}&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG"
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester - metadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?projection=rule&projection=stigs&metadata={{testMetadataKey}}%3A{{testMetadataValue}}&projection=metadata",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "metadata",
															"value": "{{testMetadataKey}}%3A{{testMetadataValue}}"
														},
														{
															"key": "projection",
															"value": "metadata"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let user = pm.environment.get(\"user\");",
													"console.log(\"user: \" + user);",
													"",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
													"    user = \"elevated\";",
													"    console.log(\"setting user to 'elevated'\");",
													"}",
													"",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
													"        pm.response.to.have.status(403);",
													"    });",
													"    return;",
													"}",
													"else {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"if (pm.response.code !== 200) {",
													"    return;",
													"}",
													"",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Response JSON is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array').of.length.greaterThan(0)",
													"});",
													"",
													"",
													"",
													"let reviewMatchString = pm.environment.get(\"reviewMatchString\");",
													"let reviewRegex = new RegExp(reviewMatchString);",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");",
													"let assetRegex = new RegExp(assetMatchString);",
													"",
													"pm.test(\"Check if each object contains expected keys/values\", function () {",
													"",
													"    for (let review of jsonData){",
													"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
													"            pm.expect(review.stigs).to.exist;",
													"        }",
													"        if (pm.request.url.getQueryString().match(/projection=rule/)) {",
													"            pm.expect(review.rule).to.exist;",
													"        }",
													"        if (pm.request.url.getQueryString().match(/projection=metadata/)) {",
													"            pm.expect(review.metadata).to.exist;",
													"        }",
													"        pm.expect(review.detail).to.match(reviewRegex);",
													"        ",
													"        pm.expect(review.assetName).to.match(assetRegex);",
													"",
													"        if (pm.request.url.getQueryString().match(/result=/)) {",
													"            let param = pm.request.url.getQueryString().match(/result=([^&]+)&/)[1];",
													"            pm.expect(review.result).to.equal(param);",
													"        }",
													"        if (pm.request.url.getQueryString().match(/action=/)) {",
													"            let param = pm.request.url.getQueryString().match(/action=([^&]+)&/)[1];",
													"            pm.expect(review.action).to.equal(param);",
													"        }",
													"        if (pm.request.url.getQueryString().match(/status=/)) {",
													"            let param = pm.request.url.getQueryString().match(/status=([^&]+)&/)[1];",
													"            pm.expect(review.status.label).to.equal(param);",
													"        }    ",
													"        if (pm.request.url.getQueryString().match(/ruleId=/)) {",
													"            let param = pm.request.url.getQueryString().match(/ruleId=([^&]+)&/)[1];",
													"            pm.expect(review.ruleId).to.equal(param);",
													"        }    ",
													"        if (pm.request.url.getQueryString().match(/groupId=/)) {",
													"            let param = pm.request.url.getQueryString().match(/groupId=([^&]+)&/)[1];",
													"            pm.expect(review.rule.groupId).to.equal(param);",
													"        }    ",
													"        if (pm.request.url.getQueryString().match(/cci=/)) {",
													"            let param = pm.request.url.getQueryString().match(/cci=([^&]+)&/)[1];",
													"            pm.expect(review.cci).to.equal(param);",
													"        }    ",
													"        if (pm.request.url.getQueryString().match(/userId=/)) {",
													"            let param = pm.request.url.getQueryString().match(/userId=([^&]+)&/)[1];",
													"            pm.expect(review.userId).to.equal(param);",
													"        }    ",
													"        if (pm.request.url.getQueryString().match(/assetId=/)) {",
													"            let param = pm.request.url.getQueryString().match(/assetId=([^&]+)&/)[1];",
													"            pm.expect(review.assetId).to.equal(param);",
													"        }        ",
													"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
													"            let param = pm.request.url.getQueryString().match(/benchmarkId=([^&]+)&/)[1];",
													"            pm.expect(review.stigs[0].benchmarkId).to.equal(param);",
													"        }    ",
													"    }",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "users GET",
					"item": [
						{
							"name": "{user Id}",
							"item": [
								{
									"name": "Return a User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user != \"elevated\") { //placeholder for \"users\" that should fail. this endpoint is \"elevated\" only\r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"// // START AZDO #151\r",
													"// let userKeys = [\r",
													"//     \"userId\",\r",
													"//     \"username\",\r",
													"//     // \"display\",\r",
													"//     // \"email\",\r",
													"//     // \"metadata\",\r",
													"//     // \"privileges\",\r",
													"//     \"collectionGrants\",\r",
													"//     \"statistics\"\r",
													"// ]\r",
													"// // END AZDO #151\r",
													"\r",
													"// let collectionGrantKeys = [\r",
													"//     \"collection\",\r",
													"//     \"accessLevel\",\r",
													"//     // \"userId\",\r",
													"//     // \"username\"\r",
													"// ]\r",
													"// let collectionKeys = [\r",
													"//     \"name\",\r",
													"//     \"collectionId\",\r",
													"//     // \"userId\",\r",
													"//     // \"username\"\r",
													"// ]\r",
													"// let statisticsKeys = [\r",
													"//     \"created\",\r",
													"//     \"lastAccess\",\r",
													"//     \"collectionGrantCount\",\r",
													"//     \"lastClaims\"\r",
													"// ]\r",
													"// let privilegesKeys = [\r",
													"//     \"canAdmin\",\r",
													"//     \"canCreateCollection\"\r",
													"// ]\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains proper projections\", function () {\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=collectionGrants/)) {\r",
													"        pm.expect(jsonData.collectionGrants).to.exist;\r",
													"        for (let grant of jsonData.collectionGrants){\r",
													"            // pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"            // pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"        }    \r",
													"    }\r",
													"});\r",
													"\r",
													"// START AZDO #151\r",
													"// pm.test(\"Check if object contains all required privileges keys\", function () {\r",
													"//     pm.expect(jsonData.privileges).to.have.all.keys(privilegesKeys);\r",
													"// });\r",
													"// END AZDO #151\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.exist;\r",
													"});\r",
													"\r",
													"let testUserId = pm.environment.get(\"testUserId\");\r",
													"\r",
													"pm.test(\"Check if object contains info for expected user\", function () {\r",
													"    pm.expect(jsonData.userId).to.equal(testUserId);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "privileges",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statistics"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{testUserId}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Return a list of Users accessible to the requester",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for users not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if each object contains expected keys/values\", function () {\r",
											"\r",
											"    for (let user of jsonData){\r",
											"        pm.test(\"Check if object contains all required keys\", function () {\r",
											"            // pm.expect(user).to.have.all.keys(userKeys);\r",
											"        });\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/username=/)) {\r",
											"            let testUser = pm.environment.get(\"testUser\");\r",
											"            pm.test(\"Check if object contains info for expected user\", function () {\r",
											"                pm.expect(user.username).to.equal(testUser);\r",
											"            });\r",
											"        }\r",
											"        \r",
											"        for (let grant of user.collectionGrants){\r",
											"            // pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
											"            // pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
											"        }\r",
											"\r",
											"        // START AZDO #151\r",
											"        // pm.test(\"Check if object contains all required privileges keys\", function () {\r",
											"        //     pm.expect(user.privileges).to.have.all.keys(privilegesKeys);\r",
											"        // });\r",
											"        // END AZDO #151\r",
											"\r",
											"        pm.test(\"Check if object contains all required statistics keys\", function () {\r",
											"            pm.expect(user.statistics).to.exist;\r",
											"        });\r",
											"\r",
											"\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of Users accessible to the requester - NO PROJECTIONS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of Users accessible to the requester USERNAME",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for users not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if each object contains expected keys/values\", function () {\r",
											"\r",
											"    for (let user of jsonData){\r",
											"        pm.test(\"Check if object contains all required keys\", function () {\r",
											"            // pm.expect(user).to.have.all.keys(userKeys);\r",
											"        });\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/username=/)) {\r",
											"            let testUser = pm.environment.get(\"testUser\");\r",
											"            pm.test(\"Check if object contains info for expected user\", function () {\r",
											"                pm.expect(user.username).to.equal(testUser);\r",
											"            });\r",
											"        }\r",
											"        \r",
											"        for (let grant of user.collectionGrants){\r",
											"            pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
											"            pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
											"        }\r",
											"\r",
											"        pm.test(\"Check if object contains all required statistics keys\", function () {\r",
											"            pm.expect(user.statistics).to.exist;\r",
											"        });\r",
											"\r",
											"\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&username={{testUser}}&projection=collectionGrants&projection=statistics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username"
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of Users accessible to the requester USERNAME - NO PROJECTIONS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&username={{testUser}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username"
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "op GET",
					"item": [
						{
							"name": "appdata",
							"item": [
								{
									"name": "Export application data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user != \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for users not elevated\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate={{elevated}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "elevate",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "metrics GET",
					"item": [
						{
							"name": "{collectionId}",
							"item": [
								{
									"name": "summary",
									"item": [
										{
											"name": "asset agg",
											"item": [
												{
													"name": "Return summary metrics - assset agg",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/asset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"asset"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - asset agg - benchmark param",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/asset?benchmarkId={{testBenchmark}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"asset"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - asset agg - with param assetId",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/asset?assetId={{testAsset}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"asset"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - asset agg - with param labelId",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/asset?labelId={{testLabel}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"asset"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - asset agg - with params labelName",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/asset?labelName={{testLabelName-lvl1}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"asset"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"",
															"let jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Response JSON is an array\", function () {",
															"    pm.expect(jsonData).to.be.an('array');",
															"});",
															"",
															"",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");",
															"let testLabel = pm.environment.get(\"testLabel\");",
															"let testLabelName = pm.environment.get(\"testLabelName\");",
															"",
															"",
															"//reference metrics",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));",
															"let testTotalAssessmentsForTestAsset = 368;",
															"",
															"if (user == \"lvl1\" ) {",
															"    testTotalAssessmentsForTestAsset = testChecklistLength;",
															"",
															"}",
															"",
															"",
															"    let metricsReferenceCommon = {",
															"        assessed: 9,",
															"        assessments: testChecklistLength,",
															"        maxTs: \"2022-02-03T00:07:05Z\",",
															"        minTs: \"2020-08-11T22:27:26Z\",",
															"        results: {",
															"            fail: {",
															"                total: 4,",
															"                resultEngine: 0",
															"            },",
															"            pass: {",
															"                total: 4,",
															"                resultEngine: 0",
															"            },",
															"            error: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            fixed: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            unknown: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notchecked: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notselected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            informational: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notapplicable: {",
															"                total: 1,",
															"                resultEngine: 0",
															"            }",
															"        },",
															"        findings: {",
															"            low: 1,",
															"            medium: 3,",
															"            high: 0",
															"        },    ",
															"        statuses: {",
															"            saved: {",
															"                total: 2,",
															"                resultEngine: 0",
															"            },",
															"            accepted: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            rejected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            submitted: {",
															"                total: 7,",
															"                resultEngine: 0",
															"            }",
															"        }\t ",
															"    }",
															"",
															"",
															"",
															"",
															"// Checking that response fulfills parameter requests",
															"for (let item of jsonData){",
															"    console.log( \"testing: \" + item.name) ",
															"    ",
															"    //are we aggregating",
															"    let checkMetricsData = false",
															"    console.log( \"asset agg \") ",
															"    if (item.assetId ==  testAsset) {",
															"        checkMetricsData = true",
															"    }",
															"    ",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"        metricsReferenceCommon.assessments = testChecklistLength            ",
															"",
															"        ",
															"",
															"    }",
															"    else {",
															"        metricsReferenceCommon.assessments = testTotalAssessmentsForTestAsset            ",
															"",
															"    }",
															"",
															"    let assetMatchString = pm.environment.get(\"assetMatchString\");",
															"    var regex = new RegExp(assetMatchString);",
															"    pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {",
															"        pm.expect(item.name).to.match(regex);",
															"    });",
															"",
															"    // pm.test(\"verify parameter restricted response properly - benchmark\", function () {",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - benchmark\", function () {",
															"",
															"            pm.expect(item.benchmarkIds).to.include(testBenchmark);",
															"            if (user == \"lvl1\" ) {",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"            //   metricsReferenceCommon.findings.low = 2",
															"            //   metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"             }",
															"            else {",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"            //   metricsReferenceCommon.findings.low = 2",
															"            //   metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"",
															"                ",
															"            }                  ",
															"          })",
															"",
															"        }",
															"        // else if (checkMetricsData == true){",
															"        //     pm.expect(item.benchmarkIds).to.include(testBenchmark);",
															"        // }",
															"",
															"",
															"",
															"    else if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - assetId\", function () {",
															"            pm.expect(item.assetId).to.eql(testAsset);",
															"        })",
															"            if (user == \"lvl1\" ) {",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"            //   metricsReferenceCommon.findings.low = 2",
															"            //   metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"             }        ",
															"    }   ",
															"",
															"    else if (pm.request.url.getQueryString().match(/labelId=/) || pm.request.url.getQueryString().match(/labelName=/)) {",
															"        pm.test(\"verify parameter restricted response properly - labelId or labelname\", function () {",
															"            let responseLabels = [];",
															"            for (let label of item.labels) {",
															"                responseLabels.push(label.labelId)",
															"            }",
															"            pm.expect(responseLabels).to.include(testLabel);",
															"        })",
															"            if (user == \"lvl1\" ) {",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"            //   metricsReferenceCommon.findings.low = 2",
															"            //   metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"             }        ",
															"    }           ",
															"    else {",
															"            if (user == \"lvl1\" ) {",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"            //   metricsReferenceCommon.findings.low = 2",
															"            //   metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"             }",
															"",
															"    }",
															"",
															"    // if (pm.request.url.getQueryString().match(/labelName=/)) {",
															"    //     pm.test(\"verify parameter restricted response properly - labelName\", function () {",
															"    //         let responseLabels = [];",
															"    //         for (let label of item.labels) {",
															"    //             responseLabels.push(label.name)",
															"    //         }",
															"    //         pm.expect(responseLabels).to.include(testLabelName);",
															"    //     })",
															"    // }              ",
															"    ",
															"    metricsReferenceCommon.results.unassessed = {",
															"        total:  metricsReferenceCommon.results.informational.total + ",
															"                metricsReferenceCommon.results.notselected.total + ",
															"                metricsReferenceCommon.results.notchecked.total + ",
															"                metricsReferenceCommon.results.error.total + ",
															"                metricsReferenceCommon.results.fixed.total",
															"    }",
															"",
															"    if (pm.request.url.getPath().match(/summary/)) {",
															"        console.log(\"checking summary metrics - checkflag: \" + checkMetricsData )",
															"        // if (item.assetId ==  testAsset){",
															"        if (checkMetricsData ==  true){",
															"            console.log(\"checking metrics data\")        // if (item.benchmarkId == testBenchmark) {",
															"            // if (item.assetId ==  testAsset ) {",
															"            console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - unassessed\", function () {",
															"                pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"    // }",
															"    }",
															"",
															"//Checking that metric details are correct",
															"    if (pm.request.url.getPath().match(/detail/)) {",
															"        if (checkMetricsData ==  true){",
															"            // if (item.assetId ==  testAsset ) {",
															"            console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - informational\", function () {",
															"                pm.expect(item.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notchecked\", function () {",
															"                pm.expect(item.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notselected\", function () {",
															"                pm.expect(item.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - error\", function () {",
															"                pm.expect(item.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);",
															"            });    ",
															"            pm.test(\"Check some stats - results - fixed\", function () {",
															"                pm.expect(item.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);",
															"            });                 ",
															"",
															"            // pm.test(\"Check some stats - results - unassessed\", function () {",
															"            //     pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            // });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"",
															"    }",
															"",
															"",
															"}",
															"",
															"",
															"",
															"return;",
															"",
															"",
															""
														]
													}
												}
											]
										},
										{
											"name": "stig agg",
											"item": [
												{
													"name": "Return summary metrics - stig agg",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/stig",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"stig"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - stig agg - param benchmark",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/stig?benchmarkId={{testBenchmark}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"stig"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - stig agg - param asset",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/stig?assetId={{testAsset}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"stig"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - stig agg - param labelId",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/stig?labelId={{testLabel}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"stig"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - stig agg - param labelName",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/stig?labelName={{testLabelName}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"stig"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"",
															"let jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Response JSON is an array\", function () {",
															"    pm.expect(jsonData).to.be.an('array');",
															"});",
															"",
															"",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");",
															"let testLabel = pm.environment.get(\"testLabel\");",
															"let testLabelName = pm.environment.get(\"testLabelName\");",
															"",
															"",
															"//reference metrics",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));",
															"let testTotalAssessmentsForTestAsset = 368;",
															"let testTotalAssessmentsForTestSTIG = testChecklistLength * 3;",
															"// let testTotalAssessmentsForCollection = 1014;",
															"",
															"",
															"    let metricsReferenceCommon = {",
															"        assets: 3,",
															"        assessed: 14,",
															"        assessments: testTotalAssessmentsForTestSTIG,",
															"        maxTs: \"2022-02-03T00:07:05Z\",",
															"        minTs: \"2020-08-11T22:27:26Z\",",
															"        results: {",
															"            fail: {",
															"                total: 7,",
															"                resultEngine: 0",
															"            },",
															"            pass: {",
															"                total: 3,",
															"                resultEngine: 0",
															"            },",
															"            error: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            fixed: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            unknown: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notchecked: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notselected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            informational: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notapplicable: {",
															"                total: 4,",
															"                resultEngine: 0",
															"            }",
															"        },",
															"        findings: {",
															"            low: 2,",
															"            medium: 5,",
															"            high: 0",
															"        },    ",
															"        statuses: {",
															"            saved: {",
															"                total: 5,",
															"                resultEngine: 0",
															"            },",
															"            accepted: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            rejected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            submitted: {",
															"                total: 9,",
															"                resultEngine: 0",
															"            }",
															"        }\t ",
															"    }",
															"",
															"",
															"",
															"// Checking that response fulfills parameter requests",
															"for (let item of jsonData){",
															"    console.log( \"testing: \" + item.name) ",
															"    ",
															"    let checkMetricsData = false",
															"    console.log( \"stig agg \") ",
															"    if (item.benchmarkId ==  testBenchmark) {",
															"        console.log( \"found test benchmark item \") ",
															"",
															"        checkMetricsData = true",
															"    }",
															"    ",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"        metricsReferenceCommon.assessments = testChecklistLength            ",
															"",
															"    }",
															"    else {",
															"        // metricsReferenceCommon.assessments = testTotalAssessmentsForTestAsset         ",
															"",
															"    }",
															"",
															"",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - benchmark\", function () {",
															"            pm.expect(jsonData.length).to.eql(1);",
															"            pm.expect(item.benchmarkId).to.eql(testBenchmark);  ",
															"            if (user == \"lvl1\" ) {",
															"              metricsReferenceCommon.assessed = 11",
															"              metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 6",
															"              metricsReferenceCommon.results.pass.total = 3",
															"              metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 4",
															"              metricsReferenceCommon.statuses.accepted.total = 0",
															"              metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 7",
															"              metricsReferenceCommon.findings.low = 2",
															"              metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 4",
															"             }                   ",
															"",
															"        })",
															"    }  ",
															"    else {",
															"        pm.test(\"verify parameter restricted response properly - no benchmark param\", function () {",
															"            console.log(user)",
															"        if (user == \"lvl1\" ) {",
															"            console.log(\"in lvl1 check block\")",
															"",
															"            pm.expect(jsonData.length).to.eql(1);",
															"//    if (user == \"lvl1\" ) {",
															"        metricsReferenceCommon.assessed = 11",
															"        metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"        metricsReferenceCommon.results.fail.total = 6",
															"        metricsReferenceCommon.results.pass.total = 3",
															"        metricsReferenceCommon.results.notapplicable.total = 2",
															"        metricsReferenceCommon.statuses.saved.total = 4",
															"        metricsReferenceCommon.statuses.accepted.total = 0",
															"        metricsReferenceCommon.statuses.rejected.total = 0",
															"        metricsReferenceCommon.statuses.submitted.total = 7",
															"        metricsReferenceCommon.findings.low = 2",
															"        metricsReferenceCommon.findings.high = 0",
															"        metricsReferenceCommon.findings.medium = 4",
															"//    }                     ",
															"",
															"        }            ",
															"        else{",
															"            pm.expect(jsonData.length).to.eql(2);",
															"        }",
															"        })",
															"    }",
															"",
															"",
															"",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - assetId\", function () {",
															"",
															"",
															"          if (user == \"lvl1\" ) {",
															"            pm.expect(jsonData.length).to.eql(1);",
															"            pm.expect(item.assets).to.eql(1);",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"              metricsReferenceCommon.statuses.accepted.total = 0",
															"              metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"              metricsReferenceCommon.findings.low = 1",
															"              metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"          }",
															"        else {",
															"          pm.expect(jsonData.length).to.eql(2);",
															"          pm.expect(item.assets).to.eql(1);",
															"          metricsReferenceCommon.assessed = 6",
															"          metricsReferenceCommon.assessments = testChecklistLength",
															"          metricsReferenceCommon.results.fail.total = 3",
															"          metricsReferenceCommon.results.pass.total = 2",
															"          metricsReferenceCommon.results.notapplicable.total = 1",
															"          metricsReferenceCommon.statuses.saved.total = 1",
															"          metricsReferenceCommon.statuses.accepted.total = 0",
															"          metricsReferenceCommon.statuses.rejected.total = 0",
															"          metricsReferenceCommon.statuses.submitted.total = 5     ",
															"          metricsReferenceCommon.findings.low = 1",
															"          metricsReferenceCommon.findings.high = 0",
															"          metricsReferenceCommon.findings.medium = 2     ",
															"",
															"        }    ",
															"      })",
															"         ",
															"        ",
															"    }   ",
															"",
															"    if (pm.request.url.getQueryString().match(/labelId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - labelId\", function () {",
															"",
															"       ",
															"",
															"      if (user == \"lvl1\" ) {",
															"        pm.expect(jsonData.length).to.eql(1);",
															"        pm.expect(item.assets).to.eql(1);",
															"        metricsReferenceCommon.assessed = 6",
															"        metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"        metricsReferenceCommon.results.fail.total = 3",
															"        metricsReferenceCommon.results.pass.total = 2",
															"        metricsReferenceCommon.results.notapplicable.total = 1",
															"        metricsReferenceCommon.statuses.saved.total = 1",
															"        metricsReferenceCommon.statuses.accepted.total = 0",
															"        metricsReferenceCommon.statuses.rejected.total = 0",
															"        metricsReferenceCommon.statuses.submitted.total = 5",
															"        metricsReferenceCommon.findings.low = 1",
															"        metricsReferenceCommon.findings.high = 0",
															"        metricsReferenceCommon.findings.medium = 2",
															"      }       ",
															"      else {",
															"        pm.expect(jsonData.length).to.eql(2);",
															"        pm.expect(item.assets).to.eql(2);",
															"        metricsReferenceCommon.assessed = 9",
															"        metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"        metricsReferenceCommon.results.fail.total = 4",
															"        metricsReferenceCommon.results.pass.total = 2",
															"        metricsReferenceCommon.results.notapplicable.total = 3",
															"        metricsReferenceCommon.statuses.saved.total = 2",
															"        metricsReferenceCommon.statuses.accepted.total = 0",
															"        metricsReferenceCommon.statuses.rejected.total = 0",
															"        metricsReferenceCommon.statuses.submitted.total = 7",
															"        metricsReferenceCommon.findings.low = 1",
															"        metricsReferenceCommon.findings.high = 0",
															"        metricsReferenceCommon.findings.medium = 3 ",
															"      }",
															"     })",
															"",
															"    }           ",
															"",
															"    if (pm.request.url.getQueryString().match(/labelName=/)) {",
															"        pm.test(\"verify parameter restricted response properly - labelName\", function () {",
															"",
															"",
															"",
															"      if (user == \"lvl1\" ) {",
															"        pm.expect(jsonData.length).to.eql(1);",
															"        pm.expect(item.assets).to.eql(1);",
															"        metricsReferenceCommon.assessed = 6",
															"        metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"        metricsReferenceCommon.results.fail.total = 3",
															"        metricsReferenceCommon.results.pass.total = 2",
															"        metricsReferenceCommon.results.notapplicable.total = 1",
															"        metricsReferenceCommon.statuses.saved.total = 1",
															"        metricsReferenceCommon.statuses.accepted.total = 0",
															"        metricsReferenceCommon.statuses.rejected.total = 0",
															"        metricsReferenceCommon.statuses.submitted.total = 5",
															"        metricsReferenceCommon.findings.low = 1",
															"        metricsReferenceCommon.findings.high = 0",
															"        metricsReferenceCommon.findings.medium = 2",
															"      }    ",
															"    else {",
															"      pm.expect(jsonData.length).to.eql(2);",
															"      pm.expect(item.assets).to.eql(2);",
															"      metricsReferenceCommon.assessed = 9",
															"      metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"      metricsReferenceCommon.results.fail.total = 4",
															"      metricsReferenceCommon.results.pass.total = 2",
															"      metricsReferenceCommon.results.notapplicable.total = 3",
															"      metricsReferenceCommon.statuses.saved.total = 2",
															"      metricsReferenceCommon.statuses.accepted.total = 0",
															"      metricsReferenceCommon.statuses.rejected.total = 0",
															"      metricsReferenceCommon.statuses.submitted.total = 7",
															"      metricsReferenceCommon.findings.low = 1",
															"      metricsReferenceCommon.findings.high = 0",
															"      metricsReferenceCommon.findings.medium = 3 ",
															"",
															"    }",
															"  })",
															"",
															"    }            ",
															"     ",
															"    metricsReferenceCommon.results.unassessed = {",
															"        total:  metricsReferenceCommon.results.informational.total + ",
															"                metricsReferenceCommon.results.notselected.total + ",
															"                metricsReferenceCommon.results.notchecked.total + ",
															"                metricsReferenceCommon.results.error.total + ",
															"                metricsReferenceCommon.results.fixed.total",
															"    }",
															"    if (pm.request.url.getPath().match(/summary/)) {",
															"        console.log(\"checking summary metrics - checkflag: \" + checkMetricsData )",
															"        // if (item.assetId ==  testAsset){",
															"        if (checkMetricsData ==  true){",
															"            console.log(\"checking metrics data\")        // if (item.benchmarkId == testBenchmark) {",
															"            // if (item.assetId ==  testAsset ) {",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - unassessed\", function () {",
															"                pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"    // }",
															"    }",
															"",
															"//Checking that metric details are correct",
															"    if (pm.request.url.getPath().match(/detail/)) {",
															"        if (checkMetricsData ==  true){",
															"            // if (item.assetId ==  testAsset ) {",
															"            console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - informational\", function () {",
															"                pm.expect(item.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notchecked\", function () {",
															"                pm.expect(item.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notselected\", function () {",
															"                pm.expect(item.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - error\", function () {",
															"                pm.expect(item.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);",
															"            });    ",
															"            pm.test(\"Check some stats - results - fixed\", function () {",
															"                pm.expect(item.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);",
															"            });                 ",
															"",
															"            // pm.test(\"Check some stats - results - unassessed\", function () {",
															"            //     pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            // });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"",
															"    }",
															"",
															"",
															"}",
															"",
															"",
															"",
															"return;",
															"",
															"",
															""
														]
													}
												}
											]
										},
										{
											"name": "label agg",
											"item": [
												{
													"name": "Return summary metrics - label agg",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/label",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"label"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - label agg - param benchmark",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/label?benchmarkId={{testBenchmark}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"label"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - label agg - param assetId",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/label?assetId={{testAsset}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"label"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - label agg - param labelId",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/label?labelId={{testLabel}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"label"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - label agg - param labelName",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/label?labelName={{testLabelName}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"label"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"",
															"let jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Response JSON is an array\", function () {",
															"    pm.expect(jsonData).to.be.an('array');",
															"});",
															"",
															"",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");",
															"let testLabel = pm.environment.get(\"testLabel\");",
															"let testLabelName = pm.environment.get(\"testLabelName\");",
															"",
															"",
															"//reference metrics",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));",
															"let testTotalAssessmentsForTestAsset = 368;",
															"let testTotalAssessmentsForTestLabel = 736;",
															"",
															"    let metricsReferenceCommon = {",
															"        assets: 2,",
															"        assessed: 12,",
															"        assessments: testTotalAssessmentsForTestLabel,",
															"        maxTs: \"2022-02-03T00:07:05Z\",",
															"        minTs: \"2020-08-11T22:27:26Z\",",
															"        results: {",
															"            fail: {",
															"                total: 5,",
															"                resultEngine: 0",
															"            },",
															"            pass: {",
															"                total: 4,",
															"                resultEngine: 0",
															"            },",
															"            error: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            fixed: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            unknown: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notchecked: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notselected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            informational: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notapplicable: {",
															"                total: 3,",
															"                resultEngine: 0",
															"            }",
															"        },",
															"        findings: {",
															"            low: 1,",
															"            medium: 4,",
															"            high: 0",
															"        },    ",
															"        statuses: {",
															"            saved: {",
															"                total: 3,",
															"                resultEngine: 0",
															"            },",
															"            accepted: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            rejected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            submitted: {",
															"                total: 9,",
															"                resultEngine: 0",
															"            }",
															"        }\t ",
															"    }",
															"",
															"",
															"",
															"",
															"// Checking that response fulfills parameter requests",
															"let responseLabelNames = [];",
															"let responseLabelIds = [];",
															"",
															"for (let item of jsonData){",
															"    console.log( \"testing: \" + item.name) ",
															"    responseLabelIds.push(item.labelId)",
															"    responseLabelNames.push(item.labelName)",
															"",
															"    //are we aggregating",
															"    let checkMetricsData = false",
															"    console.log( \"label agg \") ",
															"    if (item.labelId ==  testLabel) {",
															"        checkMetricsData = true",
															"    }",
															"",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/) && checkMetricsData == true) {",
															"        pm.test(\"verify parameter restricted response properly - benchmark\", function () {",
															"            pm.expect(jsonData.length).to.eql(3);",
															"            // pm.expect(item.assets).to.eql(2);        ",
															"            if (user == \"lvl1\"){",
															"              pm.expect(item.assets).to.eql(1);        ",
															"              // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"              // metricsReferenceCommon.statuses.accepted.total = 0",
															"              // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5   ",
															"              // metricsReferenceCommon.findings.low = 2",
															"              // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"            }",
															"            else{",
															"              pm.expect(item.assets).to.eql(2);        ",
															"              // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 9",
															"            //   metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 4",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 2",
															"              // metricsReferenceCommon.statuses.accepted.total = 0",
															"              // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 7   ",
															"              // metricsReferenceCommon.findings.low = 2",
															"              // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 3",
															"",
															"            }                  ",
															"",
															"        })",
															"    metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"    }  ",
															"",
															"",
															"    else if (pm.request.url.getQueryString().match(/assetId=/) && checkMetricsData == true) {",
															"        pm.test(\"verify parameter restricted response properly - assetId\", function () {",
															"            pm.expect(item.assets).to.eql(1);",
															"            if (user == \"lvl1\"){",
															"",
															"              metricsReferenceCommon.assessments = 81",
															"              // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   // metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5   ",
															"            //   // metricsReferenceCommon.findings.low = 2",
															"            //   // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2     ",
															"",
															"            }",
															"            else{",
															"              metricsReferenceCommon.assessments = testTotalAssessmentsForTestAsset",
															"            //   metricsReferenceCommon.assessments = 81",
															"            //   // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 9",
															"            // //   metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 4",
															"            //   metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 2",
															"            // //   // metricsReferenceCommon.statuses.accepted.total = 0",
															"            // //   // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 7",
															"            //   // metricsReferenceCommon.findings.low = 2",
															"            //   // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 3           ",
															"",
															"            }                  ",
															"        })",
															"",
															"    // metricsReferenceCommon.assessed = 9",
															"    // // metricsReferenceCommon.assessments = testTotalAssessmentsForTestAsset",
															"    // metricsReferenceCommon.results.fail.total = 4",
															"    // metricsReferenceCommon.results.notapplicable.total = 1",
															"    // metricsReferenceCommon.statuses.saved.total = 2",
															"    // metricsReferenceCommon.statuses.submitted.total = 7",
															"    // metricsReferenceCommon.findings.medium = 3 ",
															"    }   ",
															"",
															"   else  if (pm.request.url.getQueryString().match(/labelId=/) && checkMetricsData == true) {",
															"        pm.test(\"verify parameter restricted response properly - labelId\", function () {",
															"",
															"            pm.expect(responseLabelIds).to.include(item.labelId);",
															"            if (user == \"lvl1\"){",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"",
															"              metricsReferenceCommon.statuses.submitted.total = 5   ",
															"",
															"              metricsReferenceCommon.findings.medium = 2",
															"            }",
															"            else{",
															"              // pm.expect(jsonData.checklists).to.eql(3);",
															"            //   metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 81",
															"            //   metricsReferenceCommon.results.fail.total = 3",
															"            //   metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 3",
															"",
															"            //   metricsReferenceCommon.statuses.submitted.total = 5   ",
															"",
															"            //   metricsReferenceCommon.findings.medium = 2",
															"",
															"            }               ",
															"        })",
															"    }           ",
															"",
															"    else if (pm.request.url.getQueryString().match(/labelName=/) && checkMetricsData == true) {",
															"        pm.test(\"verify parameter restricted response properly - labelName\", function () {",
															"            pm.expect(responseLabelNames).to.include(item.labelName);",
															"            if (user == \"lvl1\"){",
															"              // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"              // metricsReferenceCommon.statuses.accepted.total = 0",
															"              // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5   ",
															"              // metricsReferenceCommon.findings.low = 2",
															"              // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"            }",
															"            else{",
															"              // pm.expect(jsonData.checklists).to.eql(3);",
															"              // metricsReferenceCommon.assessments = 243",
															"              metricsReferenceCommon.statuses.saved.total = 3",
															"",
															"",
															"",
															"            }              ",
															"        })",
															"    }        ",
															"    else if ( checkMetricsData == true) {",
															"        pm.test(\"verify parameter restricted response properly - no params\", function () {",
															"            pm.expect(jsonData.length).to.eql(3);",
															"            if (user == \"lvl1\"){",
															"              // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"              // metricsReferenceCommon.statuses.accepted.total = 0",
															"              // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5   ",
															"              // metricsReferenceCommon.findings.low = 2",
															"              // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"            }",
															"            else{",
															"              // pm.expect(jsonData.checklists).to.eql(3);",
															"              // metricsReferenceCommon.assessments = 243",
															"",
															"            }            ",
															"        })",
															"    }          ",
															"    ",
															"    metricsReferenceCommon.results.unassessed = {",
															"        total:  metricsReferenceCommon.results.informational.total + ",
															"                metricsReferenceCommon.results.notselected.total + ",
															"                metricsReferenceCommon.results.notchecked.total + ",
															"                metricsReferenceCommon.results.error.total + ",
															"                metricsReferenceCommon.results.fixed.total",
															"    }",
															"",
															"    if (pm.request.url.getPath().match(/summary/)) {",
															"        console.log(\"checking summary metrics - checkflag: \" + checkMetricsData )",
															"        // if (item.assetId ==  testAsset){",
															"        if (checkMetricsData ==  true){",
															"            console.log(\"checking metrics data\")        // if (item.benchmarkId == testBenchmark) {",
															"            // if (item.assetId ==  testAsset ) {",
															"            console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - unassessed\", function () {",
															"                pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"    // }",
															"    }",
															"",
															"//Checking that metric details are correct",
															"    if (pm.request.url.getPath().match(/detail/)) {",
															"        if (checkMetricsData ==  true){",
															"            // if (item.assetId ==  testAsset ) {",
															"            console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - informational\", function () {",
															"                pm.expect(item.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notchecked\", function () {",
															"                pm.expect(item.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notselected\", function () {",
															"                pm.expect(item.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - error\", function () {",
															"                pm.expect(item.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);",
															"            });    ",
															"            pm.test(\"Check some stats - results - fixed\", function () {",
															"                pm.expect(item.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);",
															"            });                 ",
															"",
															"            // pm.test(\"Check some stats - results - unassessed\", function () {",
															"            //     pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            // });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"",
															"    }",
															"",
															"",
															"}",
															"",
															"",
															"",
															"return;",
															"",
															"",
															""
														]
													}
												}
											]
										},
										{
											"name": "Collection agg",
											"item": [
												{
													"name": "Return summary metrics - collection agg - no params",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/collection",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"collection"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - collection agg - benchmark param",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/collection?benchmarkId={{testBenchmark}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"collection"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - collection agg - asset param",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/collection?assetId={{testAsset}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"collection"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - collection agg - labelId param",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/collection?labelId={{testLabel}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"collection"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return summary metrics - collection agg - label name param",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/collection?labelName={{testLabelName}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"summary",
																"collection"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"",
															"let jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Response JSON is an object\", function () {",
															"    pm.expect(jsonData).to.be.an('object');",
															"});",
															"",
															"",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");",
															"let testLabel = pm.environment.get(\"testLabel\");",
															"let testLabelName = pm.environment.get(\"testLabelName\");",
															"",
															"",
															"//reference metrics",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));",
															"let testTotalAssessmentsForTestAsset = 368;",
															"let testTotalAssessmentsForTestSTIG = testChecklistLength * 3;",
															"let testTotalAssessmentsForCollection = 1104;",
															"",
															"",
															"    let metricsReferenceCommon = {",
															"        assets: 4,",
															"        checklists: 6,",
															"        assessed: 17,",
															"        assessments: testTotalAssessmentsForCollection,",
															"        maxTs: \"2022-02-03T00:07:05Z\",",
															"        minTs: \"2020-08-11T22:27:26Z\",",
															"        results: {",
															"            fail: {",
															"                total: 8,",
															"                resultEngine: 0",
															"            },",
															"            pass: {",
															"                total: 5,",
															"                resultEngine: 0",
															"            },",
															"            error: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            fixed: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            unknown: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notchecked: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notselected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            informational: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notapplicable: {",
															"                total: 4,",
															"                resultEngine: 0",
															"            }",
															"        },",
															"        findings: {",
															"            low: 2,",
															"            medium: 6,",
															"            high: 0",
															"        },    ",
															"        statuses: {",
															"            saved: {",
															"                total: 6,",
															"                resultEngine: 0",
															"            },",
															"            accepted: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            rejected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            submitted: {",
															"                total: 11,",
															"                resultEngine: 0",
															"            }",
															"        }\t ",
															"    }",
															"",
															"    metricsReferenceCommon.results.unassessed = {",
															"        total:  metricsReferenceCommon.results.informational.total + ",
															"                metricsReferenceCommon.results.notselected.total + ",
															"                metricsReferenceCommon.results.notchecked.total + ",
															"                metricsReferenceCommon.results.error.total + ",
															"                metricsReferenceCommon.results.fixed.total",
															"    }",
															"",
															"",
															"",
															"// Checking that response fulfills parameter requests",
															"// for (let jsonData of jsonData){",
															"    console.log( \"testing: \" + jsonData.name) ",
															"    ",
															"    //are we aggregating",
															"    let checkMetricsData = true",
															"    console.log( \"collection agg \") ",
															"",
															"",
															"          if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"             console.log(\"stig param\")",
															"             pm.test(\"verify parameter restricted response properly - benchmark\", function () {",
															"",
															"             if (user == \"lvl1\"){",
															"               pm.expect(jsonData.checklists).to.eql(2);",
															"               metricsReferenceCommon.assessed = 11",
															"               metricsReferenceCommon.assessments = 162",
															"               metricsReferenceCommon.results.fail.total = 6",
															"               metricsReferenceCommon.results.pass.total = 3",
															"               metricsReferenceCommon.results.notapplicable.total = 2",
															"               metricsReferenceCommon.statuses.saved.total = 4",
															"               metricsReferenceCommon.statuses.accepted.total = 0",
															"               metricsReferenceCommon.statuses.rejected.total = 0",
															"               metricsReferenceCommon.statuses.submitted.total = 7    ",
															"               metricsReferenceCommon.findings.low = 2",
															"               metricsReferenceCommon.findings.high = 0",
															"               metricsReferenceCommon.findings.medium = 4",
															"             }",
															"             else{",
															"               pm.expect(jsonData.checklists).to.eql(3);",
															"               metricsReferenceCommon.assessments = 243",
															"               metricsReferenceCommon.assessed = 14",
															"            //    metricsReferenceCommon.assessments = 162",
															"               metricsReferenceCommon.results.fail.total = 7",
															"               metricsReferenceCommon.results.pass.total = 3",
															"            //    metricsReferenceCommon.results.notapplicable.total = 2",
															"               metricsReferenceCommon.statuses.saved.total = 5",
															"            //    metricsReferenceCommon.statuses.accepted.total = 0",
															"            //    metricsReferenceCommon.statuses.rejected.total = 0",
															"               metricsReferenceCommon.statuses.submitted.total = 9",
															"            //    metricsReferenceCommon.findings.low = 2",
															"            //    metricsReferenceCommon.findings.high = 0",
															"               metricsReferenceCommon.findings.medium = 5               ",
															" ",
															"             }",
															"            })",
															"            //  metricsReferenceCommon.assessments = testTotalAssessmentsForTestSTIG",
															"          }",
															"    else if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - assetId\", function () {",
															"          console.log(\"asset, no stig param\")",
															"          if (user == \"lvl1\"){",
															"           pm.expect(jsonData.checklists).to.eql(1);",
															"           metricsReferenceCommon.assessed = 6",
															"           metricsReferenceCommon.assessments = 81",
															"           metricsReferenceCommon.results.fail.total = 3",
															"           metricsReferenceCommon.results.pass.total = 2",
															"           metricsReferenceCommon.results.notapplicable.total = 1",
															"           metricsReferenceCommon.statuses.saved.total = 1",
															"           metricsReferenceCommon.statuses.accepted.total = 0",
															"           metricsReferenceCommon.statuses.rejected.total = 0",
															"           metricsReferenceCommon.statuses.submitted.total = 5     ",
															"           metricsReferenceCommon.findings.low = 1",
															"           metricsReferenceCommon.findings.high = 0",
															"           metricsReferenceCommon.findings.medium = 2        ",
															"         }",
															"         else{",
															"             pm.expect(jsonData.checklists).to.eql(2);",
															"             metricsReferenceCommon.assessed = 9",
															"             metricsReferenceCommon.assessments = testTotalAssessmentsForTestAsset",
															"             metricsReferenceCommon.results.fail.total = 4",
															"             metricsReferenceCommon.results.pass.total = 4",
															"             metricsReferenceCommon.results.notapplicable.total = 1",
															"             metricsReferenceCommon.statuses.saved.total = 2",
															"             metricsReferenceCommon.statuses.accepted.total = 0",
															"             metricsReferenceCommon.statuses.rejected.total = 0",
															"             metricsReferenceCommon.statuses.submitted.total = 7     ",
															"             metricsReferenceCommon.findings.low = 1",
															"             metricsReferenceCommon.findings.high = 0",
															"             metricsReferenceCommon.findings.medium = 3  ",
															"         }              ",
															"            pm.expect(jsonData.assets).to.eql(1);",
															"        })",
															"    }   ",
															"",
															"    else if (pm.request.url.getQueryString().match(/labelId=/) || pm.request.url.getQueryString().match(/labelName=/)) {",
															"        pm.test(\"verify parameter restricted response properly - labelId\", function () {",
															"            // let responseLabels = [];",
															"            // for (let label of jsonData.labels) {",
															"            //     responseLabels.push(label.labelId)",
															"            // }",
															"            if (user == \"lvl1\"){",
															"              pm.expect(jsonData.checklists).to.eql(1);",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"              metricsReferenceCommon.statuses.accepted.total = 0",
															"              metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5     ",
															"              metricsReferenceCommon.findings.low = 1",
															"              metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2        ",
															"            }",
															"            else{            ",
															"            pm.expect(jsonData.assets).to.eql(2);",
															"            pm.expect(jsonData.checklists).to.eql(4);",
															"              console.log(\"labelId param\")",
															" ",
															"                 pm.expect(jsonData.checklists).to.eql(4);",
															"                 metricsReferenceCommon.assessed = 12",
															"                 metricsReferenceCommon.assessments = 736",
															"                 metricsReferenceCommon.results.fail.total = 5",
															"                 metricsReferenceCommon.results.pass.total = 4",
															"                 metricsReferenceCommon.results.notapplicable.total = 3",
															"                 metricsReferenceCommon.statuses.saved.total = 3",
															"                 metricsReferenceCommon.statuses.accepted.total = 0",
															"                 metricsReferenceCommon.statuses.rejected.total = 0",
															"                 metricsReferenceCommon.statuses.submitted.total = 9     ",
															"                 metricsReferenceCommon.findings.low = 1",
															"                 metricsReferenceCommon.findings.high = 0",
															"                 metricsReferenceCommon.findings.medium = 4",
															"            }",
															"        })",
															"    }           ",
															"",
															"    // else if (pm.request.url.getQueryString().match(/labelName=/)) {",
															"    //     pm.test(\"verify parameter restricted response properly - labelName\", function () {",
															"    //       if (user == \"lvl1\"){",
															"    //         pm.expect(jsonData.checklists).to.eql(1);",
															"    //         metricsReferenceCommon.assessed = 6",
															"    //         metricsReferenceCommon.assessments = 81",
															"    //         metricsReferenceCommon.results.fail.total = 3",
															"    //         metricsReferenceCommon.results.pass.total = 2",
															"    //         metricsReferenceCommon.results.notapplicable.total = 1",
															"    //         metricsReferenceCommon.statuses.saved.total = 1",
															"    //         metricsReferenceCommon.statuses.accepted.total = 0",
															"    //         metricsReferenceCommon.statuses.rejected.total = 0",
															"    //         metricsReferenceCommon.statuses.submitted.total = 5     ",
															"    //         metricsReferenceCommon.findings.low = 1",
															"    //         metricsReferenceCommon.findings.high = 0",
															"    //         metricsReferenceCommon.findings.medium = 2        ",
															"    //       }",
															"    //       else{            ",
															"    //       pm.expect(jsonData.assets).to.eql(2);",
															"    //       pm.expect(jsonData.checklists).to.eql(4);",
															"    //         console.log(\"labelId param\")",
															"",
															"    //            pm.expect(jsonData.checklists).to.eql(4);",
															"    //            metricsReferenceCommon.assessed = 9",
															"    //            metricsReferenceCommon.assessments = 676",
															"    //            metricsReferenceCommon.results.fail.total = 4",
															"    //            metricsReferenceCommon.results.pass.total = 2",
															"    //            metricsReferenceCommon.results.notapplicable.total = 3",
															"    //            metricsReferenceCommon.statuses.saved.total = 2",
															"    //            metricsReferenceCommon.statuses.accepted.total = 0",
															"    //            metricsReferenceCommon.statuses.rejected.total = 0",
															"    //            metricsReferenceCommon.statuses.submitted.total = 7     ",
															"    //            metricsReferenceCommon.findings.low = 1",
															"    //            metricsReferenceCommon.findings.high = 0",
															"    //            metricsReferenceCommon.findings.medium = 3",
															"    //       }                ",
															"    //     })",
															"    // } ",
															"    else {",
															"      console.log(\"no param\")",
															"      if (user == \"lvl1\"){",
															"        pm.expect(jsonData.checklists).to.eql(2);",
															"        metricsReferenceCommon.assessed = 11",
															"        metricsReferenceCommon.assessments = 162",
															"        metricsReferenceCommon.results.fail.total = 6",
															"        metricsReferenceCommon.results.pass.total = 3",
															"        metricsReferenceCommon.results.notapplicable.total = 2",
															"        metricsReferenceCommon.statuses.saved.total = 4",
															"        metricsReferenceCommon.statuses.accepted.total = 0",
															"        metricsReferenceCommon.statuses.rejected.total = 0",
															"        metricsReferenceCommon.statuses.submitted.total = 7     ",
															"        metricsReferenceCommon.findings.low = 2",
															"        metricsReferenceCommon.findings.high = 0",
															"        metricsReferenceCommon.findings.medium = 4      ",
															"",
															"      }",
															"      else{",
															"        pm.expect(jsonData.checklists).to.eql(6);",
															"        metricsReferenceCommon.assessments = 1104",
															"",
															"        ",
															"",
															"      }",
															"  }                 ",
															"    ",
															"    if (pm.request.url.getPath().match(/summary/)) {",
															"        console.log(\"checking summary metrics - checkflag: \" + checkMetricsData )",
															"        // if (jsonData.assetId ==  testAsset){",
															"        if (checkMetricsData ==  true){",
															"            console.log(\"checking metrics data\")        // if (jsonData.benchmarkId == testBenchmark) {",
															"            // if (jsonData.assetId ==  testAsset ) {",
															"            // console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(jsonData.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(jsonData.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(jsonData.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(jsonData.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(jsonData.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(jsonData.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(jsonData.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(jsonData.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - unassessed\", function () {",
															"                pm.expect(jsonData.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(jsonData.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(jsonData.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(jsonData.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(jsonData.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(jsonData.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(jsonData.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"    // }",
															"    }",
															"",
															"//Checking that metric details are correct",
															"    if (pm.request.url.getPath().match(/detail/)) {",
															"        if (checkMetricsData ==  true){",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(jsonData.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(jsonData.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(jsonData.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(jsonData.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(jsonData.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(jsonData.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(jsonData.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(jsonData.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - informational\", function () {",
															"                pm.expect(jsonData.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notchecked\", function () {",
															"                pm.expect(jsonData.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notselected\", function () {",
															"                pm.expect(jsonData.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - error\", function () {",
															"                pm.expect(jsonData.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);",
															"            });    ",
															"            pm.test(\"Check some stats - results - fixed\", function () {",
															"                pm.expect(jsonData.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);",
															"            });                 ",
															"",
															"            // pm.test(\"Check some stats - results - unassessed\", function () {",
															"            //     pm.expect(jsonData.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            // });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(jsonData.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(jsonData.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(jsonData.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(jsonData.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(jsonData.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(jsonData.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"",
															"    }",
															"",
															"",
															"// }",
															"",
															"",
															"",
															"return;",
															"",
															"",
															""
														]
													}
												}
											]
										},
										{
											"name": "Return summary metrics for the Collection - no agg - no params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"// // let stigKeys = [\r",
															"// //     \"title\",\r",
															"// //     \"ruleCount\",\r",
															"// //     \"benchmarkId\",\r",
															"// //     \"lastRevisionDate\",\r",
															"// //     \"lastRevisionStr\",\r",
															"// //     \"assetCount\",\r",
															"// //     \"acceptedCount\",\r",
															"// //     \"rejectedCount\",\r",
															"// //     \"submittedCount\",\r",
															"// //     \"savedCount\",\r",
															"// //     \"minTs\",\r",
															"// //     \"maxTs\"\r",
															"// // ]\r",
															"\r",
															"// let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     for (let stig of jsonData){\r",
															"//         // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"//         pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//     };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let jsonData = pm.response.json();\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
															"let testLabel = pm.environment.get(\"testLabel\");\r",
															"let testLabelName = pm.environment.get(\"testLabelName\");\r",
															"\r",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Check that proper assets are returned\", function () {\r",
															"    for (let item of jsonData){\r",
															"            console.log( \"testing: \" + item.name) \r",
															"\r",
															"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"        var regex = new RegExp(assetMatchString);\r",
															"        pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
															"            pm.expect(item.name).to.match(regex);\r",
															"        });\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
															"                pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
															"            })\r",
															"        }\r",
															"        if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
															"                pm.expect(item.assetId).to.eql(testAsset);\r",
															"            })\r",
															"        }   \r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
															"                let responseLabels = [];\r",
															"                for (let label of item.labels) {\r",
															"                    responseLabels.push(label.labelId)\r",
															"                }\r",
															"                pm.expect(responseLabels).to.include(testLabel);\r",
															"            })\r",
															"        }           \r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
															"                let responseLabels = [];\r",
															"                for (let label of item.labels) {\r",
															"                    responseLabels.push(label.name)\r",
															"                }\r",
															"                pm.expect(responseLabels).to.include(testLabelName);\r",
															"            })\r",
															"        }              \r",
															"\r",
															"    if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
															"        // if (item.assetId ==  testAsset ) {\r",
															"            console.log( \"found Collection_X_lvl1_asset\") \r",
															"\r",
															"            pm.test(\"Check some stats - findings, low\", function () {\r",
															"                pm.expect(item.metrics.findings.low).to.equal(1);\r",
															"            });\r",
															"\r",
															"            pm.test(\"Check some stats - results - NA\", function () {\r",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(1);\r",
															"            });        \r",
															"            pm.test(\"Check some stats - results - pass\", function () {\r",
															"                pm.expect(item.metrics.results.pass).to.equal(2);\r",
															"            });        \r",
															"\r",
															"        pm.test(\"Check some stats - results - fail\", function () {\r",
															"                pm.expect(item.metrics.results.fail).to.equal(3);\r",
															"            });        \r",
															"\r",
															"        pm.test(\"Check some stats - status - submitted\", function () {\r",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(5);\r",
															"            });     \r",
															"        pm.test(\"Check some stats - assessments\", function () {\r",
															"                pm.expect(item.metrics.assessments).to.equal(testChecklistLength);\r",
															"            });             \r",
															"        pm.test(\"Check some stats - assessed\", function () {\r",
															"                pm.expect(item.metrics.assessed).to.equal(6);\r",
															"            });                          \r",
															"\r",
															"        }\r",
															"    }\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"    \r",
															"\r",
															"    \r",
															"// }\r",
															"\r",
															"return;\r",
															"\r",
															"// if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//     pm.expect(jsonData.stigs).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
															"//     pm.expect(jsonData.history).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
															"//     pm.expect(jsonData.rule).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
															"//     pm.expect(jsonData.metadata).to.exist;\r",
															"// }\r",
															"// pm.test(\"Check if object contains all provided keys\", function () {\r",
															"//     // pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check if object contains proper ruleId\", function () {\r",
															"//     let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"//     pm.expect(jsonData.ruleId).to.eql(testRuleId);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check review comment for regex match string\", function () {\r",
															"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
															"//     var regex = new RegExp(reviewMatchString);\r",
															"//     pm.expect(jsonData.detail).to.match(regex);\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     // for (let item of jsonData){\r",
															"//     let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"//     var regex = new RegExp(collectionMatchString);\r",
															"//     pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//         pm.expect(jsonData.name).to.match(regex);\r",
															"//     });\r",
															"\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
															"//         pm.expect(jsonData.assets).to.exist;\r",
															"\r",
															"//         let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"//         var assetRegex = new RegExp(assetMatchString);\r",
															"//         for (let asset of jsonData.assets){\r",
															"//             // pm.expect(asset).to.have.property('name');\r",
															"//             // pm.expect(asset).to.have.property('assetId');\r",
															"//             pm.expect(asset.name).to.match(assetRegex);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
															"//         for (let grant of jsonData.grants){\r",
															"//             pm.expect(jsonData.grants).to.exist;\r",
															"\r",
															"//             // pm.expect(grant).to.be(array);\r",
															"//             // pm.expect(grant.user).to.be(object);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"//         for (let stig of jsonData.stigs){\r",
															"//             // pm.expect(stig).to.be(object);\r",
															"//             pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
															"//         // console.log(\"checking owners projection\");\r",
															"//         pm.expect(jsonData.owners).to.exist;\r",
															"\r",
															"//         for (let owner of jsonData.owners){\r",
															"//             // pm.expect(owner).to.be(array);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.statistics).to.exist;\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=labels/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.labels).to.exist;\r",
															"//         if (user == \"lvl1\" ) {\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"//             pm.expect(jsonData.labels[0].uses).to.equal(1);\r",
															"//             pm.expect(jsonData.labels[1].uses).to.equal(1);\r",
															"\r",
															"//         }\r",
															"//         else{\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"\r",
															"//         }            \r",
															"\r",
															"//     }\r",
															"//     // };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metrics",
														"summary"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return summary metrics for the Collection - benchmark param - no agg",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"// // let stigKeys = [\r",
															"// //     \"title\",\r",
															"// //     \"ruleCount\",\r",
															"// //     \"benchmarkId\",\r",
															"// //     \"lastRevisionDate\",\r",
															"// //     \"lastRevisionStr\",\r",
															"// //     \"assetCount\",\r",
															"// //     \"acceptedCount\",\r",
															"// //     \"rejectedCount\",\r",
															"// //     \"submittedCount\",\r",
															"// //     \"savedCount\",\r",
															"// //     \"minTs\",\r",
															"// //     \"maxTs\"\r",
															"// // ]\r",
															"\r",
															"// let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     for (let stig of jsonData){\r",
															"//         // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"//         pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//     };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let jsonData = pm.response.json();\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
															"let testLabel = pm.environment.get(\"testLabel\");\r",
															"let testLabelName = pm.environment.get(\"testLabelName\");\r",
															"\r",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
															"\r",
															"\r",
															"//are we aggregating\r",
															"    if (pm.request.url.getPath().match(/asset/)) {\r",
															"\r",
															"\r",
															"\r",
															"    }        \r",
															"    if (pm.request.url.getPath().match(/collection/)) {\r",
															"\r",
															"\r",
															"\r",
															"    }      \r",
															"    if (pm.request.url.getPath().match(/label/)) {\r",
															"\r",
															"\r",
															"\r",
															"    }              \r",
															"    if (pm.request.url.getPath().match(/stig/)) {\r",
															"\r",
															"\r",
															"\r",
															"    }       \r",
															"\r",
															"\r",
															"\r",
															"// Checking that response fulfills parameter requests\r",
															"for (let item of jsonData){\r",
															"    console.log( \"testing: \" + item.name) \r",
															"\r",
															"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"    var regex = new RegExp(assetMatchString);\r",
															"    pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
															"        pm.expect(item.name).to.match(regex);\r",
															"    });\r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
															"        pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
															"            pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
															"        })\r",
															"    }\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
															"            pm.expect(item.assetId).to.eql(testAsset);\r",
															"        })\r",
															"    }   \r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
															"        pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
															"            let responseLabels = [];\r",
															"            for (let label of item.labels) {\r",
															"                responseLabels.push(label.labelId)\r",
															"            }\r",
															"            pm.expect(responseLabels).to.include(testLabel);\r",
															"        })\r",
															"    }           \r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
															"        pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
															"            let responseLabels = [];\r",
															"            for (let label of item.labels) {\r",
															"                responseLabels.push(label.name)\r",
															"            }\r",
															"            pm.expect(responseLabels).to.include(testLabelName);\r",
															"        })\r",
															"    }              \r",
															"\r",
															"\r",
															"\r",
															"//Checking that metric summaries are correct\r",
															"    let metricsReferenceCommon = {\r",
															"        assessed: 6,\r",
															"        assessments: testChecklistLength,\r",
															"        maxTs: \"2022-02-03T00:07:05Z\",\r",
															"        minTs: \"2020-08-11T22:27:26Z\",\r",
															"        results: {\r",
															"            fail: {\r",
															"                total: 3,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            pass: {\r",
															"                total: 2,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            error: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            fixed: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            unknown: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            notchecked: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            notselected: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            informational: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            notapplicable: {\r",
															"                total: 1,\r",
															"                resultEngine: 0\r",
															"            }\r",
															"        },\r",
															"        findings: {\r",
															"            low: 1,\r",
															"            medium: 2,\r",
															"            high: 0\r",
															"        },    \r",
															"        statuses: {\r",
															"            saved: {\r",
															"                total: 1,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            accepted: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            rejected: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            submitted: {\r",
															"                total: 5,\r",
															"                resultEngine: 0\r",
															"            }\r",
															"        }\t \r",
															"    }\r",
															"\r",
															"    metricsReferenceCommon.results.unassessed = {\r",
															"        total:  metricsReferenceCommon.results.informational.total + \r",
															"                metricsReferenceCommon.results.notselected.total + \r",
															"                metricsReferenceCommon.results.notchecked.total + \r",
															"                metricsReferenceCommon.results.error.total + \r",
															"                metricsReferenceCommon.results.fixed.total\r",
															"    }\r",
															"\r",
															"    \r",
															"    if (pm.request.url.getPath().match(/summary/)) {\r",
															"        console.log(\"checking summary metrics\")\r",
															"        if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
															"            // if (item.assetId ==  testAsset ) {\r",
															"            console.log( \"found Collection_X_lvl1_asset\") \r",
															"\r",
															"            pm.test(\"Check some stats - maxTs\", function () {\r",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);\r",
															"            });                \r",
															"            pm.test(\"Check some stats - minTs\", function () {\r",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);\r",
															"            });           \r",
															"\r",
															"            pm.test(\"Check some stats - findings, low\", function () {\r",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);\r",
															"            });\r",
															"            pm.test(\"Check some stats - findings, medium\", function () {\r",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);\r",
															"            });\r",
															"            pm.test(\"Check some stats - findings, high\", function () {\r",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);\r",
															"            });                                \r",
															"\r",
															"            pm.test(\"Check some stats - results - NA\", function () {\r",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);\r",
															"            });        \r",
															"            pm.test(\"Check some stats - results - pass\", function () {\r",
															"                pm.expect(item.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);\r",
															"            });        \r",
															"\r",
															"            pm.test(\"Check some stats - results - fail\", function () {\r",
															"                pm.expect(item.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);\r",
															"            });     \r",
															"            pm.test(\"Check some stats - results - unassessed\", function () {\r",
															"                pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);\r",
															"            });                   \r",
															"\r",
															"            pm.test(\"Check some stats - status - saved\", function () {\r",
															"                pm.expect(item.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);\r",
															"            });   \r",
															"\r",
															"            pm.test(\"Check some stats - status - submitted\", function () {\r",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);\r",
															"            });  \r",
															"            pm.test(\"Check some stats - status - accepted\", function () {\r",
															"                pm.expect(item.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);\r",
															"            });                   \r",
															"            pm.test(\"Check some stats - status - rejected\", function () {\r",
															"                pm.expect(item.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);\r",
															"            });      \r",
															"\r",
															"            pm.test(\"Check some stats - assessments\", function () {\r",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);\r",
															"            });             \r",
															"            pm.test(\"Check some stats - assessed\", function () {\r",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);\r",
															"            });                          \r",
															"\r",
															"        }\r",
															"    }\r",
															"\r",
															"//Checking that metric details are correct\r",
															"    if (pm.request.url.getPath().match(/detail/)) {\r",
															"        if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
															"            // if (item.assetId ==  testAsset ) {\r",
															"            console.log( \"found Collection_X_lvl1_asset\") \r",
															"\r",
															"            pm.test(\"Check some stats - maxTs\", function () {\r",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);\r",
															"            });                \r",
															"            pm.test(\"Check some stats - minTs\", function () {\r",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);\r",
															"            });           \r",
															"\r",
															"            pm.test(\"Check some stats - findings, low\", function () {\r",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);\r",
															"            });\r",
															"            pm.test(\"Check some stats - findings, medium\", function () {\r",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);\r",
															"            });\r",
															"            pm.test(\"Check some stats - findings, high\", function () {\r",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);\r",
															"            });                                \r",
															"\r",
															"            pm.test(\"Check some stats - results - NA\", function () {\r",
															"                pm.expect(item.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);\r",
															"            });        \r",
															"            pm.test(\"Check some stats - results - pass\", function () {\r",
															"                pm.expect(item.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);\r",
															"            });        \r",
															"\r",
															"            pm.test(\"Check some stats - results - fail\", function () {\r",
															"                pm.expect(item.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);\r",
															"            });     \r",
															"            pm.test(\"Check some stats - results - informational\", function () {\r",
															"                pm.expect(item.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);\r",
															"            });                 \r",
															"            pm.test(\"Check some stats - results - notchecked\", function () {\r",
															"                pm.expect(item.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);\r",
															"            });                 \r",
															"            pm.test(\"Check some stats - results - notselected\", function () {\r",
															"                pm.expect(item.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);\r",
															"            });                 \r",
															"            pm.test(\"Check some stats - results - error\", function () {\r",
															"                pm.expect(item.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);\r",
															"            });    \r",
															"            pm.test(\"Check some stats - results - fixed\", function () {\r",
															"                pm.expect(item.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);\r",
															"            });                 \r",
															"\r",
															"            // pm.test(\"Check some stats - results - unassessed\", function () {\r",
															"            //     pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);\r",
															"            // });                   \r",
															"\r",
															"            pm.test(\"Check some stats - status - saved\", function () {\r",
															"                pm.expect(item.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);\r",
															"            });   \r",
															"\r",
															"            pm.test(\"Check some stats - status - submitted\", function () {\r",
															"                pm.expect(item.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);\r",
															"            });  \r",
															"            pm.test(\"Check some stats - status - accepted\", function () {\r",
															"                pm.expect(item.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);\r",
															"            });                   \r",
															"            pm.test(\"Check some stats - status - rejected\", function () {\r",
															"                pm.expect(item.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);\r",
															"            });      \r",
															"\r",
															"            pm.test(\"Check some stats - assessments\", function () {\r",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);\r",
															"            });             \r",
															"            pm.test(\"Check some stats - assessed\", function () {\r",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);\r",
															"            });                          \r",
															"\r",
															"        }\r",
															"\r",
															"    }\r",
															"\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"    \r",
															"\r",
															"    \r",
															"// }\r",
															"\r",
															"return;\r",
															"\r",
															"// if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//     pm.expect(jsonData.stigs).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
															"//     pm.expect(jsonData.history).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
															"//     pm.expect(jsonData.rule).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
															"//     pm.expect(jsonData.metadata).to.exist;\r",
															"// }\r",
															"// pm.test(\"Check if object contains all provided keys\", function () {\r",
															"//     // pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check if object contains proper ruleId\", function () {\r",
															"//     let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"//     pm.expect(jsonData.ruleId).to.eql(testRuleId);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check review comment for regex match string\", function () {\r",
															"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
															"//     var regex = new RegExp(reviewMatchString);\r",
															"//     pm.expect(jsonData.detail).to.match(regex);\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     // for (let item of jsonData){\r",
															"//     let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"//     var regex = new RegExp(collectionMatchString);\r",
															"//     pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//         pm.expect(jsonData.name).to.match(regex);\r",
															"//     });\r",
															"\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
															"//         pm.expect(jsonData.assets).to.exist;\r",
															"\r",
															"//         let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"//         var assetRegex = new RegExp(assetMatchString);\r",
															"//         for (let asset of jsonData.assets){\r",
															"//             // pm.expect(asset).to.have.property('name');\r",
															"//             // pm.expect(asset).to.have.property('assetId');\r",
															"//             pm.expect(asset.name).to.match(assetRegex);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
															"//         for (let grant of jsonData.grants){\r",
															"//             pm.expect(jsonData.grants).to.exist;\r",
															"\r",
															"//             // pm.expect(grant).to.be(array);\r",
															"//             // pm.expect(grant.user).to.be(object);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"//         for (let stig of jsonData.stigs){\r",
															"//             // pm.expect(stig).to.be(object);\r",
															"//             pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
															"//         // console.log(\"checking owners projection\");\r",
															"//         pm.expect(jsonData.owners).to.exist;\r",
															"\r",
															"//         for (let owner of jsonData.owners){\r",
															"//             // pm.expect(owner).to.be(array);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.statistics).to.exist;\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=labels/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.labels).to.exist;\r",
															"//         if (user == \"lvl1\" ) {\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"//             pm.expect(jsonData.labels[0].uses).to.equal(1);\r",
															"//             pm.expect(jsonData.labels[1].uses).to.equal(1);\r",
															"\r",
															"//         }\r",
															"//         else{\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"\r",
															"//         }            \r",
															"\r",
															"//     }\r",
															"//     // };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metrics",
														"summary"
													],
													"query": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"disabled": true
														},
														{
															"key": "labelId",
															"value": "{{testLabel}}",
															"disabled": true
														},
														{
															"key": "labelName",
															"value": "{{testLabelName-lvl1}}",
															"disabled": true
														},
														{
															"key": "labelName",
															"value": "{{testLabelName}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return summary metrics for the Collection - asset param - no agg",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"// // let stigKeys = [\r",
															"// //     \"title\",\r",
															"// //     \"ruleCount\",\r",
															"// //     \"benchmarkId\",\r",
															"// //     \"lastRevisionDate\",\r",
															"// //     \"lastRevisionStr\",\r",
															"// //     \"assetCount\",\r",
															"// //     \"acceptedCount\",\r",
															"// //     \"rejectedCount\",\r",
															"// //     \"submittedCount\",\r",
															"// //     \"savedCount\",\r",
															"// //     \"minTs\",\r",
															"// //     \"maxTs\"\r",
															"// // ]\r",
															"\r",
															"// let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     for (let stig of jsonData){\r",
															"//         // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"//         pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//     };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let jsonData = pm.response.json();\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
															"let testLabel = pm.environment.get(\"testLabel\");\r",
															"let testLabelName = pm.environment.get(\"testLabelName\");\r",
															"\r",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Check that proper assets are returned\", function () {\r",
															"    for (let item of jsonData){\r",
															"            console.log( \"testing: \" + item.name) \r",
															"\r",
															"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"        var regex = new RegExp(assetMatchString);\r",
															"        pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
															"            pm.expect(item.name).to.match(regex);\r",
															"        });\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
															"                pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
															"            })\r",
															"        }\r",
															"        if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
															"                pm.expect(item.assetId).to.eql(testAsset);\r",
															"            })\r",
															"        }   \r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
															"                let responseLabels = [];\r",
															"                for (let label of item.labels) {\r",
															"                    responseLabels.push(label.labelId)\r",
															"                }\r",
															"                pm.expect(responseLabels).to.include(testLabel);\r",
															"            })\r",
															"        }           \r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
															"                let responseLabels = [];\r",
															"                for (let label of item.labels) {\r",
															"                    responseLabels.push(label.name)\r",
															"                }\r",
															"                pm.expect(responseLabels).to.include(testLabelName);\r",
															"            })\r",
															"        }              \r",
															"\r",
															"    if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
															"        // if (item.assetId ==  testAsset ) {\r",
															"            console.log( \"found Collection_X_lvl1_asset\") \r",
															"\r",
															"            pm.test(\"Check some stats - findings, low\", function () {\r",
															"                pm.expect(item.metrics.findings.low).to.equal(1);\r",
															"            });\r",
															"\r",
															"            pm.test(\"Check some stats - results - NA\", function () {\r",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(1);\r",
															"            });        \r",
															"            pm.test(\"Check some stats - results - pass\", function () {\r",
															"                pm.expect(item.metrics.results.pass).to.equal(2);\r",
															"            });        \r",
															"\r",
															"        pm.test(\"Check some stats - results - fail\", function () {\r",
															"                pm.expect(item.metrics.results.fail).to.equal(3);\r",
															"            });        \r",
															"\r",
															"        pm.test(\"Check some stats - status - submitted\", function () {\r",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(5);\r",
															"            });     \r",
															"        pm.test(\"Check some stats - assessments\", function () {\r",
															"                pm.expect(item.metrics.assessments).to.equal(testChecklistLength);\r",
															"            });             \r",
															"        pm.test(\"Check some stats - assessed\", function () {\r",
															"                pm.expect(item.metrics.assessed).to.equal(6);\r",
															"            });                          \r",
															"\r",
															"        }\r",
															"    }\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"    \r",
															"\r",
															"    \r",
															"// }\r",
															"\r",
															"return;\r",
															"\r",
															"// if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//     pm.expect(jsonData.stigs).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
															"//     pm.expect(jsonData.history).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
															"//     pm.expect(jsonData.rule).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
															"//     pm.expect(jsonData.metadata).to.exist;\r",
															"// }\r",
															"// pm.test(\"Check if object contains all provided keys\", function () {\r",
															"//     // pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check if object contains proper ruleId\", function () {\r",
															"//     let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"//     pm.expect(jsonData.ruleId).to.eql(testRuleId);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check review comment for regex match string\", function () {\r",
															"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
															"//     var regex = new RegExp(reviewMatchString);\r",
															"//     pm.expect(jsonData.detail).to.match(regex);\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     // for (let item of jsonData){\r",
															"//     let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"//     var regex = new RegExp(collectionMatchString);\r",
															"//     pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//         pm.expect(jsonData.name).to.match(regex);\r",
															"//     });\r",
															"\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
															"//         pm.expect(jsonData.assets).to.exist;\r",
															"\r",
															"//         let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"//         var assetRegex = new RegExp(assetMatchString);\r",
															"//         for (let asset of jsonData.assets){\r",
															"//             // pm.expect(asset).to.have.property('name');\r",
															"//             // pm.expect(asset).to.have.property('assetId');\r",
															"//             pm.expect(asset.name).to.match(assetRegex);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
															"//         for (let grant of jsonData.grants){\r",
															"//             pm.expect(jsonData.grants).to.exist;\r",
															"\r",
															"//             // pm.expect(grant).to.be(array);\r",
															"//             // pm.expect(grant.user).to.be(object);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"//         for (let stig of jsonData.stigs){\r",
															"//             // pm.expect(stig).to.be(object);\r",
															"//             pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
															"//         // console.log(\"checking owners projection\");\r",
															"//         pm.expect(jsonData.owners).to.exist;\r",
															"\r",
															"//         for (let owner of jsonData.owners){\r",
															"//             // pm.expect(owner).to.be(array);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.statistics).to.exist;\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=labels/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.labels).to.exist;\r",
															"//         if (user == \"lvl1\" ) {\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"//             pm.expect(jsonData.labels[0].uses).to.equal(1);\r",
															"//             pm.expect(jsonData.labels[1].uses).to.equal(1);\r",
															"\r",
															"//         }\r",
															"//         else{\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"\r",
															"//         }            \r",
															"\r",
															"//     }\r",
															"//     // };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary?assetId={{testAsset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metrics",
														"summary"
													],
													"query": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														},
														{
															"key": "labelId",
															"value": "{{testLabel}}",
															"disabled": true
														},
														{
															"key": "labelName",
															"value": "{{testLabelName-lvl1}}",
															"disabled": true
														},
														{
															"key": "labelName",
															"value": "{{testLabelName}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return summary metrics for the Collection - labelId param - no agg",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"// // let stigKeys = [\r",
															"// //     \"title\",\r",
															"// //     \"ruleCount\",\r",
															"// //     \"benchmarkId\",\r",
															"// //     \"lastRevisionDate\",\r",
															"// //     \"lastRevisionStr\",\r",
															"// //     \"assetCount\",\r",
															"// //     \"acceptedCount\",\r",
															"// //     \"rejectedCount\",\r",
															"// //     \"submittedCount\",\r",
															"// //     \"savedCount\",\r",
															"// //     \"minTs\",\r",
															"// //     \"maxTs\"\r",
															"// // ]\r",
															"\r",
															"// let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     for (let stig of jsonData){\r",
															"//         // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"//         pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//     };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let jsonData = pm.response.json();\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
															"let testLabel = pm.environment.get(\"testLabel\");\r",
															"let testLabelName = pm.environment.get(\"testLabelName\");\r",
															"\r",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Check that proper assets are returned\", function () {\r",
															"    for (let item of jsonData){\r",
															"            console.log( \"testing: \" + item.name) \r",
															"\r",
															"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"        var regex = new RegExp(assetMatchString);\r",
															"        pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
															"            pm.expect(item.name).to.match(regex);\r",
															"        });\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
															"                pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
															"            })\r",
															"        }\r",
															"        if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
															"                pm.expect(item.assetId).to.eql(testAsset);\r",
															"            })\r",
															"        }   \r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
															"                let responseLabels = [];\r",
															"                for (let label of item.labels) {\r",
															"                    responseLabels.push(label.labelId)\r",
															"                }\r",
															"                pm.expect(responseLabels).to.include(testLabel);\r",
															"            })\r",
															"        }           \r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
															"                let responseLabels = [];\r",
															"                for (let label of item.labels) {\r",
															"                    responseLabels.push(label.name)\r",
															"                }\r",
															"                pm.expect(responseLabels).to.include(testLabelName);\r",
															"            })\r",
															"        }              \r",
															"\r",
															"    if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
															"        // if (item.assetId ==  testAsset ) {\r",
															"            console.log( \"found Collection_X_lvl1_asset\") \r",
															"\r",
															"            pm.test(\"Check some stats - findings, low\", function () {\r",
															"                pm.expect(item.metrics.findings.low).to.equal(1);\r",
															"            });\r",
															"\r",
															"            pm.test(\"Check some stats - results - NA\", function () {\r",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(1);\r",
															"            });        \r",
															"            pm.test(\"Check some stats - results - pass\", function () {\r",
															"                pm.expect(item.metrics.results.pass).to.equal(2);\r",
															"            });        \r",
															"\r",
															"        pm.test(\"Check some stats - results - fail\", function () {\r",
															"                pm.expect(item.metrics.results.fail).to.equal(3);\r",
															"            });        \r",
															"\r",
															"        pm.test(\"Check some stats - status - submitted\", function () {\r",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(5);\r",
															"            });     \r",
															"        pm.test(\"Check some stats - assessments\", function () {\r",
															"                pm.expect(item.metrics.assessments).to.equal(testChecklistLength);\r",
															"            });             \r",
															"        pm.test(\"Check some stats - assessed\", function () {\r",
															"                pm.expect(item.metrics.assessed).to.equal(6);\r",
															"            });                          \r",
															"\r",
															"        }\r",
															"    }\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"    \r",
															"\r",
															"    \r",
															"// }\r",
															"\r",
															"return;\r",
															"\r",
															"// if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//     pm.expect(jsonData.stigs).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
															"//     pm.expect(jsonData.history).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
															"//     pm.expect(jsonData.rule).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
															"//     pm.expect(jsonData.metadata).to.exist;\r",
															"// }\r",
															"// pm.test(\"Check if object contains all provided keys\", function () {\r",
															"//     // pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check if object contains proper ruleId\", function () {\r",
															"//     let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"//     pm.expect(jsonData.ruleId).to.eql(testRuleId);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check review comment for regex match string\", function () {\r",
															"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
															"//     var regex = new RegExp(reviewMatchString);\r",
															"//     pm.expect(jsonData.detail).to.match(regex);\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     // for (let item of jsonData){\r",
															"//     let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"//     var regex = new RegExp(collectionMatchString);\r",
															"//     pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//         pm.expect(jsonData.name).to.match(regex);\r",
															"//     });\r",
															"\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
															"//         pm.expect(jsonData.assets).to.exist;\r",
															"\r",
															"//         let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"//         var assetRegex = new RegExp(assetMatchString);\r",
															"//         for (let asset of jsonData.assets){\r",
															"//             // pm.expect(asset).to.have.property('name');\r",
															"//             // pm.expect(asset).to.have.property('assetId');\r",
															"//             pm.expect(asset.name).to.match(assetRegex);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
															"//         for (let grant of jsonData.grants){\r",
															"//             pm.expect(jsonData.grants).to.exist;\r",
															"\r",
															"//             // pm.expect(grant).to.be(array);\r",
															"//             // pm.expect(grant.user).to.be(object);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"//         for (let stig of jsonData.stigs){\r",
															"//             // pm.expect(stig).to.be(object);\r",
															"//             pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
															"//         // console.log(\"checking owners projection\");\r",
															"//         pm.expect(jsonData.owners).to.exist;\r",
															"\r",
															"//         for (let owner of jsonData.owners){\r",
															"//             // pm.expect(owner).to.be(array);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.statistics).to.exist;\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=labels/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.labels).to.exist;\r",
															"//         if (user == \"lvl1\" ) {\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"//             pm.expect(jsonData.labels[0].uses).to.equal(1);\r",
															"//             pm.expect(jsonData.labels[1].uses).to.equal(1);\r",
															"\r",
															"//         }\r",
															"//         else{\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"\r",
															"//         }            \r",
															"\r",
															"//     }\r",
															"//     // };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary?labelId={{testLabel}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metrics",
														"summary"
													],
													"query": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"disabled": true
														},
														{
															"key": "labelId",
															"value": "{{testLabel}}"
														},
														{
															"key": "labelName",
															"value": "{{testLabelName}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return summary metrics for the Collection - laelName param - no agg",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"// // let stigKeys = [\r",
															"// //     \"title\",\r",
															"// //     \"ruleCount\",\r",
															"// //     \"benchmarkId\",\r",
															"// //     \"lastRevisionDate\",\r",
															"// //     \"lastRevisionStr\",\r",
															"// //     \"assetCount\",\r",
															"// //     \"acceptedCount\",\r",
															"// //     \"rejectedCount\",\r",
															"// //     \"submittedCount\",\r",
															"// //     \"savedCount\",\r",
															"// //     \"minTs\",\r",
															"// //     \"maxTs\"\r",
															"// // ]\r",
															"\r",
															"// let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     for (let stig of jsonData){\r",
															"//         // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"//         pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//     };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let jsonData = pm.response.json();\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
															"let testLabel = pm.environment.get(\"testLabel\");\r",
															"let testLabelName = pm.environment.get(\"testLabelName\");\r",
															"\r",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Check that proper assets are returned\", function () {\r",
															"    for (let item of jsonData){\r",
															"            console.log( \"testing: \" + item.name) \r",
															"\r",
															"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"        var regex = new RegExp(assetMatchString);\r",
															"        pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
															"            pm.expect(item.name).to.match(regex);\r",
															"        });\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
															"                pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
															"            })\r",
															"        }\r",
															"        if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
															"                pm.expect(item.assetId).to.eql(testAsset);\r",
															"            })\r",
															"        }   \r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
															"                let responseLabels = [];\r",
															"                for (let label of item.labels) {\r",
															"                    responseLabels.push(label.labelId)\r",
															"                }\r",
															"                pm.expect(responseLabels).to.include(testLabel);\r",
															"            })\r",
															"        }           \r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
															"                let responseLabels = [];\r",
															"                for (let label of item.labels) {\r",
															"                    responseLabels.push(label.name)\r",
															"                }\r",
															"                pm.expect(responseLabels).to.include(testLabelName);\r",
															"            })\r",
															"        }              \r",
															"\r",
															"    if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
															"        // if (item.assetId ==  testAsset ) {\r",
															"            console.log( \"found Collection_X_lvl1_asset\") \r",
															"\r",
															"            pm.test(\"Check some stats - findings, low\", function () {\r",
															"                pm.expect(item.metrics.findings.low).to.equal(1);\r",
															"            });\r",
															"\r",
															"            pm.test(\"Check some stats - results - NA\", function () {\r",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(1);\r",
															"            });        \r",
															"            pm.test(\"Check some stats - results - pass\", function () {\r",
															"                pm.expect(item.metrics.results.pass).to.equal(2);\r",
															"            });        \r",
															"\r",
															"        pm.test(\"Check some stats - results - fail\", function () {\r",
															"                pm.expect(item.metrics.results.fail).to.equal(3);\r",
															"            });        \r",
															"\r",
															"        pm.test(\"Check some stats - status - submitted\", function () {\r",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(5);\r",
															"            });     \r",
															"        pm.test(\"Check some stats - assessments\", function () {\r",
															"                pm.expect(item.metrics.assessments).to.equal(testChecklistLength);\r",
															"            });             \r",
															"        pm.test(\"Check some stats - assessed\", function () {\r",
															"                pm.expect(item.metrics.assessed).to.equal(6);\r",
															"            });                          \r",
															"\r",
															"        }\r",
															"    }\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"    \r",
															"\r",
															"    \r",
															"// }\r",
															"\r",
															"return;\r",
															"\r",
															"// if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//     pm.expect(jsonData.stigs).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
															"//     pm.expect(jsonData.history).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
															"//     pm.expect(jsonData.rule).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
															"//     pm.expect(jsonData.metadata).to.exist;\r",
															"// }\r",
															"// pm.test(\"Check if object contains all provided keys\", function () {\r",
															"//     // pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check if object contains proper ruleId\", function () {\r",
															"//     let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"//     pm.expect(jsonData.ruleId).to.eql(testRuleId);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check review comment for regex match string\", function () {\r",
															"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
															"//     var regex = new RegExp(reviewMatchString);\r",
															"//     pm.expect(jsonData.detail).to.match(regex);\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     // for (let item of jsonData){\r",
															"//     let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"//     var regex = new RegExp(collectionMatchString);\r",
															"//     pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//         pm.expect(jsonData.name).to.match(regex);\r",
															"//     });\r",
															"\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
															"//         pm.expect(jsonData.assets).to.exist;\r",
															"\r",
															"//         let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"//         var assetRegex = new RegExp(assetMatchString);\r",
															"//         for (let asset of jsonData.assets){\r",
															"//             // pm.expect(asset).to.have.property('name');\r",
															"//             // pm.expect(asset).to.have.property('assetId');\r",
															"//             pm.expect(asset.name).to.match(assetRegex);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
															"//         for (let grant of jsonData.grants){\r",
															"//             pm.expect(jsonData.grants).to.exist;\r",
															"\r",
															"//             // pm.expect(grant).to.be(array);\r",
															"//             // pm.expect(grant.user).to.be(object);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"//         for (let stig of jsonData.stigs){\r",
															"//             // pm.expect(stig).to.be(object);\r",
															"//             pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
															"//         // console.log(\"checking owners projection\");\r",
															"//         pm.expect(jsonData.owners).to.exist;\r",
															"\r",
															"//         for (let owner of jsonData.owners){\r",
															"//             // pm.expect(owner).to.be(array);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.statistics).to.exist;\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=labels/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.labels).to.exist;\r",
															"//         if (user == \"lvl1\" ) {\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"//             pm.expect(jsonData.labels[0].uses).to.equal(1);\r",
															"//             pm.expect(jsonData.labels[1].uses).to.equal(1);\r",
															"\r",
															"//         }\r",
															"//         else{\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"\r",
															"//         }            \r",
															"\r",
															"//     }\r",
															"//     // };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary?labelName={{testLabelName}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metrics",
														"summary"
													],
													"query": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"disabled": true
														},
														{
															"key": "labelId",
															"value": "{{testLabel}}",
															"disabled": true
														},
														{
															"key": "labelName",
															"value": "{{testLabelName-lvl1}}",
															"disabled": true
														},
														{
															"key": "labelName",
															"value": "{{testLabelName}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "detail",
									"item": [
										{
											"name": "asset agg - detail",
											"item": [
												{
													"name": "Return detail metrics - assset agg",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/asset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"asset"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - asset agg - with params",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/asset?benchmarkId={{testBenchmark}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"asset"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - asset agg - with param assetId",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/asset?assetId={{testAsset}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"asset"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - asset agg - with param labelId",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/asset?labelId={{testLabel}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"asset"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - asset agg - with params labelName",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/asset?labelName={{testLabelName-lvl1}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"asset"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - asset agg - with params - all",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/asset?benchmarkId={{testBenchmark}}&assetId={{testAsset}}&labelId={{testLabel}}&labelName={{testLabelName-lvl1}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"asset"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"",
															"let jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Response JSON is an array\", function () {",
															"    pm.expect(jsonData).to.be.an('array');",
															"});",
															"",
															"",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");",
															"let testLabel = pm.environment.get(\"testLabel\");",
															"let testLabelName = pm.environment.get(\"testLabelName\");",
															"",
															"",
															"//reference metrics",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));",
															"let testTotalAssessmentsForTestAsset = 368;",
															"",
															"if (user == \"lvl1\" ) {",
															"    testTotalAssessmentsForTestAsset = testChecklistLength;",
															"",
															"}",
															"",
															"",
															"    let metricsReferenceCommon = {",
															"        assessed: 9,",
															"        assessments: testChecklistLength,",
															"        maxTs: \"2022-02-03T00:07:05Z\",",
															"        minTs: \"2020-08-11T22:27:26Z\",",
															"        results: {",
															"            fail: {",
															"                total: 4,",
															"                resultEngine: 0",
															"            },",
															"            pass: {",
															"                total: 4,",
															"                resultEngine: 0",
															"            },",
															"            error: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            fixed: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            unknown: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notchecked: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notselected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            informational: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notapplicable: {",
															"                total: 1,",
															"                resultEngine: 0",
															"            }",
															"        },",
															"        findings: {",
															"            low: 1,",
															"            medium: 3,",
															"            high: 0",
															"        },    ",
															"        statuses: {",
															"            saved: {",
															"                total: 2,",
															"                resultEngine: 0",
															"            },",
															"            accepted: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            rejected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            submitted: {",
															"                total: 7,",
															"                resultEngine: 0",
															"            }",
															"        }\t ",
															"    }",
															"",
															"",
															"",
															"",
															"// Checking that response fulfills parameter requests",
															"for (let item of jsonData){",
															"    console.log( \"testing: \" + item.name) ",
															"    ",
															"    //are we aggregating",
															"    let checkMetricsData = false",
															"    console.log( \"asset agg \") ",
															"    if (item.assetId ==  testAsset) {",
															"        checkMetricsData = true",
															"    }",
															"    ",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"        metricsReferenceCommon.assessments = testChecklistLength            ",
															"",
															"        ",
															"",
															"    }",
															"    else {",
															"        metricsReferenceCommon.assessments = testTotalAssessmentsForTestAsset            ",
															"",
															"    }",
															"",
															"    let assetMatchString = pm.environment.get(\"assetMatchString\");",
															"    var regex = new RegExp(assetMatchString);",
															"    pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {",
															"        pm.expect(item.name).to.match(regex);",
															"    });",
															"",
															"    // pm.test(\"verify parameter restricted response properly - benchmark\", function () {",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - benchmark\", function () {",
															"",
															"            pm.expect(item.benchmarkIds).to.include(testBenchmark);",
															"            if (user == \"lvl1\" ) {",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"            //   metricsReferenceCommon.findings.low = 2",
															"            //   metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"             }",
															"            else {",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"            //   metricsReferenceCommon.findings.low = 2",
															"            //   metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"",
															"                ",
															"            }                  ",
															"          })",
															"",
															"        }",
															"        // else if (checkMetricsData == true){",
															"        //     pm.expect(item.benchmarkIds).to.include(testBenchmark);",
															"        // }",
															"",
															"",
															"",
															"    else if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - assetId\", function () {",
															"            pm.expect(item.assetId).to.eql(testAsset);",
															"        })",
															"            if (user == \"lvl1\" ) {",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"            //   metricsReferenceCommon.findings.low = 2",
															"            //   metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"             }        ",
															"    }   ",
															"",
															"    else if (pm.request.url.getQueryString().match(/labelId=/) || pm.request.url.getQueryString().match(/labelName=/)) {",
															"        pm.test(\"verify parameter restricted response properly - labelId or labelname\", function () {",
															"            let responseLabels = [];",
															"            for (let label of item.labels) {",
															"                responseLabels.push(label.labelId)",
															"            }",
															"            pm.expect(responseLabels).to.include(testLabel);",
															"        })",
															"            if (user == \"lvl1\" ) {",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"            //   metricsReferenceCommon.findings.low = 2",
															"            //   metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"             }        ",
															"    }           ",
															"    else {",
															"            if (user == \"lvl1\" ) {",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"            //   metricsReferenceCommon.findings.low = 2",
															"            //   metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"             }",
															"",
															"    }",
															"",
															"    // if (pm.request.url.getQueryString().match(/labelName=/)) {",
															"    //     pm.test(\"verify parameter restricted response properly - labelName\", function () {",
															"    //         let responseLabels = [];",
															"    //         for (let label of item.labels) {",
															"    //             responseLabels.push(label.name)",
															"    //         }",
															"    //         pm.expect(responseLabels).to.include(testLabelName);",
															"    //     })",
															"    // }              ",
															"    ",
															"    metricsReferenceCommon.results.unassessed = {",
															"        total:  metricsReferenceCommon.results.informational.total + ",
															"                metricsReferenceCommon.results.notselected.total + ",
															"                metricsReferenceCommon.results.notchecked.total + ",
															"                metricsReferenceCommon.results.error.total + ",
															"                metricsReferenceCommon.results.fixed.total",
															"    }",
															"",
															"    if (pm.request.url.getPath().match(/summary/)) {",
															"        console.log(\"checking summary metrics - checkflag: \" + checkMetricsData )",
															"        // if (item.assetId ==  testAsset){",
															"        if (checkMetricsData ==  true){",
															"            console.log(\"checking metrics data\")        // if (item.benchmarkId == testBenchmark) {",
															"            // if (item.assetId ==  testAsset ) {",
															"            console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - unassessed\", function () {",
															"                pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"    // }",
															"    }",
															"",
															"//Checking that metric details are correct",
															"    if (pm.request.url.getPath().match(/detail/)) {",
															"        if (checkMetricsData ==  true){",
															"            // if (item.assetId ==  testAsset ) {",
															"            console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - informational\", function () {",
															"                pm.expect(item.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notchecked\", function () {",
															"                pm.expect(item.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notselected\", function () {",
															"                pm.expect(item.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - error\", function () {",
															"                pm.expect(item.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);",
															"            });    ",
															"            pm.test(\"Check some stats - results - fixed\", function () {",
															"                pm.expect(item.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);",
															"            });                 ",
															"",
															"            // pm.test(\"Check some stats - results - unassessed\", function () {",
															"            //     pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            // });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"",
															"    }",
															"",
															"",
															"}",
															"",
															"",
															"",
															"return;",
															"",
															"",
															""
														]
													}
												}
											]
										},
										{
											"name": "stig agg - detail",
											"item": [
												{
													"name": "Return detail metrics - stig agg",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/stig",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"stig"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - stig agg - param benchmark",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/stig?benchmarkId={{testBenchmark}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"stig"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - stig agg - param asset",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/stig?assetId={{testAsset}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"stig"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - stig agg - param labelId",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/stig?labelId={{testLabel}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"stig"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - stig agg - param labelName",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/stig?labelName={{testLabelName}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"stig"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"",
															"let jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Response JSON is an array\", function () {",
															"    pm.expect(jsonData).to.be.an('array');",
															"});",
															"",
															"",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");",
															"let testLabel = pm.environment.get(\"testLabel\");",
															"let testLabelName = pm.environment.get(\"testLabelName\");",
															"",
															"",
															"//reference metrics",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));",
															"let testTotalAssessmentsForTestAsset = 368;",
															"let testTotalAssessmentsForTestSTIG = testChecklistLength * 3;",
															"// let testTotalAssessmentsForCollection = 1014;",
															"",
															"",
															"    let metricsReferenceCommon = {",
															"        assets: 3,",
															"        assessed: 14,",
															"        assessments: testTotalAssessmentsForTestSTIG,",
															"        maxTs: \"2022-02-03T00:07:05Z\",",
															"        minTs: \"2020-08-11T22:27:26Z\",",
															"        results: {",
															"            fail: {",
															"                total: 7,",
															"                resultEngine: 0",
															"            },",
															"            pass: {",
															"                total: 3,",
															"                resultEngine: 0",
															"            },",
															"            error: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            fixed: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            unknown: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notchecked: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notselected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            informational: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notapplicable: {",
															"                total: 4,",
															"                resultEngine: 0",
															"            }",
															"        },",
															"        findings: {",
															"            low: 2,",
															"            medium: 5,",
															"            high: 0",
															"        },    ",
															"        statuses: {",
															"            saved: {",
															"                total: 5,",
															"                resultEngine: 0",
															"            },",
															"            accepted: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            rejected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            submitted: {",
															"                total: 9,",
															"                resultEngine: 0",
															"            }",
															"        }\t ",
															"    }",
															"",
															"",
															"",
															"// Checking that response fulfills parameter requests",
															"for (let item of jsonData){",
															"    console.log( \"testing: \" + item.name) ",
															"    ",
															"    let checkMetricsData = false",
															"    console.log( \"stig agg \") ",
															"    if (item.benchmarkId ==  testBenchmark) {",
															"        console.log( \"found test benchmark item \") ",
															"",
															"        checkMetricsData = true",
															"    }",
															"    ",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"        metricsReferenceCommon.assessments = testChecklistLength            ",
															"",
															"    }",
															"    else {",
															"        // metricsReferenceCommon.assessments = testTotalAssessmentsForTestAsset         ",
															"",
															"    }",
															"",
															"",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - benchmark\", function () {",
															"            pm.expect(jsonData.length).to.eql(1);",
															"            pm.expect(item.benchmarkId).to.eql(testBenchmark);  ",
															"            if (user == \"lvl1\" ) {",
															"              metricsReferenceCommon.assessed = 11",
															"              metricsReferenceCommon.assessments = 162",
															"              metricsReferenceCommon.results.fail.total = 6",
															"              metricsReferenceCommon.results.pass.total = 3",
															"              metricsReferenceCommon.results.notapplicable.total = 2",
															"              metricsReferenceCommon.statuses.saved.total = 4",
															"              metricsReferenceCommon.statuses.accepted.total = 0",
															"              metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 7",
															"              metricsReferenceCommon.findings.low = 2",
															"              metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 4",
															"             }                   ",
															"",
															"        })",
															"    }  ",
															"    else {",
															"        pm.test(\"verify parameter restricted response properly - no benchmark param\", function () {",
															"            console.log(user)",
															"        if (user == \"lvl1\" ) {",
															"            console.log(\"in lvl1 check block\")",
															"",
															"            pm.expect(jsonData.length).to.eql(1);",
															"//    if (user == \"lvl1\" ) {",
															"        metricsReferenceCommon.assessed = 11",
															"        metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"        metricsReferenceCommon.results.fail.total = 6",
															"        metricsReferenceCommon.results.pass.total = 3",
															"        metricsReferenceCommon.results.notapplicable.total = 2",
															"        metricsReferenceCommon.statuses.saved.total = 4",
															"        metricsReferenceCommon.statuses.accepted.total = 0",
															"        metricsReferenceCommon.statuses.rejected.total = 0",
															"        metricsReferenceCommon.statuses.submitted.total = 7",
															"        metricsReferenceCommon.findings.low = 2",
															"        metricsReferenceCommon.findings.high = 0",
															"        metricsReferenceCommon.findings.medium = 4",
															"//    }                     ",
															"",
															"        }            ",
															"        else{",
															"            pm.expect(jsonData.length).to.eql(2);",
															"        }",
															"        })",
															"    }",
															"",
															"",
															"",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - assetId\", function () {",
															"",
															"",
															"          if (user == \"lvl1\" ) {",
															"            pm.expect(jsonData.length).to.eql(1);",
															"            pm.expect(item.assets).to.eql(1);",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"              metricsReferenceCommon.statuses.accepted.total = 0",
															"              metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5",
															"              metricsReferenceCommon.findings.low = 1",
															"              metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"          }",
															"        else {",
															"          pm.expect(jsonData.length).to.eql(2);",
															"          pm.expect(item.assets).to.eql(1);",
															"          metricsReferenceCommon.assessed = 6",
															"          metricsReferenceCommon.assessments = testChecklistLength",
															"          metricsReferenceCommon.results.fail.total = 3",
															"          metricsReferenceCommon.results.pass.total = 2",
															"          metricsReferenceCommon.results.notapplicable.total = 1",
															"          metricsReferenceCommon.statuses.saved.total = 1",
															"          metricsReferenceCommon.statuses.accepted.total = 0",
															"          metricsReferenceCommon.statuses.rejected.total = 0",
															"          metricsReferenceCommon.statuses.submitted.total = 5     ",
															"          metricsReferenceCommon.findings.low = 1",
															"          metricsReferenceCommon.findings.high = 0",
															"          metricsReferenceCommon.findings.medium = 2     ",
															"",
															"        }    ",
															"      })",
															"         ",
															"        ",
															"    }   ",
															"",
															"    if (pm.request.url.getQueryString().match(/labelId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - labelId\", function () {",
															"",
															"       ",
															"",
															"      if (user == \"lvl1\" ) {",
															"        pm.expect(jsonData.length).to.eql(1);",
															"        pm.expect(item.assets).to.eql(1);",
															"        metricsReferenceCommon.assessed = 6",
															"        metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"        metricsReferenceCommon.results.fail.total = 3",
															"        metricsReferenceCommon.results.pass.total = 2",
															"        metricsReferenceCommon.results.notapplicable.total = 1",
															"        metricsReferenceCommon.statuses.saved.total = 1",
															"        metricsReferenceCommon.statuses.accepted.total = 0",
															"        metricsReferenceCommon.statuses.rejected.total = 0",
															"        metricsReferenceCommon.statuses.submitted.total = 5",
															"        metricsReferenceCommon.findings.low = 1",
															"        metricsReferenceCommon.findings.high = 0",
															"        metricsReferenceCommon.findings.medium = 2",
															"      }       ",
															"      else {",
															"        pm.expect(jsonData.length).to.eql(2);",
															"        pm.expect(item.assets).to.eql(2);",
															"        metricsReferenceCommon.assessed = 9",
															"        metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"        metricsReferenceCommon.results.fail.total = 4",
															"        metricsReferenceCommon.results.pass.total = 2",
															"        metricsReferenceCommon.results.notapplicable.total = 3",
															"        metricsReferenceCommon.statuses.saved.total = 2",
															"        metricsReferenceCommon.statuses.accepted.total = 0",
															"        metricsReferenceCommon.statuses.rejected.total = 0",
															"        metricsReferenceCommon.statuses.submitted.total = 7",
															"        metricsReferenceCommon.findings.low = 1",
															"        metricsReferenceCommon.findings.high = 0",
															"        metricsReferenceCommon.findings.medium = 3 ",
															"      }",
															"     })",
															"",
															"    }           ",
															"",
															"    if (pm.request.url.getQueryString().match(/labelName=/)) {",
															"        pm.test(\"verify parameter restricted response properly - labelName\", function () {",
															"",
															"",
															"",
															"      if (user == \"lvl1\" ) {",
															"        pm.expect(jsonData.length).to.eql(1);",
															"        pm.expect(item.assets).to.eql(1);",
															"        metricsReferenceCommon.assessed = 6",
															"        metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"        metricsReferenceCommon.results.fail.total = 3",
															"        metricsReferenceCommon.results.pass.total = 2",
															"        metricsReferenceCommon.results.notapplicable.total = 1",
															"        metricsReferenceCommon.statuses.saved.total = 1",
															"        metricsReferenceCommon.statuses.accepted.total = 0",
															"        metricsReferenceCommon.statuses.rejected.total = 0",
															"        metricsReferenceCommon.statuses.submitted.total = 5",
															"        metricsReferenceCommon.findings.low = 1",
															"        metricsReferenceCommon.findings.high = 0",
															"        metricsReferenceCommon.findings.medium = 2",
															"      }    ",
															"    else {",
															"      pm.expect(jsonData.length).to.eql(2);",
															"      pm.expect(item.assets).to.eql(2);",
															"      metricsReferenceCommon.assessed = 9",
															"      metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"      metricsReferenceCommon.results.fail.total = 4",
															"      metricsReferenceCommon.results.pass.total = 2",
															"      metricsReferenceCommon.results.notapplicable.total = 3",
															"      metricsReferenceCommon.statuses.saved.total = 2",
															"      metricsReferenceCommon.statuses.accepted.total = 0",
															"      metricsReferenceCommon.statuses.rejected.total = 0",
															"      metricsReferenceCommon.statuses.submitted.total = 7",
															"      metricsReferenceCommon.findings.low = 1",
															"      metricsReferenceCommon.findings.high = 0",
															"      metricsReferenceCommon.findings.medium = 3 ",
															"",
															"    }",
															"  })",
															"",
															"    }            ",
															"     ",
															"    metricsReferenceCommon.results.unassessed = {",
															"        total:  metricsReferenceCommon.results.informational.total + ",
															"                metricsReferenceCommon.results.notselected.total + ",
															"                metricsReferenceCommon.results.notchecked.total + ",
															"                metricsReferenceCommon.results.error.total + ",
															"                metricsReferenceCommon.results.fixed.total",
															"    }",
															"    if (pm.request.url.getPath().match(/summary/)) {",
															"        console.log(\"checking summary metrics - checkflag: \" + checkMetricsData )",
															"        // if (item.assetId ==  testAsset){",
															"        if (checkMetricsData ==  true){",
															"            console.log(\"checking metrics data\")        // if (item.benchmarkId == testBenchmark) {",
															"            // if (item.assetId ==  testAsset ) {",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - unassessed\", function () {",
															"                pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"    // }",
															"    }",
															"",
															"//Checking that metric details are correct",
															"    if (pm.request.url.getPath().match(/detail/)) {",
															"        if (checkMetricsData ==  true){",
															"            // if (item.assetId ==  testAsset ) {",
															"            console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - informational\", function () {",
															"                pm.expect(item.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notchecked\", function () {",
															"                pm.expect(item.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notselected\", function () {",
															"                pm.expect(item.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - error\", function () {",
															"                pm.expect(item.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);",
															"            });    ",
															"            pm.test(\"Check some stats - results - fixed\", function () {",
															"                pm.expect(item.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);",
															"            });                 ",
															"",
															"            // pm.test(\"Check some stats - results - unassessed\", function () {",
															"            //     pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            // });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"",
															"    }",
															"",
															"",
															"}",
															"",
															"",
															"",
															"return;",
															"",
															"",
															""
														]
													}
												}
											]
										},
										{
											"name": "Collection agg - detail",
											"item": [
												{
													"name": "Return detail metrics - collection agg - no params",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/collection",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"collection"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - collection agg - benchmark param",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/collection?benchmarkId={{testBenchmark}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"collection"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - collection agg - asset param",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/collection?assetId={{testAsset}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"collection"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName-lvl1}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - collection agg - labelId param",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/collection?labelId={{testLabel}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"collection"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - collection agg - label name param",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/collection?labelName={{testLabelName}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"collection"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"",
															"let jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Response JSON is an object\", function () {",
															"    pm.expect(jsonData).to.be.an('object');",
															"});",
															"",
															"",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");",
															"let testLabel = pm.environment.get(\"testLabel\");",
															"let testLabelName = pm.environment.get(\"testLabelName\");",
															"",
															"",
															"//reference metrics",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));",
															"let testTotalAssessmentsForTestAsset = 368;",
															"let testTotalAssessmentsForTestSTIG = testChecklistLength * 3;",
															"let testTotalAssessmentsForCollection = 1104;",
															"",
															"",
															"    let metricsReferenceCommon = {",
															"        assets: 4,",
															"        checklists: 6,",
															"        assessed: 17,",
															"        assessments: testTotalAssessmentsForCollection,",
															"        maxTs: \"2022-02-03T00:07:05Z\",",
															"        minTs: \"2020-08-11T22:27:26Z\",",
															"        results: {",
															"            fail: {",
															"                total: 8,",
															"                resultEngine: 0",
															"            },",
															"            pass: {",
															"                total: 5,",
															"                resultEngine: 0",
															"            },",
															"            error: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            fixed: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            unknown: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notchecked: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notselected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            informational: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notapplicable: {",
															"                total: 4,",
															"                resultEngine: 0",
															"            }",
															"        },",
															"        findings: {",
															"            low: 2,",
															"            medium: 6,",
															"            high: 0",
															"        },    ",
															"        statuses: {",
															"            saved: {",
															"                total: 6,",
															"                resultEngine: 0",
															"            },",
															"            accepted: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            rejected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            submitted: {",
															"                total: 11,",
															"                resultEngine: 0",
															"            }",
															"        }\t ",
															"    }",
															"",
															"    metricsReferenceCommon.results.unassessed = {",
															"        total:  metricsReferenceCommon.results.informational.total + ",
															"                metricsReferenceCommon.results.notselected.total + ",
															"                metricsReferenceCommon.results.notchecked.total + ",
															"                metricsReferenceCommon.results.error.total + ",
															"                metricsReferenceCommon.results.fixed.total",
															"    }",
															"",
															"",
															"",
															"// Checking that response fulfills parameter requests",
															"// for (let jsonData of jsonData){",
															"    console.log( \"testing: \" + jsonData.name) ",
															"    ",
															"    //are we aggregating",
															"    let checkMetricsData = true",
															"    console.log( \"collection agg \") ",
															"",
															"",
															"          if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"             console.log(\"stig param\")",
															"             pm.test(\"verify parameter restricted response properly - benchmark\", function () {",
															"",
															"             if (user == \"lvl1\"){",
															"               pm.expect(jsonData.checklists).to.eql(2);",
															"               metricsReferenceCommon.assessed = 11",
															"               metricsReferenceCommon.assessments = 162",
															"               metricsReferenceCommon.results.fail.total = 6",
															"               metricsReferenceCommon.results.pass.total = 3",
															"               metricsReferenceCommon.results.notapplicable.total = 2",
															"               metricsReferenceCommon.statuses.saved.total = 4",
															"               metricsReferenceCommon.statuses.accepted.total = 0",
															"               metricsReferenceCommon.statuses.rejected.total = 0",
															"               metricsReferenceCommon.statuses.submitted.total = 7    ",
															"               metricsReferenceCommon.findings.low = 2",
															"               metricsReferenceCommon.findings.high = 0",
															"               metricsReferenceCommon.findings.medium = 4",
															"             }",
															"             else{",
															"               pm.expect(jsonData.checklists).to.eql(3);",
															"               metricsReferenceCommon.assessments = 243",
															"               metricsReferenceCommon.assessed = 14",
															"            //    metricsReferenceCommon.assessments = 162",
															"               metricsReferenceCommon.results.fail.total = 7",
															"               metricsReferenceCommon.results.pass.total = 3",
															"            //    metricsReferenceCommon.results.notapplicable.total = 2",
															"               metricsReferenceCommon.statuses.saved.total = 5",
															"            //    metricsReferenceCommon.statuses.accepted.total = 0",
															"            //    metricsReferenceCommon.statuses.rejected.total = 0",
															"               metricsReferenceCommon.statuses.submitted.total = 9",
															"            //    metricsReferenceCommon.findings.low = 2",
															"            //    metricsReferenceCommon.findings.high = 0",
															"               metricsReferenceCommon.findings.medium = 5               ",
															" ",
															"             }",
															"            })",
															"            //  metricsReferenceCommon.assessments = testTotalAssessmentsForTestSTIG",
															"          }",
															"    else if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"        pm.test(\"verify parameter restricted response properly - assetId\", function () {",
															"          console.log(\"asset, no stig param\")",
															"          if (user == \"lvl1\"){",
															"           pm.expect(jsonData.checklists).to.eql(1);",
															"           metricsReferenceCommon.assessed = 6",
															"           metricsReferenceCommon.assessments = 81",
															"           metricsReferenceCommon.results.fail.total = 3",
															"           metricsReferenceCommon.results.pass.total = 2",
															"           metricsReferenceCommon.results.notapplicable.total = 1",
															"           metricsReferenceCommon.statuses.saved.total = 1",
															"           metricsReferenceCommon.statuses.accepted.total = 0",
															"           metricsReferenceCommon.statuses.rejected.total = 0",
															"           metricsReferenceCommon.statuses.submitted.total = 5     ",
															"           metricsReferenceCommon.findings.low = 1",
															"           metricsReferenceCommon.findings.high = 0",
															"           metricsReferenceCommon.findings.medium = 2        ",
															"         }",
															"         else{",
															"             pm.expect(jsonData.checklists).to.eql(2);",
															"             metricsReferenceCommon.assessed = 9",
															"             metricsReferenceCommon.assessments = testTotalAssessmentsForTestAsset",
															"             metricsReferenceCommon.results.fail.total = 4",
															"             metricsReferenceCommon.results.pass.total = 4",
															"             metricsReferenceCommon.results.notapplicable.total = 1",
															"             metricsReferenceCommon.statuses.saved.total = 2",
															"             metricsReferenceCommon.statuses.accepted.total = 0",
															"             metricsReferenceCommon.statuses.rejected.total = 0",
															"             metricsReferenceCommon.statuses.submitted.total = 7     ",
															"             metricsReferenceCommon.findings.low = 1",
															"             metricsReferenceCommon.findings.high = 0",
															"             metricsReferenceCommon.findings.medium = 3  ",
															"         }              ",
															"            pm.expect(jsonData.assets).to.eql(1);",
															"        })",
															"    }   ",
															"",
															"    else if (pm.request.url.getQueryString().match(/labelId=/) || pm.request.url.getQueryString().match(/labelName=/)) {",
															"        pm.test(\"verify parameter restricted response properly - labelId\", function () {",
															"            // let responseLabels = [];",
															"            // for (let label of jsonData.labels) {",
															"            //     responseLabels.push(label.labelId)",
															"            // }",
															"            if (user == \"lvl1\"){",
															"              pm.expect(jsonData.checklists).to.eql(1);",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"              metricsReferenceCommon.statuses.accepted.total = 0",
															"              metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5     ",
															"              metricsReferenceCommon.findings.low = 1",
															"              metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2        ",
															"            }",
															"            else{            ",
															"            pm.expect(jsonData.assets).to.eql(2);",
															"            pm.expect(jsonData.checklists).to.eql(4);",
															"              console.log(\"labelId param\")",
															" ",
															"                 pm.expect(jsonData.checklists).to.eql(4);",
															"                 metricsReferenceCommon.assessed = 12",
															"                 metricsReferenceCommon.assessments = 736",
															"                 metricsReferenceCommon.results.fail.total = 5",
															"                 metricsReferenceCommon.results.pass.total = 4",
															"                 metricsReferenceCommon.results.notapplicable.total = 3",
															"                 metricsReferenceCommon.statuses.saved.total = 3",
															"                 metricsReferenceCommon.statuses.accepted.total = 0",
															"                 metricsReferenceCommon.statuses.rejected.total = 0",
															"                 metricsReferenceCommon.statuses.submitted.total = 9     ",
															"                 metricsReferenceCommon.findings.low = 1",
															"                 metricsReferenceCommon.findings.high = 0",
															"                 metricsReferenceCommon.findings.medium = 4",
															"            }",
															"        })",
															"    }           ",
															"",
															"    // else if (pm.request.url.getQueryString().match(/labelName=/)) {",
															"    //     pm.test(\"verify parameter restricted response properly - labelName\", function () {",
															"    //       if (user == \"lvl1\"){",
															"    //         pm.expect(jsonData.checklists).to.eql(1);",
															"    //         metricsReferenceCommon.assessed = 6",
															"    //         metricsReferenceCommon.assessments = 81",
															"    //         metricsReferenceCommon.results.fail.total = 3",
															"    //         metricsReferenceCommon.results.pass.total = 2",
															"    //         metricsReferenceCommon.results.notapplicable.total = 1",
															"    //         metricsReferenceCommon.statuses.saved.total = 1",
															"    //         metricsReferenceCommon.statuses.accepted.total = 0",
															"    //         metricsReferenceCommon.statuses.rejected.total = 0",
															"    //         metricsReferenceCommon.statuses.submitted.total = 5     ",
															"    //         metricsReferenceCommon.findings.low = 1",
															"    //         metricsReferenceCommon.findings.high = 0",
															"    //         metricsReferenceCommon.findings.medium = 2        ",
															"    //       }",
															"    //       else{            ",
															"    //       pm.expect(jsonData.assets).to.eql(2);",
															"    //       pm.expect(jsonData.checklists).to.eql(4);",
															"    //         console.log(\"labelId param\")",
															"",
															"    //            pm.expect(jsonData.checklists).to.eql(4);",
															"    //            metricsReferenceCommon.assessed = 9",
															"    //            metricsReferenceCommon.assessments = 676",
															"    //            metricsReferenceCommon.results.fail.total = 4",
															"    //            metricsReferenceCommon.results.pass.total = 2",
															"    //            metricsReferenceCommon.results.notapplicable.total = 3",
															"    //            metricsReferenceCommon.statuses.saved.total = 2",
															"    //            metricsReferenceCommon.statuses.accepted.total = 0",
															"    //            metricsReferenceCommon.statuses.rejected.total = 0",
															"    //            metricsReferenceCommon.statuses.submitted.total = 7     ",
															"    //            metricsReferenceCommon.findings.low = 1",
															"    //            metricsReferenceCommon.findings.high = 0",
															"    //            metricsReferenceCommon.findings.medium = 3",
															"    //       }                ",
															"    //     })",
															"    // } ",
															"    else {",
															"      console.log(\"no param\")",
															"      if (user == \"lvl1\"){",
															"        pm.expect(jsonData.checklists).to.eql(2);",
															"        metricsReferenceCommon.assessed = 11",
															"        metricsReferenceCommon.assessments = 162",
															"        metricsReferenceCommon.results.fail.total = 6",
															"        metricsReferenceCommon.results.pass.total = 3",
															"        metricsReferenceCommon.results.notapplicable.total = 2",
															"        metricsReferenceCommon.statuses.saved.total = 4",
															"        metricsReferenceCommon.statuses.accepted.total = 0",
															"        metricsReferenceCommon.statuses.rejected.total = 0",
															"        metricsReferenceCommon.statuses.submitted.total = 7     ",
															"        metricsReferenceCommon.findings.low = 2",
															"        metricsReferenceCommon.findings.high = 0",
															"        metricsReferenceCommon.findings.medium = 4      ",
															"",
															"      }",
															"      else{",
															"        pm.expect(jsonData.checklists).to.eql(6);",
															"        metricsReferenceCommon.assessments = 1104",
															"",
															"        ",
															"",
															"      }",
															"  }                 ",
															"    ",
															"    if (pm.request.url.getPath().match(/summary/)) {",
															"        console.log(\"checking summary metrics - checkflag: \" + checkMetricsData )",
															"        // if (jsonData.assetId ==  testAsset){",
															"        if (checkMetricsData ==  true){",
															"            console.log(\"checking metrics data\")        // if (jsonData.benchmarkId == testBenchmark) {",
															"            // if (jsonData.assetId ==  testAsset ) {",
															"            // console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(jsonData.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(jsonData.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(jsonData.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(jsonData.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(jsonData.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(jsonData.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(jsonData.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(jsonData.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - unassessed\", function () {",
															"                pm.expect(jsonData.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(jsonData.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(jsonData.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(jsonData.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(jsonData.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(jsonData.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(jsonData.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"    // }",
															"    }",
															"",
															"//Checking that metric details are correct",
															"    if (pm.request.url.getPath().match(/detail/)) {",
															"        if (checkMetricsData ==  true){",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(jsonData.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(jsonData.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(jsonData.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(jsonData.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(jsonData.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(jsonData.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(jsonData.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(jsonData.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - informational\", function () {",
															"                pm.expect(jsonData.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notchecked\", function () {",
															"                pm.expect(jsonData.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notselected\", function () {",
															"                pm.expect(jsonData.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - error\", function () {",
															"                pm.expect(jsonData.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);",
															"            });    ",
															"            pm.test(\"Check some stats - results - fixed\", function () {",
															"                pm.expect(jsonData.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);",
															"            });                 ",
															"",
															"            // pm.test(\"Check some stats - results - unassessed\", function () {",
															"            //     pm.expect(jsonData.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            // });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(jsonData.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(jsonData.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(jsonData.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(jsonData.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(jsonData.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(jsonData.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"",
															"    }",
															"",
															"",
															"// }",
															"",
															"",
															"",
															"return;",
															"",
															"",
															""
														]
													}
												}
											]
										},
										{
											"name": "label agg - detail",
											"item": [
												{
													"name": "Return detail metrics - label agg",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/label",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"label"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - asset agg - param benchmark",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/label?benchmarkId={{testBenchmark}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"label"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - asset agg - param assetId",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/label?assetId={{testAsset}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"label"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - asset agg - param labelId",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/label?labelId={{testLabel}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"label"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return detail metrics - asset agg - param labelName",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/label?labelName={{testLabelName}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"metrics",
																"detail",
																"label"
															],
															"query": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"disabled": true
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}",
																	"disabled": true
																},
																{
																	"key": "labelName",
																	"value": "{{testLabelName}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"",
															"let jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Response JSON is an array\", function () {",
															"    pm.expect(jsonData).to.be.an('array');",
															"});",
															"",
															"",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");",
															"let testLabel = pm.environment.get(\"testLabel\");",
															"let testLabelName = pm.environment.get(\"testLabelName\");",
															"",
															"",
															"//reference metrics",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));",
															"let testTotalAssessmentsForTestAsset = 368;",
															"let testTotalAssessmentsForTestLabel = 736;",
															"",
															"    let metricsReferenceCommon = {",
															"        assets: 2,",
															"        assessed: 12,",
															"        assessments: testTotalAssessmentsForTestLabel,",
															"        maxTs: \"2022-02-03T00:07:05Z\",",
															"        minTs: \"2020-08-11T22:27:26Z\",",
															"        results: {",
															"            fail: {",
															"                total: 5,",
															"                resultEngine: 0",
															"            },",
															"            pass: {",
															"                total: 4,",
															"                resultEngine: 0",
															"            },",
															"            error: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            fixed: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            unknown: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notchecked: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notselected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            informational: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            notapplicable: {",
															"                total: 3,",
															"                resultEngine: 0",
															"            }",
															"        },",
															"        findings: {",
															"            low: 1,",
															"            medium: 4,",
															"            high: 0",
															"        },    ",
															"        statuses: {",
															"            saved: {",
															"                total: 3,",
															"                resultEngine: 0",
															"            },",
															"            accepted: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            rejected: {",
															"                total: 0,",
															"                resultEngine: 0",
															"            },",
															"            submitted: {",
															"                total: 9,",
															"                resultEngine: 0",
															"            }",
															"        }\t ",
															"    }",
															"",
															"",
															"",
															"",
															"// Checking that response fulfills parameter requests",
															"let responseLabelNames = [];",
															"let responseLabelIds = [];",
															"",
															"for (let item of jsonData){",
															"    console.log( \"testing: \" + item.name) ",
															"    responseLabelIds.push(item.labelId)",
															"    responseLabelNames.push(item.labelName)",
															"",
															"    //are we aggregating",
															"    let checkMetricsData = false",
															"    console.log( \"label agg \") ",
															"    if (item.labelId ==  testLabel) {",
															"        checkMetricsData = true",
															"    }",
															"",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/) && checkMetricsData == true) {",
															"        pm.test(\"verify parameter restricted response properly - benchmark\", function () {",
															"            pm.expect(jsonData.length).to.eql(3);",
															"            // pm.expect(item.assets).to.eql(2);        ",
															"            if (user == \"lvl1\"){",
															"              pm.expect(item.assets).to.eql(1);        ",
															"              // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"              // metricsReferenceCommon.statuses.accepted.total = 0",
															"              // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5   ",
															"              // metricsReferenceCommon.findings.low = 2",
															"              // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"            }",
															"            else{",
															"              pm.expect(item.assets).to.eql(2);        ",
															"              // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 9",
															"            //   metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 4",
															"              metricsReferenceCommon.results.pass.total = 2",
															"            //   metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 2",
															"              // metricsReferenceCommon.statuses.accepted.total = 0",
															"              // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 7   ",
															"              // metricsReferenceCommon.findings.low = 2",
															"              // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 3",
															"",
															"            }                  ",
															"",
															"        })",
															"    metricsReferenceCommon.assessments = testChecklistLength * item.assets",
															"    }  ",
															"",
															"",
															"    else if (pm.request.url.getQueryString().match(/assetId=/) && checkMetricsData == true) {",
															"        pm.test(\"verify parameter restricted response properly - assetId\", function () {",
															"            pm.expect(item.assets).to.eql(1);",
															"            if (user == \"lvl1\"){",
															"",
															"              metricsReferenceCommon.assessments = 81",
															"              // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"            //   // metricsReferenceCommon.statuses.accepted.total = 0",
															"            //   // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5   ",
															"            //   // metricsReferenceCommon.findings.low = 2",
															"            //   // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2     ",
															"",
															"            }",
															"            else{",
															"              metricsReferenceCommon.assessments = testTotalAssessmentsForTestAsset",
															"            //   metricsReferenceCommon.assessments = 81",
															"            //   // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 9",
															"            // //   metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 4",
															"            //   metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 2",
															"            // //   // metricsReferenceCommon.statuses.accepted.total = 0",
															"            // //   // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 7",
															"            //   // metricsReferenceCommon.findings.low = 2",
															"            //   // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 3           ",
															"",
															"            }                  ",
															"        })",
															"",
															"    // metricsReferenceCommon.assessed = 9",
															"    // // metricsReferenceCommon.assessments = testTotalAssessmentsForTestAsset",
															"    // metricsReferenceCommon.results.fail.total = 4",
															"    // metricsReferenceCommon.results.notapplicable.total = 1",
															"    // metricsReferenceCommon.statuses.saved.total = 2",
															"    // metricsReferenceCommon.statuses.submitted.total = 7",
															"    // metricsReferenceCommon.findings.medium = 3 ",
															"    }   ",
															"",
															"   else  if (pm.request.url.getQueryString().match(/labelId=/) && checkMetricsData == true) {",
															"        pm.test(\"verify parameter restricted response properly - labelId\", function () {",
															"",
															"            pm.expect(responseLabelIds).to.include(item.labelId);",
															"            if (user == \"lvl1\"){",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"",
															"              metricsReferenceCommon.statuses.submitted.total = 5   ",
															"",
															"              metricsReferenceCommon.findings.medium = 2",
															"            }",
															"            else{",
															"              // pm.expect(jsonData.checklists).to.eql(3);",
															"            //   metricsReferenceCommon.assessed = 6",
															"            //   metricsReferenceCommon.assessments = 81",
															"            //   metricsReferenceCommon.results.fail.total = 3",
															"            //   metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 3",
															"",
															"            //   metricsReferenceCommon.statuses.submitted.total = 5   ",
															"",
															"            //   metricsReferenceCommon.findings.medium = 2",
															"",
															"            }               ",
															"        })",
															"    }           ",
															"",
															"    else if (pm.request.url.getQueryString().match(/labelName=/) && checkMetricsData == true) {",
															"        pm.test(\"verify parameter restricted response properly - labelName\", function () {",
															"            pm.expect(responseLabelNames).to.include(item.labelName);",
															"            if (user == \"lvl1\"){",
															"              // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"              // metricsReferenceCommon.statuses.accepted.total = 0",
															"              // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5   ",
															"              // metricsReferenceCommon.findings.low = 2",
															"              // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"            }",
															"            else{",
															"              // pm.expect(jsonData.checklists).to.eql(3);",
															"              // metricsReferenceCommon.assessments = 243",
															"              metricsReferenceCommon.statuses.saved.total = 3",
															"",
															"",
															"",
															"            }              ",
															"        })",
															"    }        ",
															"    else if ( checkMetricsData == true) {",
															"        pm.test(\"verify parameter restricted response properly - no params\", function () {",
															"            pm.expect(jsonData.length).to.eql(3);",
															"            if (user == \"lvl1\"){",
															"              // pm.expect(jsonData.checklists).to.eql(2);",
															"              metricsReferenceCommon.assessed = 6",
															"              metricsReferenceCommon.assessments = 81",
															"              metricsReferenceCommon.results.fail.total = 3",
															"              metricsReferenceCommon.results.pass.total = 2",
															"              metricsReferenceCommon.results.notapplicable.total = 1",
															"              metricsReferenceCommon.statuses.saved.total = 1",
															"              // metricsReferenceCommon.statuses.accepted.total = 0",
															"              // metricsReferenceCommon.statuses.rejected.total = 0",
															"              metricsReferenceCommon.statuses.submitted.total = 5   ",
															"              // metricsReferenceCommon.findings.low = 2",
															"              // metricsReferenceCommon.findings.high = 0",
															"              metricsReferenceCommon.findings.medium = 2",
															"            }",
															"            else{",
															"              // pm.expect(jsonData.checklists).to.eql(3);",
															"              // metricsReferenceCommon.assessments = 243",
															"",
															"            }            ",
															"        })",
															"    }          ",
															"    ",
															"    metricsReferenceCommon.results.unassessed = {",
															"        total:  metricsReferenceCommon.results.informational.total + ",
															"                metricsReferenceCommon.results.notselected.total + ",
															"                metricsReferenceCommon.results.notchecked.total + ",
															"                metricsReferenceCommon.results.error.total + ",
															"                metricsReferenceCommon.results.fixed.total",
															"    }",
															"",
															"    if (pm.request.url.getPath().match(/summary/)) {",
															"        console.log(\"checking summary metrics - checkflag: \" + checkMetricsData )",
															"        // if (item.assetId ==  testAsset){",
															"        if (checkMetricsData ==  true){",
															"            console.log(\"checking metrics data\")        // if (item.benchmarkId == testBenchmark) {",
															"            // if (item.assetId ==  testAsset ) {",
															"            console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - unassessed\", function () {",
															"                pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"    // }",
															"    }",
															"",
															"//Checking that metric details are correct",
															"    if (pm.request.url.getPath().match(/detail/)) {",
															"        if (checkMetricsData ==  true){",
															"            // if (item.assetId ==  testAsset ) {",
															"            console.log( \"found Collection_X_lvl1_asset\") ",
															"",
															"            pm.test(\"Check some stats - maxTs\", function () {",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);",
															"            });                ",
															"            pm.test(\"Check some stats - minTs\", function () {",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);",
															"            });           ",
															"",
															"            pm.test(\"Check some stats - findings, low\", function () {",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);",
															"            });",
															"            pm.test(\"Check some stats - findings, medium\", function () {",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);",
															"            });",
															"            pm.test(\"Check some stats - findings, high\", function () {",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);",
															"            });                                ",
															"",
															"            pm.test(\"Check some stats - results - NA\", function () {",
															"                pm.expect(item.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);",
															"            });        ",
															"            pm.test(\"Check some stats - results - pass\", function () {",
															"                pm.expect(item.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);",
															"            });        ",
															"",
															"            pm.test(\"Check some stats - results - fail\", function () {",
															"                pm.expect(item.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);",
															"            });     ",
															"            pm.test(\"Check some stats - results - informational\", function () {",
															"                pm.expect(item.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notchecked\", function () {",
															"                pm.expect(item.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - notselected\", function () {",
															"                pm.expect(item.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);",
															"            });                 ",
															"            pm.test(\"Check some stats - results - error\", function () {",
															"                pm.expect(item.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);",
															"            });    ",
															"            pm.test(\"Check some stats - results - fixed\", function () {",
															"                pm.expect(item.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);",
															"            });                 ",
															"",
															"            // pm.test(\"Check some stats - results - unassessed\", function () {",
															"            //     pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);",
															"            // });                   ",
															"",
															"            pm.test(\"Check some stats - status - saved\", function () {",
															"                pm.expect(item.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);",
															"            });   ",
															"",
															"            pm.test(\"Check some stats - status - submitted\", function () {",
															"                pm.expect(item.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);",
															"            });  ",
															"            pm.test(\"Check some stats - status - accepted\", function () {",
															"                pm.expect(item.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);",
															"            });                   ",
															"            pm.test(\"Check some stats - status - rejected\", function () {",
															"                pm.expect(item.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);",
															"            });      ",
															"",
															"            pm.test(\"Check some stats - assessments\", function () {",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);",
															"            });             ",
															"            pm.test(\"Check some stats - assessed\", function () {",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);",
															"            });                          ",
															"",
															"        }",
															"",
															"    }",
															"",
															"",
															"}",
															"",
															"",
															"",
															"return;",
															"",
															"",
															""
														]
													}
												}
											]
										},
										{
											"name": "Return detailed metrics for the specified Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
															"let testLabel = pm.environment.get(\"testLabel\");\r",
															"let testLabelName = pm.environment.get(\"testLabelName\");\r",
															"\r",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
															"\r",
															"\r",
															"\r",
															"// Checking that response fulfills parameter requests\r",
															"for (let item of jsonData){\r",
															"    console.log( \"testing: \" + item.name) \r",
															"\r",
															"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"    var regex = new RegExp(assetMatchString);\r",
															"    pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
															"        pm.expect(item.name).to.match(regex);\r",
															"    });\r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
															"        pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
															"            pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
															"        })\r",
															"    }\r",
															"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"        pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
															"            pm.expect(item.assetId).to.eql(testAsset);\r",
															"        })\r",
															"    }   \r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
															"        pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
															"            let responseLabels = [];\r",
															"            for (let label of item.labels) {\r",
															"                responseLabels.push(label.labelId)\r",
															"            }\r",
															"            pm.expect(responseLabels).to.include(testLabel);\r",
															"        })\r",
															"    }           \r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
															"        pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
															"            let responseLabels = [];\r",
															"            for (let label of item.labels) {\r",
															"                responseLabels.push(label.name)\r",
															"            }\r",
															"            pm.expect(responseLabels).to.include(testLabelName);\r",
															"        })\r",
															"    }              \r",
															"\r",
															"\r",
															"\r",
															"//Checking that metric summaries are correct\r",
															"    let metricsReferenceCommon = {\r",
															"        assessed: 6,\r",
															"        assessments: testChecklistLength,\r",
															"        maxTs: \"2022-02-03T00:07:05Z\",\r",
															"        minTs: \"2020-08-11T22:27:26Z\",\r",
															"        results: {\r",
															"            fail: {\r",
															"                total: 3,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            pass: {\r",
															"                total: 2,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            error: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            fixed: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            unknown: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            notchecked: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            notselected: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            informational: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            notapplicable: {\r",
															"                total: 1,\r",
															"                resultEngine: 0\r",
															"            }\r",
															"        },\r",
															"        findings: {\r",
															"            low: 1,\r",
															"            medium: 2,\r",
															"            high: 0\r",
															"        },    \r",
															"        statuses: {\r",
															"            saved: {\r",
															"                total: 1,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            accepted: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            rejected: {\r",
															"                total: 0,\r",
															"                resultEngine: 0\r",
															"            },\r",
															"            submitted: {\r",
															"                total: 5,\r",
															"                resultEngine: 0\r",
															"            }\r",
															"        }\t \r",
															"    }\r",
															"\r",
															"    metricsReferenceCommon.results.unassessed = {\r",
															"        total:  metricsReferenceCommon.results.informational.total + \r",
															"                metricsReferenceCommon.results.notselected.total + \r",
															"                metricsReferenceCommon.results.notchecked.total + \r",
															"                metricsReferenceCommon.results.error.total + \r",
															"                metricsReferenceCommon.results.fixed.total\r",
															"    }\r",
															"\r",
															"    \r",
															"    if (pm.request.url.getPath().match(/summary/)) {\r",
															"        console.log(\"checking summary metrics\")\r",
															"        if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
															"            // if (item.assetId ==  testAsset ) {\r",
															"            console.log( \"found Collection_X_lvl1_asset\") \r",
															"\r",
															"            pm.test(\"Check some stats - maxTs\", function () {\r",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);\r",
															"            });                \r",
															"            pm.test(\"Check some stats - minTs\", function () {\r",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);\r",
															"            });           \r",
															"\r",
															"            pm.test(\"Check some stats - findings, low\", function () {\r",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);\r",
															"            });\r",
															"            pm.test(\"Check some stats - findings, medium\", function () {\r",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);\r",
															"            });\r",
															"            pm.test(\"Check some stats - findings, high\", function () {\r",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);\r",
															"            });                                \r",
															"\r",
															"            pm.test(\"Check some stats - results - NA\", function () {\r",
															"                pm.expect(item.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);\r",
															"            });        \r",
															"            pm.test(\"Check some stats - results - pass\", function () {\r",
															"                pm.expect(item.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);\r",
															"            });        \r",
															"\r",
															"            pm.test(\"Check some stats - results - fail\", function () {\r",
															"                pm.expect(item.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);\r",
															"            });     \r",
															"            pm.test(\"Check some stats - results - unassessed\", function () {\r",
															"                pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);\r",
															"            });                   \r",
															"\r",
															"            pm.test(\"Check some stats - status - saved\", function () {\r",
															"                pm.expect(item.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);\r",
															"            });   \r",
															"\r",
															"            pm.test(\"Check some stats - status - submitted\", function () {\r",
															"                pm.expect(item.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);\r",
															"            });  \r",
															"            pm.test(\"Check some stats - status - accepted\", function () {\r",
															"                pm.expect(item.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);\r",
															"            });                   \r",
															"            pm.test(\"Check some stats - status - rejected\", function () {\r",
															"                pm.expect(item.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);\r",
															"            });      \r",
															"\r",
															"            pm.test(\"Check some stats - assessments\", function () {\r",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);\r",
															"            });             \r",
															"            pm.test(\"Check some stats - assessed\", function () {\r",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);\r",
															"            });                          \r",
															"\r",
															"        }\r",
															"    }\r",
															"\r",
															"//Checking that metric details are correct\r",
															"    if (pm.request.url.getPath().match(/detail/)) {\r",
															"        if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
															"            // if (item.assetId ==  testAsset ) {\r",
															"            console.log( \"found Collection_X_lvl1_asset\") \r",
															"\r",
															"            pm.test(\"Check some stats - maxTs\", function () {\r",
															"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);\r",
															"            });                \r",
															"            pm.test(\"Check some stats - minTs\", function () {\r",
															"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);\r",
															"            });           \r",
															"\r",
															"            pm.test(\"Check some stats - findings, low\", function () {\r",
															"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);\r",
															"            });\r",
															"            pm.test(\"Check some stats - findings, medium\", function () {\r",
															"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);\r",
															"            });\r",
															"            pm.test(\"Check some stats - findings, high\", function () {\r",
															"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);\r",
															"            });                                \r",
															"\r",
															"            pm.test(\"Check some stats - results - NA\", function () {\r",
															"                pm.expect(item.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);\r",
															"            });        \r",
															"            pm.test(\"Check some stats - results - pass\", function () {\r",
															"                pm.expect(item.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);\r",
															"            });        \r",
															"\r",
															"            pm.test(\"Check some stats - results - fail\", function () {\r",
															"                pm.expect(item.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);\r",
															"            });     \r",
															"            pm.test(\"Check some stats - results - informational\", function () {\r",
															"                pm.expect(item.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);\r",
															"            });                 \r",
															"            pm.test(\"Check some stats - results - notchecked\", function () {\r",
															"                pm.expect(item.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);\r",
															"            });                 \r",
															"            pm.test(\"Check some stats - results - notselected\", function () {\r",
															"                pm.expect(item.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);\r",
															"            });                 \r",
															"            pm.test(\"Check some stats - results - error\", function () {\r",
															"                pm.expect(item.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);\r",
															"            });    \r",
															"            pm.test(\"Check some stats - results - fixed\", function () {\r",
															"                pm.expect(item.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);\r",
															"            });                 \r",
															"\r",
															"            // pm.test(\"Check some stats - results - unassessed\", function () {\r",
															"            //     pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);\r",
															"            // });                   \r",
															"\r",
															"            pm.test(\"Check some stats - status - saved\", function () {\r",
															"                pm.expect(item.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);\r",
															"            });   \r",
															"\r",
															"            pm.test(\"Check some stats - status - submitted\", function () {\r",
															"                pm.expect(item.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);\r",
															"            });  \r",
															"            pm.test(\"Check some stats - status - accepted\", function () {\r",
															"                pm.expect(item.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);\r",
															"            });                   \r",
															"            pm.test(\"Check some stats - status - rejected\", function () {\r",
															"                pm.expect(item.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);\r",
															"            });      \r",
															"\r",
															"            pm.test(\"Check some stats - assessments\", function () {\r",
															"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);\r",
															"            });             \r",
															"            pm.test(\"Check some stats - assessed\", function () {\r",
															"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);\r",
															"            });                          \r",
															"\r",
															"        }\r",
															"\r",
															"    }\r",
															"\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"   \r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metrics",
														"detail"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return detailed metrics for the specified Collection - with params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
															"let testLabel = pm.environment.get(\"testLabel\");\r",
															"let testLabelName = pm.environment.get(\"testLabelName\");\r",
															"\r",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Check that proper assets are returned\", function () {\r",
															"    for (let item of jsonData){\r",
															"            console.log( \"testing: \" + item.name) \r",
															"\r",
															"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"        var regex = new RegExp(assetMatchString);\r",
															"        pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
															"            pm.expect(item.name).to.match(regex);\r",
															"        });\r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
															"                pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
															"            })\r",
															"        }\r",
															"        if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
															"                pm.expect(item.assetId).to.eql(testAsset);\r",
															"            })\r",
															"        }   \r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
															"                let responseLabels = [];\r",
															"                for (let label of item.labels) {\r",
															"                    responseLabels.push(label.labelId)\r",
															"                }\r",
															"                pm.expect(responseLabels).to.include(testLabel);\r",
															"            })\r",
															"        }           \r",
															"\r",
															"        if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
															"            pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
															"                let responseLabels = [];\r",
															"                for (let label of item.labels) {\r",
															"                    responseLabels.push(label.name)\r",
															"                }\r",
															"                pm.expect(responseLabels).to.include(testLabelName);\r",
															"            })\r",
															"        }              \r",
															"\r",
															"    if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
															"        // if (item.assetId ==  testAsset ) {\r",
															"            console.log( \"found Collection_X_lvl1_asset\") \r",
															"\r",
															"            pm.test(\"Check some stats - findings, low\", function () {\r",
															"                pm.expect(item.metrics.findings.low).to.equal(1);\r",
															"            });\r",
															"\r",
															"            pm.test(\"Check some stats - results - NA\", function () {\r",
															"                pm.expect(item.metrics.results.notapplicable.total).to.equal(1);\r",
															"            });        \r",
															"            pm.test(\"Check some stats - results - pass\", function () {\r",
															"                pm.expect(item.metrics.results.pass.total).to.equal(2);\r",
															"            });        \r",
															"\r",
															"        pm.test(\"Check some stats - results - fail\", function () {\r",
															"                pm.expect(item.metrics.results.fail.total).to.equal(3);\r",
															"            });        \r",
															"\r",
															"        pm.test(\"Check some stats - status - submitted\", function () {\r",
															"                pm.expect(item.metrics.statuses.submitted.total).to.equal(5);\r",
															"            });     \r",
															"        pm.test(\"Check some stats - assessments\", function () {\r",
															"                pm.expect(item.metrics.assessments).to.equal(testChecklistLength);\r",
															"            });             \r",
															"        pm.test(\"Check some stats - assessed\", function () {\r",
															"                pm.expect(item.metrics.assessed).to.equal(6);\r",
															"            });                          \r",
															"\r",
															"        }\r",
															"    }\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"    \r",
															"\r",
															"    \r",
															"// }\r",
															"\r",
															"return;\r",
															"\r",
															"// if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//     pm.expect(jsonData.stigs).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
															"//     pm.expect(jsonData.history).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
															"//     pm.expect(jsonData.rule).to.exist;\r",
															"// }\r",
															"// if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
															"//     pm.expect(jsonData.metadata).to.exist;\r",
															"// }\r",
															"// pm.test(\"Check if object contains all provided keys\", function () {\r",
															"//     // pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check if object contains proper ruleId\", function () {\r",
															"//     let testRuleId = pm.environment.get(\"testRuleId\");\r",
															"//     pm.expect(jsonData.ruleId).to.eql(testRuleId);\r",
															"// });\r",
															"\r",
															"// pm.test(\"Check review comment for regex match string\", function () {\r",
															"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
															"//     var regex = new RegExp(reviewMatchString);\r",
															"//     pm.expect(jsonData.detail).to.match(regex);\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															"// pm.test(\"Response has requested properties and values\", function () {\r",
															"//     // for (let item of jsonData){\r",
															"//     let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"//     var regex = new RegExp(collectionMatchString);\r",
															"//     pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//         pm.expect(jsonData.name).to.match(regex);\r",
															"//     });\r",
															"\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
															"//         pm.expect(jsonData.assets).to.exist;\r",
															"\r",
															"//         let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"//         var assetRegex = new RegExp(assetMatchString);\r",
															"//         for (let asset of jsonData.assets){\r",
															"//             // pm.expect(asset).to.have.property('name');\r",
															"//             // pm.expect(asset).to.have.property('assetId');\r",
															"//             pm.expect(asset.name).to.match(assetRegex);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
															"//         for (let grant of jsonData.grants){\r",
															"//             pm.expect(jsonData.grants).to.exist;\r",
															"\r",
															"//             // pm.expect(grant).to.be(array);\r",
															"//             // pm.expect(grant.user).to.be(object);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"//         for (let stig of jsonData.stigs){\r",
															"//             // pm.expect(stig).to.be(object);\r",
															"//             pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
															"//         // console.log(\"checking owners projection\");\r",
															"//         pm.expect(jsonData.owners).to.exist;\r",
															"\r",
															"//         for (let owner of jsonData.owners){\r",
															"//             // pm.expect(owner).to.be(array);\r",
															"//         }\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.statistics).to.exist;\r",
															"//     }\r",
															"\r",
															"//     if (pm.request.url.getQueryString().match(/projection=labels/)) {\r",
															"//         // console.log(\"checking statistics projection\");\r",
															"//         pm.expect(jsonData.labels).to.exist;\r",
															"//         if (user == \"lvl1\" ) {\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"//             pm.expect(jsonData.labels[0].uses).to.equal(1);\r",
															"//             pm.expect(jsonData.labels[1].uses).to.equal(1);\r",
															"\r",
															"//         }\r",
															"//         else{\r",
															"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
															"\r",
															"//         }            \r",
															"\r",
															"//     }\r",
															"//     // };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail?benchmarkId={{testBenchmark}}&assetId={{testAsset}}&labelName={{testLabelName-lvl1}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metrics",
														"detail"
													],
													"query": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														},
														{
															"key": "labelId",
															"value": "{{testLabel}}",
															"disabled": true
														},
														{
															"key": "labelName",
															"value": "{{testLabelName-lvl1}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "meta",
							"item": []
						}
					]
				},
				{
					"name": "meta metrics GET",
					"item": [
						{
							"name": "load test data Copy",
							"item": [
								{
									"name": "Import a new STIG - VPN R1V0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"// }\r",
													"// else {\r",
													"//     pm.test(\"Status code is 403\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{testStigFile}}",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "form-data-files/U_VPN_SRG_V1R0_Manual-xccdf.xml"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data - META METRICS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "form-data-files/appdata-meta-metrics-with-pin.json"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "summary",
							"item": [
								{
									"name": "no-agg",
									"item": [
										{
											"name": "meta metrics summary- no agg - no params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"let lvl234 = \r",
															"{\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 2,\r",
															"    \"stigs\": 2,\r",
															"    \"checklists\": 4,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": 5,\r",
															"            \"pass\": 4,\r",
															"            \"unassessed\": 0,\r",
															"            \"notapplicable\": 3\r",
															"        },\r",
															"        \"assessed\": 12,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 4\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": 3,\r",
															"            \"accepted\": 0,\r",
															"            \"rejected\": 0,\r",
															"            \"submitted\": 9\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 736\r",
															"    }\r",
															"}\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"        {\r",
															"            \"collections\": 1,\r",
															"            \"assets\": 1,\r",
															"            \"stigs\": 1,\r",
															"            \"checklists\": 1,\r",
															"            \"metrics\": {\r",
															"                \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"                \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"                \"results\": {\r",
															"                    \"fail\": 3,\r",
															"                    \"pass\": 2,\r",
															"                    \"unassessed\": 0,\r",
															"                    \"notapplicable\": 1\r",
															"                },\r",
															"                \"assessed\": 6,\r",
															"                \"findings\": {\r",
															"                    \"low\": 1,\r",
															"                    \"high\": 0,\r",
															"                    \"medium\": 2\r",
															"                },\r",
															"                \"statuses\": {\r",
															"                    \"saved\": 1,\r",
															"                    \"accepted\": 0,\r",
															"                    \"rejected\": 0,\r",
															"                    \"submitted\": 5\r",
															"                },\r",
															"                \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"                \"assessments\": 81\r",
															"            }\r",
															"        },\r",
															"    collectioncreator:\r",
															"        {\r",
															"            \"collections\": 0,\r",
															"            \"assets\": 0,\r",
															"            \"stigs\": 0,\r",
															"            \"checklists\": 0,\r",
															"            \"metrics\": {\r",
															"                \"maxTs\": null,\r",
															"                \"minTs\": null,\r",
															"                \"results\": {\r",
															"                    \"fail\": 0,\r",
															"                    \"pass\": 0,\r",
															"                    \"unassessed\": 0,\r",
															"                    \"notapplicable\": 0\r",
															"                },\r",
															"                \"assessed\": 0,\r",
															"                \"findings\": {\r",
															"                    \"low\": 0,\r",
															"                    \"high\": 0,\r",
															"                    \"medium\": 0\r",
															"                },\r",
															"                \"statuses\": {\r",
															"                    \"saved\": 0,\r",
															"                    \"accepted\": 0,\r",
															"                    \"rejected\": 0,\r",
															"                    \"submitted\": 0\r",
															"                },\r",
															"                \"maxTouchTs\": null,\r",
															"                \"assessments\": 0\r",
															"            }\r",
															"        },        \r",
															"    stigmanadmin :\r",
															"{\r",
															"    \"collections\": 2,\r",
															"    \"assets\": 4,\r",
															"    \"stigs\": 2,\r",
															"    \"checklists\": 6,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": 5,\r",
															"            \"pass\": 4,\r",
															"            \"unassessed\": 0,\r",
															"            \"notapplicable\": 3\r",
															"        },\r",
															"        \"assessed\": 12,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 4\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": 3,\r",
															"            \"accepted\": 0,\r",
															"            \"rejected\": 0,\r",
															"            \"submitted\": 9\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 898\r",
															"    }\r",
															"}\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meta metrics summary - no agg - collectionId param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"let lvl234 = \r",
															"{\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 2,\r",
															"    \"stigs\": 2,\r",
															"    \"checklists\": 4,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": 5,\r",
															"            \"pass\": 4,\r",
															"            \"unassessed\": 0,\r",
															"            \"notapplicable\": 3\r",
															"        },\r",
															"        \"assessed\": 12,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 4\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": 3,\r",
															"            \"accepted\": 0,\r",
															"            \"rejected\": 0,\r",
															"            \"submitted\": 9\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 736\r",
															"    }\r",
															"}\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"        {\r",
															"            \"collections\": 1,\r",
															"            \"assets\": 1,\r",
															"            \"stigs\": 1,\r",
															"            \"checklists\": 1,\r",
															"            \"metrics\": {\r",
															"                \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"                \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"                \"results\": {\r",
															"                    \"fail\": 3,\r",
															"                    \"pass\": 2,\r",
															"                    \"unassessed\": 0,\r",
															"                    \"notapplicable\": 1\r",
															"                },\r",
															"                \"assessed\": 6,\r",
															"                \"findings\": {\r",
															"                    \"low\": 1,\r",
															"                    \"high\": 0,\r",
															"                    \"medium\": 2\r",
															"                },\r",
															"                \"statuses\": {\r",
															"                    \"saved\": 1,\r",
															"                    \"accepted\": 0,\r",
															"                    \"rejected\": 0,\r",
															"                    \"submitted\": 5\r",
															"                },\r",
															"                \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"                \"assessments\": 81\r",
															"            }\r",
															"        },\r",
															"    collectioncreator:\r",
															"        {\r",
															"            \"collections\": 0,\r",
															"            \"assets\": 0,\r",
															"            \"stigs\": 0,\r",
															"            \"checklists\": 0,\r",
															"            \"metrics\": {\r",
															"                \"maxTs\": null,\r",
															"                \"minTs\": null,\r",
															"                \"results\": {\r",
															"                    \"fail\": 0,\r",
															"                    \"pass\": 0,\r",
															"                    \"unassessed\": 0,\r",
															"                    \"notapplicable\": 0\r",
															"                },\r",
															"                \"assessed\": 0,\r",
															"                \"findings\": {\r",
															"                    \"low\": 0,\r",
															"                    \"high\": 0,\r",
															"                    \"medium\": 0\r",
															"                },\r",
															"                \"statuses\": {\r",
															"                    \"saved\": 0,\r",
															"                    \"accepted\": 0,\r",
															"                    \"rejected\": 0,\r",
															"                    \"submitted\": 0\r",
															"                },\r",
															"                \"maxTouchTs\": null,\r",
															"                \"assessments\": 0\r",
															"            }\r",
															"        },        \r",
															"    stigmanadmin :\r",
															"{\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 2,\r",
															"    \"stigs\": 2,\r",
															"    \"checklists\": 4,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": 5,\r",
															"            \"pass\": 4,\r",
															"            \"unassessed\": 0,\r",
															"            \"notapplicable\": 3\r",
															"        },\r",
															"        \"assessed\": 12,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 4\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": 3,\r",
															"            \"accepted\": 0,\r",
															"            \"rejected\": 0,\r",
															"            \"submitted\": 9\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 736\r",
															"    }\r",
															"}\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary?collectionId={{testCollection}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meta metrics summary - no agg - benchmark param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"let lvl234 = \r",
															"{\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 2,\r",
															"    \"stigs\": 1,\r",
															"    \"checklists\": 2,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": 4,\r",
															"            \"pass\": 2,\r",
															"            \"unassessed\": 0,\r",
															"            \"notapplicable\": 3\r",
															"        },\r",
															"        \"assessed\": 9,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 3\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": 2,\r",
															"            \"accepted\": 0,\r",
															"            \"rejected\": 0,\r",
															"            \"submitted\": 7\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 162\r",
															"    }\r",
															"}\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"        {\r",
															"            \"collections\": 1,\r",
															"            \"assets\": 1,\r",
															"            \"stigs\": 1,\r",
															"            \"checklists\": 1,\r",
															"            \"metrics\": {\r",
															"                \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"                \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"                \"results\": {\r",
															"                    \"fail\": 3,\r",
															"                    \"pass\": 2,\r",
															"                    \"unassessed\": 0,\r",
															"                    \"notapplicable\": 1\r",
															"                },\r",
															"                \"assessed\": 6,\r",
															"                \"findings\": {\r",
															"                    \"low\": 1,\r",
															"                    \"high\": 0,\r",
															"                    \"medium\": 2\r",
															"                },\r",
															"                \"statuses\": {\r",
															"                    \"saved\": 1,\r",
															"                    \"accepted\": 0,\r",
															"                    \"rejected\": 0,\r",
															"                    \"submitted\": 5\r",
															"                },\r",
															"                \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"                \"assessments\": 81\r",
															"            }\r",
															"        },\r",
															"    collectioncreator:\r",
															"        {\r",
															"            \"collections\": 0,\r",
															"            \"assets\": 0,\r",
															"            \"stigs\": 0,\r",
															"            \"checklists\": 0,\r",
															"            \"metrics\": {\r",
															"                \"maxTs\": null,\r",
															"                \"minTs\": null,\r",
															"                \"results\": {\r",
															"                    \"fail\": 0,\r",
															"                    \"pass\": 0,\r",
															"                    \"unassessed\": 0,\r",
															"                    \"notapplicable\": 0\r",
															"                },\r",
															"                \"assessed\": 0,\r",
															"                \"findings\": {\r",
															"                    \"low\": 0,\r",
															"                    \"high\": 0,\r",
															"                    \"medium\": 0\r",
															"                },\r",
															"                \"statuses\": {\r",
															"                    \"saved\": 0,\r",
															"                    \"accepted\": 0,\r",
															"                    \"rejected\": 0,\r",
															"                    \"submitted\": 0\r",
															"                },\r",
															"                \"maxTouchTs\": null,\r",
															"                \"assessments\": 0\r",
															"            }\r",
															"        },        \r",
															"    stigmanadmin :\r",
															"{\r",
															"    \"collections\": 2,\r",
															"    \"assets\": 4,\r",
															"    \"stigs\": 1,\r",
															"    \"checklists\": 4,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": 4,\r",
															"            \"pass\": 2,\r",
															"            \"unassessed\": 0,\r",
															"            \"notapplicable\": 3\r",
															"        },\r",
															"        \"assessed\": 9,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 3\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": 2,\r",
															"            \"accepted\": 0,\r",
															"            \"rejected\": 0,\r",
															"            \"submitted\": 7\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 324\r",
															"    }\r",
															"}\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary?benchmarkId={{testBenchmark}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "collection agg",
									"item": [
										{
											"name": "Return meta metrics summary - collection agg - no params Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 3,\r",
															"        \"stigs\": 2,\r",
															"        \"checklists\": 4,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 5,\r",
															"                \"pass\": 4,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 12,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 4\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 3,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 9\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 736\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 1,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 1,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 3,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 1\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 5\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"[],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 3,\r",
															"        \"stigs\": 2,\r",
															"        \"checklists\": 4,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 5,\r",
															"                \"pass\": 4,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 12,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 4\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 3,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 9\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 736\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"collectionId\": \"83\",\r",
															"        \"name\": \"Collection Y\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": null,\r",
															"            \"minTs\": null,\r",
															"            \"results\": {\r",
															"                \"fail\": 0,\r",
															"                \"pass\": 0,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 0\r",
															"            },\r",
															"            \"assessed\": 0,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 0\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 0,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 0\r",
															"            },\r",
															"            \"maxTouchTs\": null,\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary/collection",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary",
														"collection"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														},
														{
															"key": "revisionId",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return meta metrics summary - collection agg - collection param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 3,\r",
															"        \"stigs\": 2,\r",
															"        \"checklists\": 4,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 5,\r",
															"                \"pass\": 4,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 12,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 4\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 3,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 9\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 736\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 1,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 1,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 3,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 1\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 5\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"       [],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 3,\r",
															"        \"stigs\": 2,\r",
															"        \"checklists\": 4,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 5,\r",
															"                \"pass\": 4,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 12,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 4\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 3,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 9\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 736\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary/collection?collectionId={{testCollection}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary",
														"collection"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														},
														{
															"key": "revisionId",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return meta metrics summary - collection agg - benchmark param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 1,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 1,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 3,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 1\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 5\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"[],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"collectionId\": \"83\",\r",
															"        \"name\": \"Collection Y\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": null,\r",
															"            \"minTs\": null,\r",
															"            \"results\": {\r",
															"                \"fail\": 0,\r",
															"                \"pass\": 0,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 0\r",
															"            },\r",
															"            \"assessed\": 0,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 0\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 0,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 0\r",
															"            },\r",
															"            \"maxTouchTs\": null,\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary/collection?benchmarkId={{testBenchmark}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary",
														"collection"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}"
														},
														{
															"key": "revisionId",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return meta metrics summary - collection agg - rev param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let lvl234 = \r",
															"[]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"        [],\r",
															"    collectioncreator:\r",
															"[],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"83\",\r",
															"        \"name\": \"Collection Y\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": null,\r",
															"            \"minTs\": null,\r",
															"            \"results\": {\r",
															"                \"fail\": 0,\r",
															"                \"pass\": 0,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 0\r",
															"            },\r",
															"            \"assessed\": 0,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 0\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 0,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 0\r",
															"            },\r",
															"            \"maxTouchTs\": null,\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary/collection?revisionId={{testBenchmark}}-1-0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary",
														"collection"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														},
														{
															"key": "revisionId",
															"value": "{{testBenchmark}}-1-0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return meta metrics summary - collection agg - rev param Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"     [\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 1,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 1,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 3,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 1\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 5\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"        [],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary/collection?revisionId={{testBenchmark}}-1-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary",
														"collection"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														},
														{
															"key": "revisionId",
															"value": "{{testBenchmark}}-1-1"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "stig agg",
									"item": [
										{
											"name": "Return meta metrics summary - stig agg - no params Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"Windows_10_STIG_TEST\",\r",
															"        \"title\": \"Windows 10 Security Technical Implementation Guide\",\r",
															"        \"revisionStr\": \"V1R23\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 287,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"minTs\": \"2020-08-11T22:29:16Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 1,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 0\r",
															"            },\r",
															"            \"assessed\": 3,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 1\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 2\r",
															"            },\r",
															"            \"maxTouchTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"assessments\": 574\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 1,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 3,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 1\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 5\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"       [],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R0\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": null,\r",
															"            \"minTs\": null,\r",
															"            \"results\": {\r",
															"                \"fail\": 0,\r",
															"                \"pass\": 0,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 0\r",
															"            },\r",
															"            \"assessed\": 0,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 0\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 0,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 0\r",
															"            },\r",
															"            \"maxTouchTs\": null,\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"Windows_10_STIG_TEST\",\r",
															"        \"title\": \"Windows 10 Security Technical Implementation Guide\",\r",
															"        \"revisionStr\": \"V1R23\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 287,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"minTs\": \"2020-08-11T22:29:16Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 1,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 0\r",
															"            },\r",
															"            \"assessed\": 3,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 1\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 2\r",
															"            },\r",
															"            \"maxTouchTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"assessments\": 574\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary/stig",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary",
														"stig"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return meta metrics summary - stig agg - collection param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"Windows_10_STIG_TEST\",\r",
															"        \"title\": \"Windows 10 Security Technical Implementation Guide\",\r",
															"        \"revisionStr\": \"V1R23\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 287,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"minTs\": \"2020-08-11T22:29:16Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 1,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 0\r",
															"            },\r",
															"            \"assessed\": 3,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 1\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 2\r",
															"            },\r",
															"            \"maxTouchTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"assessments\": 574\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 1,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 3,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 1\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 5\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"       [],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"Windows_10_STIG_TEST\",\r",
															"        \"title\": \"Windows 10 Security Technical Implementation Guide\",\r",
															"        \"revisionStr\": \"V1R23\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 287,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"minTs\": \"2020-08-11T22:29:16Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 1,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 0\r",
															"            },\r",
															"            \"assessed\": 3,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 1\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 2\r",
															"            },\r",
															"            \"maxTouchTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"assessments\": 574\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary/stig?collectionId={{testCollection}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary",
														"stig"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return meta metrics summary - stig agg - benchmark param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 1,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 3,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 1\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 5\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"        [],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R0\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": null,\r",
															"            \"minTs\": null,\r",
															"            \"results\": {\r",
															"                \"fail\": 0,\r",
															"                \"pass\": 0,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 0\r",
															"            },\r",
															"            \"assessed\": 0,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 0\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 0,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 0\r",
															"            },\r",
															"            \"maxTouchTs\": null,\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary/stig?benchmarkId={{testBenchmark}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary",
														"stig"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return meta metrics summary - stig agg - coll and bench params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 1,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 3,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 1\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 1,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 5\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"        [],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": 4,\r",
															"                \"pass\": 2,\r",
															"                \"unassessed\": 0,\r",
															"                \"notapplicable\": 3\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": 2,\r",
															"                \"accepted\": 0,\r",
															"                \"rejected\": 0,\r",
															"                \"submitted\": 7\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/summary/stig?collectionId={{testCollection}}&benchmarkId={{testBenchmark}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"summary",
														"stig"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "detail",
							"item": [
								{
									"name": "no agg",
									"item": [
										{
											"name": "meta metrics detail - no agg - no params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"\r",
															"\r",
															"let lvl234 = \r",
															"{\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 2,\r",
															"    \"stigs\": 2,\r",
															"    \"checklists\": 4,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 5,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 4,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 12,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 4\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 9,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 736,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 50,\r",
															"            \"high\": 74,\r",
															"            \"medium\": 612\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"{\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 1,\r",
															"    \"stigs\": 1,\r",
															"    \"checklists\": 1,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 2,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 1,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 6,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 2\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 1,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 5,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 81,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 7,\r",
															"            \"high\": 11,\r",
															"            \"medium\": 63\r",
															"        }\r",
															"    }\r",
															"},\r",
															"    collectioncreator:\r",
															"{\r",
															"    \"collections\": 0,\r",
															"    \"assets\": 0,\r",
															"    \"stigs\": 0,\r",
															"    \"checklists\": 0,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": null,\r",
															"        \"minTs\": null,\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 0,\r",
															"        \"findings\": {\r",
															"            \"low\": 0,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 0\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": null,\r",
															"        \"assessments\": 0,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 0,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 0\r",
															"        }\r",
															"    }\r",
															"},        \r",
															"    stigmanadmin :\r",
															"{\r",
															"    \"collections\": 2,\r",
															"    \"assets\": 4,\r",
															"    \"stigs\": 2,\r",
															"    \"checklists\": 6,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 5,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 4,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 12,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 4\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 9,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 898,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 64,\r",
															"            \"high\": 96,\r",
															"            \"medium\": 738\r",
															"        }\r",
															"    }\r",
															"}\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/detail",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"detail"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meta metrics detail - no agg - coll param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"\r",
															"\r",
															"let lvl234 = \r",
															"{\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 2,\r",
															"    \"stigs\": 2,\r",
															"    \"checklists\": 4,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 5,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 4,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 12,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 4\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 9,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 736,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 50,\r",
															"            \"high\": 74,\r",
															"            \"medium\": 612\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"       {\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 1,\r",
															"    \"stigs\": 1,\r",
															"    \"checklists\": 1,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 2,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 1,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 6,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 2\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 1,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 5,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 81,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 7,\r",
															"            \"high\": 11,\r",
															"            \"medium\": 63\r",
															"        }\r",
															"    }\r",
															"},\r",
															"    collectioncreator:\r",
															"{\r",
															"    \"collections\": 0,\r",
															"    \"assets\": 0,\r",
															"    \"stigs\": 0,\r",
															"    \"checklists\": 0,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": null,\r",
															"        \"minTs\": null,\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 0,\r",
															"        \"findings\": {\r",
															"            \"low\": 0,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 0\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": null,\r",
															"        \"assessments\": 0,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 0,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 0\r",
															"        }\r",
															"    }\r",
															"},        \r",
															"    stigmanadmin :\r",
															"{\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 2,\r",
															"    \"stigs\": 2,\r",
															"    \"checklists\": 4,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 5,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 4,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 12,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 4\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 9,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 736,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 50,\r",
															"            \"high\": 74,\r",
															"            \"medium\": 612\r",
															"        }\r",
															"    }\r",
															"}\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/detail?collectionId={{testCollection}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"detail"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meta metrics detail - no agg - bench param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"\r",
															"\r",
															"let lvl234 = \r",
															"{\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 2,\r",
															"    \"stigs\": 1,\r",
															"    \"checklists\": 2,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 4,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 2,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 9,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 3\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 2,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 7,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 162,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 14,\r",
															"            \"high\": 22,\r",
															"            \"medium\": 126\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															" {\r",
															"    \"collections\": 1,\r",
															"    \"assets\": 1,\r",
															"    \"stigs\": 1,\r",
															"    \"checklists\": 1,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 2,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 1,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 6,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 2\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 1,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 5,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 81,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 7,\r",
															"            \"high\": 11,\r",
															"            \"medium\": 63\r",
															"        }\r",
															"    }\r",
															"},\r",
															"    collectioncreator:\r",
															"{\r",
															"    \"collections\": 0,\r",
															"    \"assets\": 0,\r",
															"    \"stigs\": 0,\r",
															"    \"checklists\": 0,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": null,\r",
															"        \"minTs\": null,\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 0,\r",
															"        \"findings\": {\r",
															"            \"low\": 0,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 0\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": null,\r",
															"        \"assessments\": 0,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 0,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 0\r",
															"        }\r",
															"    }\r",
															"},        \r",
															"    stigmanadmin :\r",
															"{\r",
															"    \"collections\": 2,\r",
															"    \"assets\": 4,\r",
															"    \"stigs\": 1,\r",
															"    \"checklists\": 4,\r",
															"    \"metrics\": {\r",
															"        \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"        \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"        \"results\": {\r",
															"            \"fail\": {\r",
															"                \"total\": 4,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"pass\": {\r",
															"                \"total\": 2,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"error\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"fixed\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"unknown\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notchecked\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notselected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"informational\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"notapplicable\": {\r",
															"                \"total\": 3,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"assessed\": 9,\r",
															"        \"findings\": {\r",
															"            \"low\": 1,\r",
															"            \"high\": 0,\r",
															"            \"medium\": 3\r",
															"        },\r",
															"        \"statuses\": {\r",
															"            \"saved\": {\r",
															"                \"total\": 2,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"accepted\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"rejected\": {\r",
															"                \"total\": 0,\r",
															"                \"resultEngine\": 0\r",
															"            },\r",
															"            \"submitted\": {\r",
															"                \"total\": 7,\r",
															"                \"resultEngine\": 0\r",
															"            }\r",
															"        },\r",
															"        \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"        \"assessments\": 324,\r",
															"        \"assessmentsBySeverity\": {\r",
															"            \"low\": 28,\r",
															"            \"high\": 44,\r",
															"            \"medium\": 252\r",
															"        }\r",
															"    }\r",
															"}\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/detail?benchmarkId={{testBenchmark}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"detail"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "collection agg",
									"item": [
										{
											"name": "meta metrics detail - collection agg - no params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 3,\r",
															"        \"stigs\": 2,\r",
															"        \"checklists\": 4,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 12,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 4\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 9,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 736,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 50,\r",
															"                \"high\": 74,\r",
															"                \"medium\": 612\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 1,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 1,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 7,\r",
															"                \"high\": 11,\r",
															"                \"medium\": 63\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"[],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 3,\r",
															"        \"stigs\": 2,\r",
															"        \"checklists\": 4,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 12,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 4\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 9,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 736,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 50,\r",
															"                \"high\": 74,\r",
															"                \"medium\": 612\r",
															"            }\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"collectionId\": \"83\",\r",
															"        \"name\": \"Collection Y\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": null,\r",
															"            \"minTs\": null,\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 0,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 0\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": null,\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/detail/collection",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"detail",
														"collection"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meta metrics detail - collection agg - coll param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 3,\r",
															"        \"stigs\": 2,\r",
															"        \"checklists\": 4,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 12,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 4\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 9,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 736,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 50,\r",
															"                \"high\": 74,\r",
															"                \"medium\": 612\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 1,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 1,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 7,\r",
															"                \"high\": 11,\r",
															"                \"medium\": 63\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"[],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 3,\r",
															"        \"stigs\": 2,\r",
															"        \"checklists\": 4,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 12,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 4\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 9,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 736,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 50,\r",
															"                \"high\": 74,\r",
															"                \"medium\": 612\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/detail/collection?collectionId={{testCollection}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"detail",
														"collection"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meta metrics detail - collection agg - bench param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 7,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"        [\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 1,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 1,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 7,\r",
															"                \"high\": 11,\r",
															"                \"medium\": 63\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"[],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 7,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"collectionId\": \"83\",\r",
															"        \"name\": \"Collection Y\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": null,\r",
															"            \"minTs\": null,\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 0,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 0\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": null,\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/detail/collection?benchmarkId={{testBenchmark}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"detail",
														"collection"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meta metrics detail - collection agg - rev param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"// pm.test(\"Response JSON is an object\", function () {\r",
															"//     pm.expect(jsonData).to.be.an('object');\r",
															"// });\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 7,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"       [\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 1,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 1,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 7,\r",
															"                \"high\": 11,\r",
															"                \"medium\": 63\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"       [],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"collectionId\": \"21\",\r",
															"        \"name\": \"Collection X\",\r",
															"        \"assets\": 2,\r",
															"        \"stigs\": 1,\r",
															"        \"checklists\": 2,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 7,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/detail/collection?revisionId={{testBenchmark}}-1-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"detail",
														"collection"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														},
														{
															"key": "revisionId",
															"value": "{{testBenchmark}}-1-1"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "stig agg",
									"item": [
										{
											"name": "meta metrics detail - stig agg - no params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 7,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"Windows_10_STIG_TEST\",\r",
															"        \"title\": \"Windows 10 Security Technical Implementation Guide\",\r",
															"        \"revisionStr\": \"V1R23\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 287,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"minTs\": \"2020-08-11T22:29:16Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 3,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 1\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"assessments\": 574,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 36,\r",
															"                \"high\": 52,\r",
															"                \"medium\": 486\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 1,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 7,\r",
															"                \"high\": 11,\r",
															"                \"medium\": 63\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"      [],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R0\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": null,\r",
															"            \"minTs\": null,\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 0,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 0\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": null,\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 7,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"Windows_10_STIG_TEST\",\r",
															"        \"title\": \"Windows 10 Security Technical Implementation Guide\",\r",
															"        \"revisionStr\": \"V1R23\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 287,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"minTs\": \"2020-08-11T22:29:16Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 3,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 1\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"assessments\": 574,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 36,\r",
															"                \"high\": 52,\r",
															"                \"medium\": 486\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/detail/stig",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"detail",
														"stig"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meta metrics detail - stig agg - coll param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 7,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"Windows_10_STIG_TEST\",\r",
															"        \"title\": \"Windows 10 Security Technical Implementation Guide\",\r",
															"        \"revisionStr\": \"V1R23\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 287,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"minTs\": \"2020-08-11T22:29:16Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 3,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 1\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"assessments\": 574,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 36,\r",
															"                \"high\": 52,\r",
															"                \"medium\": 486\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 1,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 7,\r",
															"                \"high\": 11,\r",
															"                \"medium\": 63\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"[],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 7,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"Windows_10_STIG_TEST\",\r",
															"        \"title\": \"Windows 10 Security Technical Implementation Guide\",\r",
															"        \"revisionStr\": \"V1R23\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 287,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"minTs\": \"2020-08-11T22:29:16Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 3,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 1\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2020-08-18T20:48:29Z\",\r",
															"            \"assessments\": 574,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 36,\r",
															"                \"high\": 52,\r",
															"                \"medium\": 486\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/detail/stig?collectionId={{testCollection}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"detail",
														"stig"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meta metrics detail - stig agg - bench param",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\") {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"// user = \"stigmanadmin\"\r",
															"\r",
															"\r",
															"\r",
															"let lvl234 = \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 7,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"\r",
															"let jsonExpectedByUser =\r",
															"{\r",
															"    lvl1: \r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 1,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 6,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 2\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 1,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 5,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 81,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 7,\r",
															"                \"high\": 11,\r",
															"                \"medium\": 63\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"],\r",
															"    collectioncreator:\r",
															"       [],        \r",
															"    stigmanadmin :\r",
															"[\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R0\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": null,\r",
															"            \"minTs\": null,\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 0,\r",
															"            \"findings\": {\r",
															"                \"low\": 0,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 0\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": null,\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    },\r",
															"    {\r",
															"        \"benchmarkId\": \"VPN_SRG_TEST\",\r",
															"        \"title\": \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
															"        \"revisionStr\": \"V1R1\",\r",
															"        \"collections\": 1,\r",
															"        \"assets\": 2,\r",
															"        \"ruleCount\": 81,\r",
															"        \"metrics\": {\r",
															"            \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"            \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"            \"results\": {\r",
															"                \"fail\": {\r",
															"                    \"total\": 4,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"pass\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"error\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"fixed\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"unknown\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notchecked\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notselected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"informational\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"notapplicable\": {\r",
															"                    \"total\": 3,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"assessed\": 9,\r",
															"            \"findings\": {\r",
															"                \"low\": 1,\r",
															"                \"high\": 0,\r",
															"                \"medium\": 3\r",
															"            },\r",
															"            \"statuses\": {\r",
															"                \"saved\": {\r",
															"                    \"total\": 2,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"accepted\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"rejected\": {\r",
															"                    \"total\": 0,\r",
															"                    \"resultEngine\": 0\r",
															"                },\r",
															"                \"submitted\": {\r",
															"                    \"total\": 7,\r",
															"                    \"resultEngine\": 0\r",
															"                }\r",
															"            },\r",
															"            \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"            \"assessments\": 162,\r",
															"            \"assessmentsBySeverity\": {\r",
															"                \"low\": 14,\r",
															"                \"high\": 22,\r",
															"                \"medium\": 126\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"]\r",
															"}\r",
															"\r",
															"jsonExpectedByUser.lvl2 = lvl234\r",
															"jsonExpectedByUser.lvl3 = lvl234\r",
															"jsonExpectedByUser.lvl4 = lvl234\r",
															"\r",
															"// let jsonExpected =\r",
															"// {\r",
															"//     \"collections\": 3,\r",
															"//     \"assets\": 8,\r",
															"//     \"stigs\": 3,\r",
															"//     \"checklists\": 14,\r",
															"//     \"metrics\": {\r",
															"//         \"maxTs\": \"2022-02-03T00:07:05Z\",\r",
															"//         \"minTs\": \"2020-08-11T22:27:26Z\",\r",
															"//         \"results\": {\r",
															"//             \"fail\": 8,\r",
															"//             \"pass\": 7,\r",
															"//             \"unassessed\": 0,\r",
															"//             \"notapplicable\": 4\r",
															"//         },\r",
															"//         \"assessed\": 19,\r",
															"//         \"findings\": {\r",
															"//             \"low\": 2,\r",
															"//             \"high\": 0,\r",
															"//             \"medium\": 6\r",
															"//         },\r",
															"//         \"statuses\": {\r",
															"//             \"saved\": 7,\r",
															"//             \"accepted\": 0,\r",
															"//             \"rejected\": 0,\r",
															"//             \"submitted\": 12\r",
															"//         },\r",
															"//         \"maxTouchTs\": \"2022-02-03T00:07:07Z\",\r",
															"//         \"assessments\": 2327\r",
															"//     }\r",
															"// }\r",
															"\r",
															"\r",
															"pm.test(\"Check that metrics are as expected \", function () {\r",
															"    pm.expect(jsonData).to.eql(jsonExpectedByUser[user]);\r",
															"});\r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/meta/metrics/detail/stig?benchmarkId={{testBenchmark}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														"meta",
														"metrics",
														"detail",
														"stig"
													],
													"query": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"disabled": true
														},
														{
															"key": "collectionId",
															"value": "",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// pm.environment.set(\"curUser\", \"staff\");",
									"",
									"let user = pm.iterationData.get(\"user\");",
									"let elevate = pm.iterationData.get(\"elevate\");",
									"console.log(`user: ${user} elevate: ${elevate}`);",
									"",
									"",
									"//default to stigmanadmin user, elevated, if not iterating, and user is not in env",
									"if (user === undefined) {",
									"    user = \"stigmanadmin\";",
									"    userId = \"1\";",
									"    elevate = true;",
									"    pm.environment.set(\"user\", user);",
									"    pm.environment.set(\"elevated\", elevate);",
									"    let token = pm.environment.get(\"token.\" + user)",
									"    pm.environment.set(\"token\", token);",
									"    console.log(`No iteration data. Setting: User: ${user} elevated: ${elevate} Bearer: ${token}`);",
									"",
									"    return;  // Just use whatever settings are currently left in the env.",
									"}",
									"",
									"",
									"",
									"let token = pm.iterationData.get(\"token\");",
									"pm.environment.set(\"token.\"+ user, token);",
									"pm.environment.set(\"token\", token);",
									"pm.environment.set(\"user\", user);",
									"pm.environment.set(\"elevated\", elevate);",
									"console.log(`User: ${user} elevated: ${elevate} Bearer: ${token}`);",
									"",
									"//constructed data targets to test",
									"pm.environment.set(\"stigs.valid\", pm.iterationData.get(\"stigs.valid\"));",
									"pm.environment.set(\"testCollection\", pm.iterationData.get(\"testCollection\"));",
									"pm.environment.set(\"testBenchmark\", pm.iterationData.get(\"testBenchmark\"));",
									"pm.environment.set(\"testRev\", pm.iterationData.get(\"testRev\"));",
									"pm.environment.set(\"testAsset\", pm.iterationData.get(\"testAsset\"));",
									"pm.environment.set(\"testAsset-NoStigs\", pm.iterationData.get(\"testAsset-NoStigs\"));",
									"pm.environment.set(\"testAssetName\", pm.iterationData.get(\"testAssetName\"));",
									"pm.environment.set(\"testRuleId\", pm.iterationData.get(\"testRuleId\"));",
									"pm.environment.set(\"testUserId\", pm.iterationData.get(\"testUserId\"));",
									"pm.environment.set(\"userId\", pm.iterationData.get(\"userId\"));",
									"pm.environment.set(\"metadataKey\", pm.iterationData.get(\"metadataKey\"));",
									"pm.environment.set(\"metadataValue\", pm.iterationData.get(\"metadataValue\"));",
									"// pm.environment.set(\"targetCollectionName\", pm.iterationData.get(\"targetCollectionName\"));",
									"pm.environment.set(\"checklistLength\", pm.iterationData.get(\"checklistLength\"));",
									"",
									"//targets for data changes",
									"pm.environment.set(\"deleteAsset\", pm.iterationData.get(\"deleteAsset\"));",
									"pm.environment.set(\"scrapAsset\", pm.iterationData.get(\"scrapAsset\"));",
									"pm.environment.set(\"deleteCollection\", pm.iterationData.get(\"deleteCollection\"));",
									"pm.environment.set(\"scrapCollection\", pm.iterationData.get(\"scrapCollection\"));",
									"",
									"",
									"//regex strings",
									"pm.environment.set(\"collectionMatchString\", pm.iterationData.get(\"collectionMatchString\"));",
									"pm.environment.set(\"collectionMatchType\", pm.iterationData.get(\"collectionMatchType\"));",
									"pm.environment.set(\"assetMatchString\", pm.iterationData.get(\"assetMatchString\"));",
									"pm.environment.set(\"reviewMatchString\", pm.iterationData.get(\"reviewMatchString\"));",
									"",
									"//misc",
									"pm.environment.set(\"accessLevel\", pm.iterationData.get(\"accessLevel\"));",
									"",
									"// utils = {",
									"//     grantsPostToGet: function (grantsRespArray) {",
									"//     }",
									"// }",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Return API Deployment Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user != \"elevated\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for users not elevated\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"dbInfo.tables exists\", function () {\r",
									"    pm.expect(jsonData.dbInfo).to.exist;\r",
									"    pm.expect(jsonData.dbInfo).to.have.property('tables');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"stigmanVersion exists\", function () {\r",
									"    pm.expect(jsonData.stigmanVersion).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/op/details?elevate={{elevated}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"op",
								"details"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return API version and configuration information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"let configKeys = [\r",
									"    \"version\",\r",
									"    \"commit\"\r",
									"]\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/op/configuration",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"op",
								"configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the requester's user information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Check if object contains info for expected user\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(user);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			],
			"description": "All tests that do not change data."
		},
		{
			"name": "POSTS, Puts, Patches, and Deletes",
			"item": [
				{
					"name": "Prep Data",
					"item": [
						{
							"name": "Import a new STIG - VPN  (as admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"// if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 403\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// if (pm.response.code !== 200) {\r",
											"//     return;\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{vpnStig}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a new STIG - Win 10  (as admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"// if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 403\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// if (pm.response.code !== 200) {\r",
											"//     return;\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{win10Stig}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a new STIG - RHEL 7 (as admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"// if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 403\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// if (pm.response.code !== 200) {\r",
											"//     return;\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{rhel7Stig}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import and overwrite application data PREP FOR UPDATE TESTS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "op PPPD",
					"item": [
						{
							"name": "appdata",
							"item": [
								{
									"name": "Import and overwrite application data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate={{elevated}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data Elevate = false",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "false",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data ZIP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate={{elevated}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data JSON BODY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate={{elevated}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "LoadTestData",
					"item": [
						{
							"name": "load standard test data",
							"item": [
								{
									"name": "Import a new STIG - Win 10  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{win10Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - RHEL 7 (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{rhel7Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - VPN  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{vpnStig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data (as elevated Admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Deletes the specified revision of a STIG v1r0 - with force - could fail if not present, so no tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate=true&force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												":benchmarkId",
												"revisions",
												":revisionStr"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true"
												},
												{
													"key": "force",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "V1R0",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create and delete a new collection, and an asset in the testCollection",
							"item": [
								{
									"name": "Create a Collection in order to delete it",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"    pm.test(\"Status code is 201\", function () {\r",
													"        pm.response.to.have.status(201); \r",
													"    });\r",
													"// }\r",
													"if (pm.response.code !== 201) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let collectionToDelete = respJson.collectionId\r",
													"pm.environment.set(\"collectionToDelete\", collectionToDelete);\r",
													"\r",
													"// let requestToTest = JSON.parse(pm.request.body.raw)\r",
													"\r",
													"//Collection creator cannot see labels on collection it did not give itself a grant for\r",
													"// if (user == \"collectioncreator\") { \r",
													"//     requestToTest.labels = []\r",
													"// }\r",
													"console.log(\"created collection with id: \" + JSON.stringify(collectionToDelete));\r",
													"\r",
													"\r",
													"// created now being returned, but don't know what value it will be.\r",
													"// response validation will verify that the property exists.\r",
													"// delete respJson.created;\r",
													"\r",
													"// pm.test(\"Response matches request\", function () {\r",
													"//     pm.expect(collectionGetToPost(respJson))\r",
													"//     .to.eql(requestToTest)\r",
													"// })\r",
													"\r",
													"// function collectionGetToPost (collectionGet) {\r",
													"//     // extract the transformed and unposted properties\r",
													"//     const {collectionId, grants, labels, ...collectionPost} = collectionGet\r",
													"\r",
													"//     // add transformed properties to the derived post  \r",
													"//     collectionPost.grants = grantsPostToGet(grants)\r",
													"//     collectionPost.labels = labelsPostToGet(labels)\r",
													"\r",
													"//     // the derived post object\r",
													"//     return collectionPost\r",
													"// }\r",
													"\r",
													"// function grantsPostToGet(grantsGetArray) {\r",
													"//     const grantsPostArray = []\r",
													"//     for (const grant of grantsGetArray) {\r",
													"//         grantsPostArray.push({\r",
													"//             userId: grant.user.userId,\r",
													"//             accessLevel: grant.accessLevel\r",
													"//         })\r",
													"//     }\r",
													"//     return grantsPostArray\r",
													"// }\r",
													"\r",
													"// function labelsPostToGet(labelsGetArray) {\r",
													"//    return labelsGetArray.map( label => {\r",
													"//         const {labelId, uses, ...labelPost} = label\r",
													"//         return labelPost\r",
													"\r",
													"//     })\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TEST_delete_{{$randomNoun}}-{{$randomJobType}}\",\n    \"description\": \"Collection TEST description\",\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        },\n        \"history\": {\n            \"maxReviews\": 11\n        }\n  },\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"grants\": [\n        {\n                \"userId\": \"1\",\n                \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"85\",\n                \"accessLevel\": 1\n        }        \n    ],\n    \"labels\": [\n        {\n            \"name\": \"TEST\",\n            \"description\": \"Collection label description\",\n            \"color\": \"ffffff\"\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections?elevate=true&projection=grants&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Same tests as for GET /collection/{collectionId}\r",
													"\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"lvl3\" || user == \"globular\" || user == \"collectioncreator\" ) { \r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    // return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let deletedCollection = respJson.collectionId\r",
													"pm.environment.set(\"deletedCollection\", deletedCollection);\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested projections and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    // var regex = new RegExp(collectionMatchString);\r",
													"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
													"    //     pm.expect(jsonData.name).to.match(regex);\r",
													"    // });\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        pm.expect(jsonData).to.have.property('assets');\r",
													"\r",
													"        for (let asset of jsonData.assets){\r",
													"            // pm.expect(asset).to.have.property('name');\r",
													"            // pm.expect(asset).to.have.property('assetId');\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        pm.expect(jsonData).to.have.property('grants');\r",
													"   \r",
													"        for (let grant of jsonData.grants){\r",
													"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            // pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        pm.expect(jsonData).to.have.property('stigs');\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        // console.log(\"checking owners projection\");\r",
													"        pm.expect(jsonData).to.have.property('owners');\r",
													"        for (let owner of jsonData.owners){\r",
													"            // pm.expect(owner).to.have.all.keys(userKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData).to.have.property('statistics');\r",
													"\r",
													"        // pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// // let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(jsonData.name);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     pm.expect(jsonData.name).to.match(regex);\r",
													"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate=true&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{collectionToDelete}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create an Asset to be deleted in test collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"    pm.test(\"Status code is 201\", function () {\r",
													"        pm.response.to.have.status(201);\r",
													"    });\r",
													"// }\r",
													"if (pm.response.code !== 201) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let assetToBeDeletedInTESTCollection = respJson.assetId\r",
													"pm.environment.set(\"assetToBeDeletedInTESTCollection\", assetToBeDeletedInTESTCollection);\r",
													"\r",
													"console.log(\"created asset with id: \" + JSON.stringify(assetToBeDeletedInTESTCollection));\r",
													"\r",
													"\r",
													"// pm.test(\"Response matches request\", function () {\r",
													"//     pm.expect(assetGetToPost(respJson))\r",
													"//     .to.eql(JSON.parse(pm.request.body.raw))\r",
													"// })\r",
													"\r",
													"// function assetGetToPost(assetGet) {\r",
													"//     // extract the transformed and unposted properties\r",
													"//     const {assetId, collection, stigs, mac, fqdn, ...assetPost} = assetGet\r",
													"    \r",
													"//     // add transformed properties to the derived post  \r",
													"//     assetPost.collectionId = collection.collectionId\r",
													"//     assetPost.stigs = stigsGetToPost(stigs)\r",
													"\r",
													"//     // the derived post object\r",
													"//     return assetPost\r",
													"// }\r",
													"\r",
													"// function stigsGetToPost(stigsGetArray) {\r",
													"//     const stigsPostArray = []\r",
													"//     for (const stig of stigsGetArray) {\r",
													"//         stigsPostArray.push(stig.benchmarkId)\r",
													"//     }\r",
													"//     return stigsPostArray\r",
													"// }\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{testCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"labelIds\": [\"{{testLabel}}\"],\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "set stig-asset grants for a lvl1 user in this collection. Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"{{assetToBeDeletedInTESTCollection}}\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"42\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"154\"\r\n    }        \r\n]\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"grants",
												":userId",
												"access"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												},
												{
													"key": "userId",
													"value": "{{testLvl1User}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import one or more Reviews from a JSON body Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"const expectedResponse = {\r",
													"    rejected: [],\r",
													"    affected: {\r",
													"        updated: 0,\r",
													"        inserted: 1\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"Response matches request\", function () {\r",
													"    pm.expect(jsonData).to.eql(expectedResponse);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												},
												{
													"key": "assetId",
													"value": "{{assetToBeDeletedInTESTCollection}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an Asset in test collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{assetToBeDeletedInTESTCollection}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Collection PPPD",
					"item": [
						{
							"name": "{collection Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}/assets",
											"item": [
												{
													"name": "Set the Assets mapped to a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array with expected length\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"    pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"{{scrapAsset}}\"\n    ]\n"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?projection=restrictedUserAccess",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId",
																"assets"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "restrictedUserAccess",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{scrapCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{scrapBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "grants/{userId}/access PPPD",
									"item": [
										{
											"name": "set stig-asset grants for a lvl1 user in this collection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{scrapBenchmark}}\",\r\n        \"assetId\": \"{{scrapAsset}}\"\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"grants",
														":userId",
														"access"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{scrapCollection}}"
														},
														{
															"key": "userId",
															"value": "{{scrapLvl1}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "metadata",
									"item": [
										{
											"name": "Set all properties of a Collection- with metadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Response has proper projections\", function () {\r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
															"        pm.expect(jsonData).to.have.property('statistics');\r",
															"    }\r",
															"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"        pm.expect(jsonData).to.have.property('stigs');\r",
															"    }\r",
															"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
															"        pm.expect(jsonData).to.have.property('assets');\r",
															"    }\r",
															"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
															"        pm.expect(jsonData).to.have.property('owners');\r",
															"    }\r",
															"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
															"        pm.expect(jsonData).to.have.property('grants');\r",
															"    }            \r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"always\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        }\n  },\n\n  \"description\": null,\n    \"metadata\": {\n        \"{{metadataKey}}\":\"{{metadataValue}}\"\n    },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"87\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}"
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "grants",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "owners"
														},
														{
															"key": "projection",
															"value": "statistics"
														},
														{
															"key": "projection",
															"value": "stigs"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "Set all metadata of a Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"{{testMetadataKey}}\":\"{{testMetadataValue}}\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metadata",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metadata"
													],
													"query": [
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "metadata",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "Set one metadata key/value of a Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 204 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(204);\r",
															"    });\r",
															"}\r",
															"\r",
															"if (pm.response.code !== 204) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"{{metadataValue}}\""
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metadata/keys/:key",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metadata",
														"keys",
														":key"
													],
													"query": [
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "metadata",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "key",
															"value": "{{testMetadataKey}}"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "Merge metadata property/value into a Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"{{testMetadataKey}}\":\"{{metadataValue}}\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metadata",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metadata"
													],
													"query": [
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "metadata",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "Delete one metadata key/value of a Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 204 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(204);\r",
															"    });\r",
															"}\r",
															"\r",
															"if (pm.response.code !== 204) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"{{metadataValue}}\""
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metadata/keys/:key",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metadata",
														"keys",
														":key"
													],
													"query": [
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "metadata",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "key",
															"value": "{{testMetadataKey}}"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										}
									]
								},
								{
									"name": "labels",
									"item": [
										{
											"name": "{labelId}",
											"item": [
												{
													"name": "Replace a Labels Asset Mappings in a Collection",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"// let requestToTest = JSON.parse(pm.request.body.raw)\r",
																	"let testAsset = pm.environment.get(\"testAsset\");\r",
																	"\r",
																	"pm.test(\"Response matches request\", function () {\r",
																	"    pm.expect(jsonData[0].assetId).to.equal(testAsset)\r",
																	"})\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\"{{testAsset}}\"]"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/labels/:labelId/assets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"labels",
																":labelId",
																"assets"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Update Label in a Collection",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"let requestToTest = JSON.parse(pm.request.body.raw)\r",
																	"\r",
																	"pm.test(\"Response matches request\", function () {\r",
																	"    pm.expect(jsonData.description)\r",
																	"    .to.eql(requestToTest.description)\r",
																	"    pm.expect(jsonData.color)\r",
																	"    .to.eql(requestToTest.color)\r",
																	"})\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"test-label-full\",\n  \"description\": \"test label patched\",\n  \"color\": \"aa34cc\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/labels/:labelId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"labels",
																":labelId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "labelId",
																	"value": "{{testLabel}}"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Delete Label in a Collection",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 204 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
																	"        pm.response.to.have.status(204);\r",
																	"    });\r",
																	"}\r",
																	"\r",
																	"if (pm.response.code !== 204) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"// let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"// pm.test(\"Response JSON is an object\", function () {\r",
																	"//     pm.expect(jsonData).to.be.an('object');\r",
																	"//     // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"//     // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"// });\r",
																	"\r",
																	"\r",
																	"\r",
																	"// let requestToTest = JSON.parse(pm.request.body.raw)\r",
																	"\r",
																	"// pm.test(\"Response matches request\", function () {\r",
																	"//     pm.expect(jsonData.description)\r",
																	"//     .to.eql(requestToTest.description)\r",
																	"//     pm.expect(jsonData.color)\r",
																	"//     .to.eql(requestToTest.color)\r",
																	"// })\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/labels/:labelId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"labels",
																":labelId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{scrapCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "labelId",
																	"value": "{{scrapLabel}}"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												}
											]
										},
										{
											"name": "Create Label in a Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 2001for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(201);\r",
															"    });\r",
															"}\r",
															"\r",
															"if (pm.response.code !== 201) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"let requestToTest = JSON.parse(pm.request.body.raw)\r",
															"\r",
															"pm.test(\"Response matches request\", function () {\r",
															"    pm.expect(jsonData.name).to.eql(requestToTest.name)\r",
															"    pm.expect(jsonData.description).to.eql(requestToTest.description)\r",
															"    pm.expect(jsonData.color).to.eql(requestToTest.color)\r",
															"    pm.expect(jsonData.uses).to.eql(0)\r",
															"})\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"test-label-POST\",\n  \"description\": \"test label POSTED\",\n  \"color\": \"aa34cc\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/labels",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"labels"
													],
													"query": [
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "metadata",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{scrapCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										}
									]
								},
								{
									"name": "Review History - Delete and verify pruning",
									"item": [
										{
											"name": "test history prune",
											"item": [
												{
													"name": "Import and overwrite application data (as elevated Admin)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 403\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let response = pm.response.text();\r",
																	"console.log(response)\r",
																	"\r",
																	"pm.test(\"Body contains string\",() => {\r",
																	"  pm.expect(response).to.include(\"Commit successful\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token.stigmanadmin}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "multipart/form-data"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "importFile",
																	"type": "file",
																	"src": "./{{formDataFiles}}/{{appDataFile}}"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/op/appdata?elevate=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"op",
																"appdata"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "true",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Set collection history max reviews to 2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"settings\": {\n        \"history\": {\n            \"maxReviews\": 2\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)"
																},
																{
																	"key": "projection",
																	"value": "assets",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "grants",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "owners"
																},
																{
																	"key": "projection",
																	"value": "statistics"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Post review, triggering history prune.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"// let jsonData = pm.response.json();\r",
																	"// const expectedResponse = {\r",
																	"//     rejected: [],\r",
																	"//     affected: {\r",
																	"//         updated: 0,\r",
																	"//         inserted: 1\r",
																	"//     }\r",
																	"// }\r",
																	"\r",
																	"// pm.test(\"Response matches request\", function () {\r",
																	"//     pm.expect(jsonData).to.eql(expectedResponse);\r",
																	"// })\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "History stats - rule-asset - check history is pruned to 2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"//direct history access limited to lvl2 and above.\r",
																	"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\") {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1, lvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (user == \"lvl2\" ) {//lvl2 could not change collection settings, so history incremented\r",
																	"    pm.test(\"Response has array of asset history count objects\", function () {\r",
																	"        pm.expect(jsonData.collectionHistoryEntryCount).to.eql(3);\r",
																	"    });\r",
																	"}\r",
																	"else { //other users that made it this far could change collection settings, so history was pruned\r",
																	"    pm.test(\"Response has array of asset history count objects\", function () {\r",
																	"        pm.expect(jsonData.collectionHistoryEntryCount).to.eql(2);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"}\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/review-history/stats?assetId={{testAsset}}&ruleId={{testRuleId}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"review-history",
																"stats"
															],
															"query": [
																{
																	"key": "startDate",
																	"value": "2020-08-12",
																	"disabled": true
																},
																{
																	"key": "endDate",
																	"value": "2021-08-12",
																	"disabled": true
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}"
																},
																{
																	"key": "status",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "asset",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Import and overwrite application data (as elevated Admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let response = pm.response.text();\r",
															"console.log(response)\r",
															"\r",
															"pm.test(\"Body contains string\",() => {\r",
															"  pm.expect(response).to.include(\"Commit successful\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{appDataFile}}"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "true",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History records - date and asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\" ||  user == \"lvl2\" ) {\r",
															"    pm.test(\"Status should be is 403 for all users except lvl3 and lvl4 \", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object indicating 4 entries deleted\", function () {\r",
															"    pm.expect(jsonData.HistoryEntriesDeleted).to.equal(4);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history?retentionDate={{testEndDate}}&assetId={{testAsset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history"
													],
													"query": [
														{
															"key": "retentionDate",
															"value": "{{testEndDate}}"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "History records - date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"\r",
															"if (user == \"bizarroLvl1\" ||  user == \"lvl1\" ||  user == \"collectioncreator\" ||  user == \"lvl2\" ) {\r",
															"    pm.test(\"Status should be is 403 for all users except lvl3 and lvl4 \", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object indicating remaining 2 entries before retentionDate were deleted\", function () {\r",
															"    pm.expect(jsonData.HistoryEntriesDeleted).to.equal(2);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/review-history?retentionDate={{testEndDate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"review-history"
													],
													"query": [
														{
															"key": "retentionDate",
															"value": "{{testEndDate}}"
														},
														{
															"key": "assetId",
															"value": "",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Import and overwrite application data (as elevated Admin) Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let response = pm.response.text();\r",
															"console.log(response)\r",
															"\r",
															"pm.test(\"Body contains string\",() => {\r",
															"  pm.expect(response).to.include(\"Commit successful\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{appDataFile}}"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "true",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "export-to",
									"item": [
										{
											"name": "export results to another collection - entire asset - create asset in destination",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin, lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"// let jsonData = JSON.parse(pm.response.text())\r",
															"let jsonDataArray = pm.response.text().split(\"\\n\")\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonDataArray).to.be.an('array');\r",
															"    if (user != \"collectioncreator\" ) {\r",
															"        pm.expect(jsonDataArray).to.have.lengthOf.at.least(1);\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"const requestBody = JSON.parse(pm.request.body.raw)\r",
															"// console.log(reqData)\r",
															"\r",
															"\r",
															"console.log(jsonDataArray)\r",
															"//  pm.test(\"look for stage: result and check cloned collection properties\", function () {\r",
															"    for (message of jsonDataArray){\r",
															"        if (message.length > 0){\r",
															"            let messageObject = JSON.parse(message)\r",
															"                console.log(messageObject)\r",
															"\r",
															"            if (messageObject.stage == \"result\"){\r",
															"                console.log(\"results export probably successful!\")\r",
															"                // pm.expect(messageObject.collection.name).to.eql(expectedCollectionName);\r",
															"                pm.test(\"stage: 'result' found, check for proper counts\", function () {                \r",
															"                    console.log(messageObject.counts)\r",
															"                    pm.expect(messageObject.counts.assetsCreated).to.eql(1);\r",
															"                    pm.expect(messageObject.counts.stigsMapped).to.eql(2);\r",
															"                    pm.expect(messageObject.counts.reviewsInserted).to.eql(9);\r",
															"                    pm.expect(messageObject.counts.reviewsUpdated).to.eql(0);\r",
															"                 })\r",
															"\r",
															"\r",
															"            }\r",
															"        }\r",
															"        // else {\r",
															"        // //   console.log(\"no result yet\")\r",
															"        // pm.expect(\"Reached end of array\").to.equal(\"with no result stage\");\r",
															"\r",
															"        // }        \r",
															"    }\r",
															"//  });\r",
															"\r",
															"\r",
															"\r",
															"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"// // console.log(\"collection string = \" + collectionMatchString);\r",
															"// var regex = new RegExp(collectionMatchString);\r",
															"// let collectionNames = _.map(jsonData, 'name');\r",
															"// // console.log(collectionNames);\r",
															"\r",
															"// pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//     for (let name of collectionNames){\r",
															"//         pm.expect(name).to.match(regex);\r",
															"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
															"\r",
															"//     }\r",
															" \r",
															"// })\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"assetId\": \"42\"\n  }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/export-to/:dstCollectionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"export-to",
														":dstCollectionId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "dstCollectionId",
															"value": "{{scrapCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "export results to another collection - entire asset - asset exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin, lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"// let jsonData = JSON.parse(pm.response.text())\r",
															"let jsonDataArray = pm.response.text().split(\"\\n\")\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonDataArray).to.be.an('array');\r",
															"    if (user != \"collectioncreator\" ) {\r",
															"        pm.expect(jsonDataArray).to.have.lengthOf.at.least(1);\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"const requestBody = JSON.parse(pm.request.body.raw)\r",
															"// console.log(reqData)\r",
															"\r",
															"\r",
															"console.log(jsonDataArray)\r",
															"//  pm.test(\"look for stage: result and check cloned collection properties\", function () {\r",
															"    for (message of jsonDataArray){\r",
															"        if (message.length > 0){\r",
															"            let messageObject = JSON.parse(message)\r",
															"                console.log(messageObject)\r",
															"\r",
															"            if (messageObject.stage == \"result\"){\r",
															"                console.log(\"results export probably successful!\")\r",
															"                // pm.expect(messageObject.collection.name).to.eql(expectedCollectionName);\r",
															"                pm.test(\"stage: 'result' found, check for proper counts\", function () {                \r",
															"                    console.log(messageObject.counts)\r",
															"                    pm.expect(messageObject.counts.assetsCreated).to.eql(0);\r",
															"                    pm.expect(messageObject.counts.stigsMapped).to.eql(0);\r",
															"                    pm.expect(messageObject.counts.reviewsInserted).to.eql(0);\r",
															"                    pm.expect(messageObject.counts.reviewsUpdated).to.eql(9);\r",
															"                 })\r",
															"\r",
															"\r",
															"            }\r",
															"        }\r",
															"        // else {\r",
															"        // //   console.log(\"no result yet\")\r",
															"        // pm.expect(\"Reached end of array\").to.equal(\"with no result stage\");\r",
															"\r",
															"        // }        \r",
															"    }\r",
															"//  });\r",
															"\r",
															"\r",
															"\r",
															"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"// // console.log(\"collection string = \" + collectionMatchString);\r",
															"// var regex = new RegExp(collectionMatchString);\r",
															"// let collectionNames = _.map(jsonData, 'name');\r",
															"// // console.log(collectionNames);\r",
															"\r",
															"// pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//     for (let name of collectionNames){\r",
															"//         pm.expect(name).to.match(regex);\r",
															"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
															"\r",
															"//     }\r",
															" \r",
															"// })\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"assetId\": \"42\"\n  }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/export-to/:dstCollectionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"export-to",
														":dstCollectionId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "dstCollectionId",
															"value": "{{scrapCollection}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Merge provided properties with a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Response has proper projections\", function () {\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        pm.expect(jsonData).to.have.property('statistics');\r",
													"    }\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        pm.expect(jsonData).to.have.property('stigs');\r",
													"    }\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        pm.expect(jsonData).to.have.property('assets');\r",
													"    }\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        pm.expect(jsonData).to.have.property('owners');\r",
													"    }\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        pm.expect(jsonData).to.have.property('grants');\r",
													"    }            \r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 1\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"87\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set all properties of a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													"pm.test(\"Response has proper projections\", function () {\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        pm.expect(jsonData).to.have.property('statistics');\r",
													"    }\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        pm.expect(jsonData).to.have.property('stigs');\r",
													"    }\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        pm.expect(jsonData).to.have.property('assets');\r",
													"    }\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        pm.expect(jsonData).to.have.property('owners');\r",
													"    }\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        pm.expect(jsonData).to.have.property('grants');\r",
													"    }            \r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n  \"description\": null,\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        }\n  },\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"87\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Same tests as for GET /collection/{collectionId}\r",
													"\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"lvl3\" || user == \"globular\" || user == \"collectioncreator\" ) { \r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    // return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested projections and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    // var regex = new RegExp(collectionMatchString);\r",
													"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
													"    //     pm.expect(jsonData.name).to.match(regex);\r",
													"    // });\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        pm.expect(jsonData).to.have.property('assets');\r",
													"\r",
													"        for (let asset of jsonData.assets){\r",
													"            // pm.expect(asset).to.have.property('name');\r",
													"            // pm.expect(asset).to.have.property('assetId');\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        pm.expect(jsonData).to.have.property('grants');\r",
													"   \r",
													"        for (let grant of jsonData.grants){\r",
													"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            // pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        pm.expect(jsonData).to.have.property('stigs');\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        // console.log(\"checking owners projection\");\r",
													"        pm.expect(jsonData).to.have.property('owners');\r",
													"        for (let owner of jsonData.owners){\r",
													"            // pm.expect(owner).to.have.all.keys(userKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData).to.have.property('statistics');\r",
													"\r",
													"        // pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// // let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(jsonData.name);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     pm.expect(jsonData.name).to.match(regex);\r",
													"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{deleteCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create a Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201); \r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let requestToTest = JSON.parse(pm.request.body.raw)\r",
											"\r",
											"//Collection creator cannot see labels on collection it did not give itself a grant for\r",
											"if (user == \"collectioncreator\") { \r",
											"    requestToTest.labels = []\r",
											"}\r",
											"console.log(\"requestToTest: \" + JSON.stringify(requestToTest));\r",
											"\r",
											"\r",
											"// created now being returned, but don't know what value it will be.\r",
											"// response validation will verify that the property exists.\r",
											"delete respJson.created;\r",
											"\r",
											"pm.test(\"Response matches request\", function () {\r",
											"    pm.expect(collectionGetToPost(respJson))\r",
											"    .to.eql(requestToTest)\r",
											"})\r",
											"\r",
											"function collectionGetToPost (collectionGet) {\r",
											"    // extract the transformed and unposted properties\r",
											"    const {collectionId, grants, labels, ...collectionPost} = collectionGet\r",
											"\r",
											"    // add transformed properties to the derived post  \r",
											"    collectionPost.grants = grantsPostToGet(grants)\r",
											"    collectionPost.labels = labelsPostToGet(labels)\r",
											"\r",
											"    // the derived post object\r",
											"    return collectionPost\r",
											"}\r",
											"\r",
											"function grantsPostToGet(grantsGetArray) {\r",
											"    const grantsPostArray = []\r",
											"    for (const grant of grantsGetArray) {\r",
											"        grantsPostArray.push({\r",
											"            userId: grant.user.userId,\r",
											"            accessLevel: grant.accessLevel\r",
											"        })\r",
											"    }\r",
											"    return grantsPostArray\r",
											"}\r",
											"\r",
											"function labelsPostToGet(labelsGetArray) {\r",
											"   return labelsGetArray.map( label => {\r",
											"        const {labelId, uses, ...labelPost} = label\r",
											"        return labelPost\r",
											"\r",
											"    })\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST\",\n    \"description\": \"Collection TEST description\",\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        },\n        \"history\": {\n            \"maxReviews\": 11\n        }\n  },\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"grants\": [\n        {\n                \"userId\": \"1\",\n                \"accessLevel\": 4\n        }\n    ],\n    \"labels\": [\n        {\n            \"name\": \"TEST\",\n            \"description\": \"Collection label description\",\n            \"color\": \"ffffff\"\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/collections?elevate={{elevated}}&projection=grants&projection=labels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "labels"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Asset PPPD",
					"item": [
						{
							"name": "{asset Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}",
											"item": [
												{
													"name": "Delete a STIG assignment to an Asset",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/assets/:assetId/stigs/:benchmarkId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"assets",
																":assetId",
																"stigs",
																":benchmarkId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "assetId",
																	"value": "{{scrapAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{scrapBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PUT a STIG assignment to an Asset Copy 3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/assets/:assetId/stigs/:benchmarkId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"assets",
																":assetId",
																"stigs",
																":benchmarkId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "assetId",
																	"value": "{{scrapAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{scrapBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete all STIG assignments to an Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an empty array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    pm.expect(jsonData).to.have.lengthOf(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{scrapAsset}}",
															"description": "(Required) A path parameter that indentifies an Asset"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "metadata",
									"item": [
										{
											"name": "Set all properties of an Asset- with metadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"{{metadataKey}}\":\"{{metadataValue}}\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}\n"
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "statusStats"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "stigGrants"
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{scrapAsset}}"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "Set all metadata of an Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"{{testMetadataKey}}\":\"{{testMetadataValue}}\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/metadata",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"metadata"
													],
													"query": [
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "metadata",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{scrapAsset}}"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "Set one metadata key/value of an Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator, lvl1, or lvl2\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 204 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(204);\r",
															"    });\r",
															"}\r",
															"\r",
															"if (pm.response.code !== 204) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"{{metadataValue}}\""
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/metadata/keys/:key",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"metadata",
														"keys",
														":key"
													],
													"query": [
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "metadata",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{scrapAsset}}"
														},
														{
															"key": "key",
															"value": "{{testMetadataKey}}"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "Delete one metadata key/value of an Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator, or lvl1, or lvl2\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 204 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(204);\r",
															"    });\r",
															"}\r",
															"\r",
															"if (pm.response.code !== 204) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"{{metadataValue}}\""
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/metadata/keys/:key",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"metadata",
														"keys",
														":key"
													],
													"query": [
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "metadata",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{scrapAsset}}"
														},
														{
															"key": "key",
															"value": "{{testMetadataKey}}"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "Merge metadata property/value into an Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"{{testMetadataKey}}\":\"{{metadataValue}}\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/metadata",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"metadata"
													],
													"query": [
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "metadata",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{scrapAsset}}"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										}
									]
								},
								{
									"name": "Merge provided properties with an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{scrapAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set all properties of an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"labelIds\": [\n        \"df4e6836-a003-11ec-b1bc-0242ac110002\"\n    ],\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{scrapAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{deleteAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Assets-batch-delete",
							"item": [
								{
									"name": "Import and overwrite application data (as elevated Admin) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Assets - expect success for valid users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"let jsonDataExpected =\r",
													"{\r",
													"    \"operation\": \"deleted\",\r",
													"    \"assetIds\": [\r",
													"        \"29\",\r",
													"        \"42\"\r",
													"    ]\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"operation = deleted and AssetIs are accurate\", function () {\r",
													"    pm.expect(jsonData).to.eql(jsonDataExpected);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"operation\":\"delete\",\r\n    \"assetIds\":\r\n        [\"29\",\"42\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Assets - assets not in collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"if (pm.response.code !== 403) {\r",
													"    return;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"operation\":\"delete\",\r\n    \"assetIds\":\r\n        [\"258\",\"260\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Assets - collection does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"if (pm.response.code !== 403) {\r",
													"    return;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"operation\":\"delete\",\r\n    \"assetIds\":\r\n        [\"258\",\"260\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/assets?collectionId=65465",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "collectionId",
													"value": "65465"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create an Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches request\", function () {\r",
											"    pm.expect(assetGetToPost(respJson))\r",
											"    .to.eql(JSON.parse(pm.request.body.raw))\r",
											"})\r",
											"\r",
											"function assetGetToPost(assetGet) {\r",
											"    // extract the transformed and unposted properties\r",
											"    const {assetId, collection, stigs, mac, fqdn, ...assetPost} = assetGet\r",
											"    \r",
											"    // add transformed properties to the derived post  \r",
											"    assetPost.collectionId = collection.collectionId\r",
											"    assetPost.stigs = stigsGetToPost(stigs)\r",
											"\r",
											"    // the derived post object\r",
											"    return assetPost\r",
											"}\r",
											"\r",
											"function stigsGetToPost(stigsGetArray) {\r",
											"    const stigsPostArray = []\r",
											"    for (const stig of stigsGetArray) {\r",
											"        stigsPostArray.push(stig.benchmarkId)\r",
											"    }\r",
											"    return stigsPostArray\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"labelIds\": [\"{{scrapLabel}}\"],\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import and overwrite application data (as elevated Admin) Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews PPPD",
					"item": [
						{
							"name": "reviews",
							"item": [
								{
									"name": "{asset Id}",
									"item": [
										{
											"name": "{rule Id}",
											"item": [
												{
													"name": "PUT Review: stigs and rule projections",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"let userId = pm.environment.get(\"userId\");\r",
																	"console.log(\"user: \" + user);\r",
																	"console.log(\"userId: \" + userId)\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"const respData = pm.response.json()\r",
																	"const reqData = JSON.parse(pm.request.body.raw)\r",
																	"const expectedReview = {\r",
																	"  assetId: \"42\",\r",
																	"  assetName: \"Collection_X_lvl1_asset-1\",\r",
																	"  assetLabelIds: [\r",
																	"    \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
																	"    \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
																	"    ],\r",
																	"  ruleId: pm.environment.get(\"testRuleId\"),\r",
																	" ruleIds: [\r",
																	"        pm.environment.get(\"testRuleId\")\r",
																	"    ],  \r",
																	"  result: reqData.result,\r",
																	"  resultEngine: null,\r",
																	"  detail: reqData.detail,\r",
																	"  autoResult: reqData.autoResult,\r",
																	"  comment: reqData.comment,\r",
																	"  userId: userId,\r",
																	"  username: user,\r",
																	"  ts: respData.ts,\r",
																	"  touchTs: respData.touchTs,\r",
																	"  status: {\r",
																	"      ts: respData.status.ts,\r",
																	"      text: null,\r",
																	"      user: {\r",
																	"          userId: userId,\r",
																	"          username: user\r",
																	"      },\r",
																	"      label: reqData.status\r",
																	"  },\r",
																	"  stigs:[\r",
																	"        {\r",
																	"            isDefault: true,\r",
																	"            ruleCount: 81,\r",
																	"            benchmarkId: \"VPN_SRG_TEST\",\r",
																	"            revisionStr: \"V1R1\",\r",
																	"            benchmarkDate: \"2019-07-19\",\r",
																	"            revisionPinned: false\r",
																	"        }\r",
																	"    ],\r",
																	"  rule: {\r",
																	"    title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
																	"    ruleId: \"SV-106179r1_rule\",\r",
																	"    version: \"SRG-NET-000019-VPN-000040\",\r",
																	"    severity: \"medium\"\r",
																	"  }\r",
																	"}\r",
																	"pm.test(\"Response matches expected response\", function () {\r",
																	"    try {\r",
																	"        pm.expect(respData).to.eql(expectedReview)\r",
																	"    }\r",
																	"    catch (e) {\r",
																	"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
																	"        throw(e)\r",
																	"    }\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "PUT Review: saved, pass, no detail",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\")\r",
																	"console.log(\"user: \" + user)\r",
																	"\r",
																	"let jsonData = pm.response.json()\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) {\r",
																	"    pm.test(\"User is forbidden by grant\", function () {\r",
																	"        pm.response.to.have.status(403)\r",
																	"        // pm.expect(jsonData).to.have.all.keys(\"error\",\"stack\")\r",
																	"    })\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Review was saved\", function () {\r",
																	"        pm.response.to.have.status(200)\r",
																	"    })\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"saved\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "PUT Review: submitted, pass, no detail Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\")\r",
																	"console.log(\"user: \" + user)\r",
																	"\r",
																	"let jsonData = pm.response.json()\r",
																	"pm.test(\"Status should be 403\", function () {\r",
																	"    pm.response.to.have.status(403)\r",
																	"})\r",
																	"pm.test(\"Response JSON is an error object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an(\"object\")\r",
																	"    pm.expect(jsonData).to.have.property(\"error\")\r",
																	"})\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) {\r",
																	"    pm.test(\"Response does not have property detail\", function () {\r",
																	"        pm.expect(jsonData).to.not.have.property(\"detail\")\r",
																	"    })\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Response has property detail\", function () {\r",
																	"        pm.expect(jsonData).to.have.property(\"detail\")\r",
																	"    })\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "PUT Review: accepted, pass, no detail",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\")\r",
																	"console.log(\"user: \" + user)\r",
																	"\r",
																	"let jsonData = pm.response.json()\r",
																	"pm.test(\"Status should be 403\", function () {\r",
																	"    pm.response.to.have.status(403)\r",
																	"})\r",
																	"pm.test(\"Response JSON is an error object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an(\"object\")\r",
																	"    pm.expect(jsonData).to.have.property(\"error\")\r",
																	"})\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) {\r",
																	"    pm.test(\"Response does not have property detail\", function () {\r",
																	"        pm.expect(jsonData).to.not.have.property(\"detail\")\r",
																	"    })\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Response has property detail\", function () {\r",
																	"        pm.expect(jsonData).to.have.property(\"detail\")\r",
																	"    })\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"accepted\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "PUT Review: submit, fail, no comment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\")\r",
																	"console.log(\"user: \" + user)\r",
																	"\r",
																	"let jsonData = pm.response.json()\r",
																	"pm.test(\"Status should be 403\", function () {\r",
																	"    pm.response.to.have.status(403)\r",
																	"})\r",
																	"pm.test(\"Response JSON is an error object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an(\"object\")\r",
																	"    pm.expect(jsonData).to.have.property(\"error\")\r",
																	"})\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) {\r",
																	"    pm.test(\"Response does not have property detail\", function () {\r",
																	"        pm.expect(jsonData).to.not.have.property(\"detail\")\r",
																	"    })\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Response has property detail\", function () {\r",
																	"        pm.expect(jsonData).to.have.property(\"detail\")\r",
																	"    })\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"fail\",\n    \"detail\": \"string\",\n    \"comment\": \"\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Set all properties of a Review - with metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\",\n    \"metadata\": {\n        \"{{metadataKey}}\":\"{{metadataValue}}\"\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs&projection=metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																},
																{
																	"key": "projection",
																	"value": "metadata"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Set all metadata of a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200 for all users except collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"{{testMetadataKey}}\":\"{{testMetadataValue}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Set one metadata key/value of a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 204 for all users but collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(204);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 204) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "\"{{metadataValue}}\""
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata/keys/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata",
																"keys",
																":key"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																},
																{
																	"key": "key",
																	"value": "{{testMetadataKey}}"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Delete one metadata key/value of a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 204 for all users but collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(204);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 204) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "\"{{metadataValue}}\""
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata/keys/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata",
																"keys",
																":key"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																},
																{
																	"key": "key",
																	"value": "{{testMetadataKey}}"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Import and overwrite application data (as elevated Admin) Copy 2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 403\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let response = pm.response.text();\r",
																	"console.log(response)\r",
																	"\r",
																	"pm.test(\"Body contains string\",() => {\r",
																	"  pm.expect(response).to.include(\"Commit successful\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{token.stigmanadmin}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "multipart/form-data"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "importFile",
																	"type": "file",
																	"src": "./{{formDataFiles}}/{{appDataFile}}"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/op/appdata?elevate=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"op",
																"appdata"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "true",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PATCH Review to Accepted",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\")\r",
																	"console.log(\"user: \" + user)\r",
																	"\r",
																	"let jsonData = pm.response.json()\r",
																	"\r",
																	"switch (user) {\r",
																	"    case \"collectioncreator\":\r",
																	"        pm.test(\"Status is 403\", () => pm.response.to.have.status(403))\r",
																	"        pm.test(\"Response is error without detail\", () => {\r",
																	"            pm.expect(jsonData).to.be.an(\"object\")\r",
																	"            pm.expect(jsonData).to.have.property(\"error\")\r",
																	"            pm.expect(jsonData).to.not.have.property(\"detail\")\r",
																	"        })\r",
																	"        break\r",
																	"    case \"lvl1\":\r",
																	"    case \"lvl2\":\r",
																	"        pm.test(\"Status is 403\", () => pm.response.to.have.status(403))\r",
																	"        pm.test(\"Response is error with detail\", () => {\r",
																	"            pm.expect(jsonData).to.be.an(\"object\")\r",
																	"            pm.expect(jsonData).to.have.property(\"error\")\r",
																	"            pm.expect(jsonData).to.have.property(\"detail\")\r",
																	"        })\r",
																	"        break\r",
																	"    case \"lvl3\":\r",
																	"    case \"lvl4\":\r",
																	"    case \"stigmanadmin\":\r",
																	"        pm.test(\"Status is 200\", () => pm.response.to.have.status(200))\r",
																	"        pm.test(\"Response has proper timestamps\", () => {\r",
																	"            pm.expect(jsonData).to.have.property(\"touchTs\").to.eql(jsonData.status.ts)\r",
																	"            pm.expect(jsonData.status).to.have.property(\"ts\").to.not.eql(jsonData.ts)        \r",
																	"        })\r",
																	"        break\r",
																	"}\r",
																	"\r",
																	"// pm.test(\"Response has proper timestamps\", () => {\r",
																	"//     pm.expect(jsonData).to.be.an(\"object\");\r",
																	"//     pm.expect(jsonData).to.have.property(\"result\").to.eql(\"pass\");\r",
																	"//     pm.expect(jsonData).to.have.property(\"touchTs\").to.eql(jsonData.ts)\r",
																	"//     pm.expect(jsonData.status).to.have.property(\"ts\").to.not.eql(jsonData.ts)\r",
																	"// });"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"accepted\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Merge metadata property/value into a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"{{testMetadataKey}}\":\"{{metadataValue}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Merge provided properties with a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"status\": \"submitted\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs&projection=metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																},
																{
																	"key": "projection",
																	"value": "metadata"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Update the given properties of a Review, if it exists"
													},
													"response": []
												},
												{
													"name": "Delete a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Import one or more Reviews from a JSON body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"const expectedResponse = {\r",
															"    rejected: [],\r",
															"    affected: {\r",
															"        updated: 0,\r",
															"        inserted: 1\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Response matches request\", function () {\r",
															"    pm.expect(jsonData).to.eql(expectedResponse);\r",
															"})\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "resultEngine tests",
					"item": [
						{
							"name": "Import and overwrite application data (as elevated Admin) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a Review - freshRuleId - review may or may not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 204\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "{{testFreshRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the Review for an Asset and Rule Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response JSON is an object, timestamps match\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.property(\"touchTs\").to.eql(jsonData.ts)\r",
											"    pm.expect(jsonData.status).to.have.property(\"ts\").to.eql(jsonData.ts)    \r",
											"});\r",
											"\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"    pm.expect(jsonData.stigs).to.exist;\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
											"    pm.expect(jsonData.history).to.exist;\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
											"    pm.expect(jsonData.rule).to.exist;\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
											"    pm.expect(jsonData.metadata).to.exist;\r",
											"}\r",
											"pm.test(\"Check if object contains all provided keys\", function () {\r",
											"    // pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if object contains proper ruleId\", function () {\r",
											"    let testRuleId = pm.environment.get(\"testRuleId\");\r",
											"    pm.expect(jsonData.ruleId).to.eql(testRuleId);\r",
											"});\r",
											"\r",
											"pm.test(\"Check review comment for regex match string\", function () {\r",
											"    let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
											"    var regex = new RegExp(reviewMatchString);\r",
											"    pm.expect(jsonData.detail).to.match(regex);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=history&projection=stigs&projection=rule&projection=metadata",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "history"
										},
										{
											"key": "projection",
											"value": "stigs"
										},
										{
											"key": "projection",
											"value": "rule"
										},
										{
											"key": "projection",
											"value": "metadata"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "{{testRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "resultEngine only - expect fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\")\r",
											"console.log(\"user: \" + user)\r",
											"\r",
											"let jsonData = pm.response.json()\r",
											"\r",
											"pm.test(\"Status is 422\", () => pm.response.to.have.status(422))\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resultEngine\": {\n      \"type\": \"script\",\n      \"product\": \"Evaluate-STIG\",\n      \"version\": \"1.2310.1\",\n      \"time\": \"2023-12-11T12:56:14.3576272-05:00\",\n      \"checkContent\": {\n        \"location\": \"VPN_Checks:1.2023.7.24\"\n      },\n      \"overrides\": [\n        {\n          \"authority\": \"Some_AnswerFile.xml\",\n          \"oldResult\": \"unknown\",\n          \"newResult\": \"pass\",\n          \"remark\": \"Evaluate-STIG Answer File\"\n        }\n      ]\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "{{testRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "resultEngine only - expect success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get('user');\r",
											"\r",
											"console.log('user: ' + user)\r",
											"\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status is 200', () => pm.response.to.have.status(200))\r",
											"\r",
											"pm.test(\"Response has proper timestamps\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData).to.have.property(\"result\").to.eql(\"pass\");\r",
											"    pm.expect(jsonData).to.have.property(\"touchTs\").to.eql(jsonData.ts)\r",
											"    pm.expect(jsonData.status).to.have.property(\"ts\").to.not.eql(jsonData.ts)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"pass\",\n    \"resultEngine\": {\n      \"type\": \"script\",\n      \"product\": \"Evaluate-STIG\",\n      \"version\": \"1.2310.1\",\n      \"time\": \"2023-12-11T12:56:14.3576272-05:00\",\n      \"checkContent\": {\n        \"location\": \"VPN_Checks:1.2023.7.24\"\n      },\n      \"overrides\": [\n        {\n          \"authority\": \"Some_AnswerFile.xml\",\n          \"oldResult\": \"unknown\",\n          \"newResult\": \"pass\",\n          \"remark\": \"Evaluate-STIG Answer File\"\n        }\n      ]\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "{{testRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "PUT Review: no resultEngine - check response does not include \"resultEngine\": 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 201 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"const respData = pm.response.json()\r",
											"const reqData = JSON.parse(pm.request.body.raw)\r",
											"const expectedReview = {\r",
											"  assetId: \"42\",\r",
											"  assetName: \"Collection_X_lvl1_asset-1\",\r",
											"  assetLabelIds: [\r",
											"    \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
											"    \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
											"    ],\r",
											"  ruleId: pm.environment.get(\"testFreshRuleId\"),\r",
											" ruleIds: [\r",
											"        pm.environment.get(\"testFreshRuleId\")\r",
											"    ],  \r",
											"  result: reqData.result,\r",
											"  resultEngine: null,\r",
											"  detail: reqData.detail,\r",
											"  autoResult: false,\r",
											"  comment: \"\",\r",
											"  userId: userId,\r",
											"  username: user,\r",
											"  ts: respData.ts,\r",
											"  touchTs: respData.touchTs,\r",
											"  status: {\r",
											"      ts: respData.status.ts,\r",
											"      text: null,\r",
											"      user: {\r",
											"          userId: userId,\r",
											"          username: user\r",
											"      },\r",
											"      label: reqData.status\r",
											"  }\r",
											"}\r",
											"\r",
											"// created now being returned, but don't know what value it will be. response validation will verify that the property exists.\r",
											"\r",
											"// delete respData.created;\r",
											"\r",
											"pm.test(\"Response matches expected response\", function () {\r",
											"    try {\r",
											"        pm.expect(respData).to.eql(expectedReview)\r",
											"    }\r",
											"    catch (e) {\r",
											"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"        throw(e)\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\",\n    \"comment\": null,\n    \"status\": \"saved\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "{{testFreshRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "Delete a Review - freshRuleId - review may or may not exist Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "{{testFreshRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import one or more Reviews from a JSON body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"const expectedResponse = {\r",
											"    rejected: [],\r",
											"    affected: {\r",
											"        updated: 1,\r",
											"        inserted: 1\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response as expected\", function () {\r",
											"    pm.expect(jsonData).to.eql(expectedResponse);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    },\n    {\n    \"ruleId\": \"{{testFreshRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\",\n    \"comment\": \"sure\",\n    \"status\": \"saved\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users PPD",
					"item": [
						{
							"name": "{user Id}",
							"item": [
								{
									"name": "Merge provided properties with a User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for user that is elevated\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code != 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required keys\", function () {\r",
													"    // pm.expect(jsonData).to.have.all.keys(userKeys);\r",
													"});\r",
													"\r",
													"for (let grant of jsonData.collectionGrants){\r",
													"    // pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"    // pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains info for expected user\", function () {\r",
													"    let scrapLvl1 = pm.environment.get(\"scrapLvl1\");\r",
													"    pm.expect(jsonData.userId).to.eql(scrapLvl1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"bizarroLvl1\",\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"{{scrapCollection}}\",\n            \"accessLevel\": 1\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "privileges",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statistics"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{scrapLvl1}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set all properties of a User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for users not elevated\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains all required keys\", function () {\r",
													"    // pm.expect(jsonData).to.have.all.keys(userKeys);\r",
													"\r",
													"\r",
													"    for (let grant of jsonData.collectionGrants){\r",
													"        // pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"        // pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains info for expected user\", function () {\r",
													"    let scrapLvl1 = pm.environment.get(\"scrapLvl1\");\r",
													"    pm.expect(jsonData.userId).to.eql(scrapLvl1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"bizarroLvl1\",\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"{{scrapCollection}}\",\n            \"accessLevel\": 1\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "privileges",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statistics"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{scrapLvl1}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a User - fail due to user access record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 422 when deleting a user that has accessed the system\", function () {\r",
													"        pm.response.to.have.status(422);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required keys\", function () {\r",
													"    // pm.expect(jsonData).to.have.all.keys(userKeys);\r",
													"\r",
													"    for (let grant of jsonData.collectionGrants){\r",
													"        // pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"        // pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.exist;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{scrapAdmin}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a User - succeed, as user has never accessed th system",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for users not elevated\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{deleteUser}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create a User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be 201 for elevated users\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status should be 403 for non-elevated users\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains all required keys\", function () {\r",
											"    // pm.expect(jsonData).to.have.all.keys(userKeys);\r",
											"\r",
											"    for (let grant of jsonData.collectionGrants){\r",
											"        // pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
											"        // pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
											"    pm.expect(jsonData.statistics).to.exist;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"TEST_USER_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"{{scrapCollection}}\",\n            \"accessLevel\": 1\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "wat",
											"description": "A query parameter that filters on a username",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Asset Transfers",
					"item": [
						{
							"name": "Merge provided properties with an Asset - Change Collection - Fail for all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code should be 403 for all users\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 200\", function () {\r",
											"//         pm.response.to.have.status(200);\r",
											"//     });\r",
											"// }\r",
											"// if (pm.response.code !== 200) {\r",
											"//     return;\r",
											"// }\r",
											"\r",
											"\r",
											"// let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"// pm.test(\"Response JSON is an object\", function () {\r",
											"//     pm.expect(jsonData).to.be.an('object');\r",
											"//     // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"//     // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectionId\": \"{{scrapLvl1}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Merge provided properties with an Asset - Change Collection - valid for lvl3 and lvl4 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											"\r",
											"let destinationCollectionId = pm.environment.get(\"scrapCollection\");\r",
											"\r",
											"pm.test(\"Response JSON indicates proper collection\", function () {\r",
											"    // pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData.collection.collectionId).to.equal(destinationCollectionId);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response JSON indicates labelIds assigned to transfered assets\", function () {\r",
											"    // pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData.labelIds).to.have.lengthOf(2);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response JSON indicates stigGrants were cleared\", function () {\r",
											"    for (const stigGrant of jsonData.stigGrants) {\r",
											"        pm.expect(stigGrant.users).to.have.lengthOf(0);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import and overwrite application data (as elevated Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set all properties of an Asset - Change Collection - invalid for all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"pm.test(\"Status code should be 403 for all users\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 200\", function () {\r",
											"//         pm.response.to.have.status(200);\r",
											"//     });\r",
											"// }\r",
											"// if (pm.response.code !== 200) {\r",
											"//     return;\r",
											"// }\r",
											"\r",
											"\r",
											"// let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"// pm.test(\"Response JSON is an object\", function () {\r",
											"//     pm.expect(jsonData).to.be.an('object');\r",
											"//     // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"//     // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{scrapLvl1}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set all properties of an Asset - Change Collection - valid for stigmanAdmin only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"let destinationCollectionId = pm.environment.get(\"scrapCollection\");\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON indicates proper collection\", function () {\r",
											"    // pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData.collection.collectionId).to.equal(destinationCollectionId);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response JSON indicates labelIds assigned to transfered assets\", function () {\r",
											"    // pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData.labelIds).to.have.lengthOf(0);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON indicates stigGrants were cleared\", function () {\r",
											"    for (const stigGrant of jsonData.stigGrants) {\r",
											"        pm.expect(stigGrant.users).to.have.lengthOf(0);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"labelIds\": [],\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Batch Review Editing",
					"item": [
						{
							"name": "update filter",
							"item": [
								{
									"name": "exclude all",
									"item": [
										{
											"name": "Import BATCH application data (as elevated Admin) Copy 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let response = pm.response.text();\r",
															"console.log(response)\r",
															"\r",
															"pm.test(\"Body contains string\",() => {\r",
															"  pm.expect(response).to.include(\"Commit successful\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{appDataFile}}",
															"disabled": true
														},
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "true",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "POST batch review: update but with exclusionary updateFilters (request should do nothing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"let userId = pm.environment.get(\"userId\");\r",
															"console.log(\"user: \" + user);\r",
															"console.log(\"userId: \" + userId)\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"const respData = pm.response.json()\r",
															"\r",
															"pm.test(\"test inserted\", function () {\r",
															"    // try {\r",
															"        pm.expect(respData.inserted).to.eql(0)\r",
															"    // }\r",
															"    // catch (e) {\r",
															"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"    //     throw(e)\r",
															"    // }\r",
															"});\r",
															"pm.test(\"test updated\", function () {\r",
															"        pm.expect(respData.updated).to.eql(0)\r",
															"});\r",
															"\r",
															"pm.test(\"test failed validation\", function () {\r",
															"        pm.expect(respData.failedValidation).to.eql(0)\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"validation errors\", function () {\r",
															"        pm.expect(respData.validationErrors).to.have.length(0)\r",
															"\r",
															"});\r",
															"\r",
															"// const reqData = JSON.parse(pm.request.body.raw)\r",
															"// const expectedReview = {\r",
															"//   assetId: \"42\",\r",
															"//   assetName: \"Collection_X_lvl1_asset-1\",\r",
															"//   assetLabelIds: [\r",
															"//     \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
															"//     \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
															"//     ],\r",
															"//   ruleId: pm.environment.get(\"testRuleId\"),\r",
															"//   result: reqData.result,\r",
															"//   resultEngine: null,\r",
															"//   detail: reqData.detail,\r",
															"//   autoResult: reqData.autoResult,\r",
															"//   comment: reqData.comment,\r",
															"//   userId: userId,\r",
															"//   username: user,\r",
															"//   ts: respData.ts,\r",
															"//   touchTs: respData.touchTs,\r",
															"//   status: {\r",
															"//       ts: respData.status.ts,\r",
															"//       text: null,\r",
															"//       user: {\r",
															"//           userId: userId,\r",
															"//           username: user\r",
															"//       },\r",
															"//       label: reqData.status\r",
															"//   },\r",
															"//   stigs: [\"VPN_SRG_TEST\"],\r",
															"//   rule: {\r",
															"//     title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
															"//     ruleId: \"SV-106179r1_rule\",\r",
															"//     version: \"SRG-NET-000019-VPN-000040\",\r",
															"//     severity: \"medium\"\r",
															"//   }\r",
															"// }\r",
															"// pm.test(\"Response matches expected response\", function () {\r",
															"//     try {\r",
															"//         pm.expect(respData).to.eql(expectedReview)\r",
															"//     }\r",
															"//     catch (e) {\r",
															"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"//         throw(e)\r",
															"//     }\r",
															"// });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let batchSourceReview =\r",
															"{\r",
															"    \"source\":\r",
															"    {\r",
															"        \"review\":\r",
															"            {\r",
															"                \"result\":\"fail\",\r",
															"                \"detail\":\"tesetsetset\"\r",
															"            }\r",
															"       \r",
															"    },\r",
															"    \"assets\":{\r",
															"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
															"    },\r",
															"    \"rules\":{\r",
															"        \"ruleIds\":[\"SV-106179r1_rule\"]\r",
															"    },\r",
															"    \"updateFilters\":[\r",
															"        {\r",
															"            \"field\": \"result\",\r",
															"            \"value\" : \"informational\"\r",
															"            }\r",
															"    ],\r",
															"\"action\": \"update\"\r",
															"}\r",
															"\r",
															"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{batchSourceReview}}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "batch check - one reset resultengine, rest = source Copy 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"\r",
															"// request with update filter looking for informational result should not change any reviews.\r",
															"if (batchSourceReview.updateFilters[0].value == \"informational\" ) {\r",
															"  console.log(\"exclusionary filter test\")\r",
															"  pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"\r",
															"  pm.expect(jsonData).to.have.lengthOf(2);\r",
															"  })\r",
															"\r",
															"  for (let item of jsonData){\r",
															"      // CASE: test update with exclusionary filter. Nothing should have source detail \r",
															"    pm.test(\"test update with exclusionary filter. Nothing should have source detail \", function () {\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"        pm.expect(item.detail).to.not.eql(batchSourceReview.source.review.detail);\r",
															"        }\r",
															"    })\r",
															"  }\r",
															"\r",
															"  return;\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"\r",
															"    if (user == \"lvl1\" ) {\r",
															"        pm.expect(jsonData).to.have.lengthOf(2);\r",
															"    }\r",
															"    else{\r",
															"      if (batchSourceReview.rules.benchmarkIds){\r",
															"        console.log(\"request targeted benchmark rules\")\r",
															"        pm.expect(jsonData).to.have.lengthOf(243);\r",
															"      }\r",
															"      else{\r",
															"        console.log(\"request targeted one rule\")\r",
															"\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"          console.log(\"request updated for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(2);\r",
															"        }\r",
															"        else{\r",
															"          console.log(\"request inserted for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(3);\r",
															"        }\r",
															"      }\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"const generatedReviewFields = {\r",
															"        // ruleId: \"SV-106179r1_rule\",\r",
															"        // result: \"fail\",\r",
															"        // detail: \"test batch\",\r",
															"        // comment: \"\",\r",
															"        // userId: \"87\",\r",
															"        // ts: \"\",\r",
															"        // touchTs: \"\",\r",
															"        username: user,\r",
															"        status: {\r",
															"            user: {\r",
															"                username: user\r",
															"            },\r",
															"            // label: \"saved\"\r",
															"        }        \r",
															"      };\r",
															"\r",
															"// let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"console.log(\"sourceReview: \" + batchSourceReview)\r",
															"\r",
															"let testedReviewFields =  generatedReviewFields\r",
															"testedReviewFields.result = batchSourceReview.source.review.result\r",
															"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
															"let expectedStatus \r",
															"//         {\r",
															"//             user: {\r",
															"//                 username: \"admin\"\r",
															"//             },\r",
															"//             label: \"saved\"\r",
															"//         }        \r",
															"\r",
															"\r",
															"// testedReviewFields.status = expectedStatus ;\r",
															"\r",
															"\r",
															"        console.log(\"testedReviewFields: \")\r",
															"        console.log(testedReviewFields)\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
															"        // console.log(testRuleId)\r",
															"\r",
															"\r",
															"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
															"    for (let item of jsonData){\r",
															"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
															"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
															"            if (batchSourceReview.action == \"insert\") {\r",
															"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"               pm.expect(item.resultEngine).to.not.eql(null);\r",
															"               pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"\r",
															"            }\r",
															"            else {\r",
															"            console.log(\"found test asset and rule - resultengine clear item\")\r",
															"            console.log(item)\r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"            }\r",
															"        })\r",
															"        }\r",
															"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
															"          pm.test(\"test update review - same result\", function () {\r",
															"            if (batchSourceReview.action == \"insert\") {\r",
															"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"              pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"              pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"              pm.expect(item.username).to.eql(\"admin\");              \r",
															"              pm.expect(item.detail).to.eql(\"test\");\r",
															"\r",
															"\r",
															"            }\r",
															"            else {            \r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"            }\r",
															"          })\r",
															"      }\r",
															"        \r",
															"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
															"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
															"        pm.test(\"test insert review. Should not exist for update actions\", function () {\r",
															"          if (batchSourceReview.action == \"update\") {\r",
															"            pm.expect(1).to.eql(2);\r",
															"\r",
															"          }\r",
															"          else{\r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"          }\r",
															"        })\r",
															"\r",
															"\r",
															"\r",
															"      }\r",
															"\r",
															"\r",
															"\r",
															"    };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"// // console.log(\"collection string = \" + collectionMatchString);\r",
															"// var regex = new RegExp(collectionMatchString);\r",
															"// let collectionNames = _.map(jsonData, 'name');\r",
															"// // console.log(collectionNames);\r",
															"\r",
															"// pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//     for (let name of collectionNames){\r",
															"//         pm.expect(name).to.match(regex);\r",
															"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
															"\r",
															"//     }\r",
															" \r",
															"// })\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update by detail string",
									"item": [
										{
											"name": "Import BATCH application data (as elevated Admin) Copy 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let response = pm.response.text();\r",
															"console.log(response)\r",
															"\r",
															"pm.test(\"Body contains string\",() => {\r",
															"  pm.expect(response).to.include(\"Commit successful\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{appDataFile}}",
															"disabled": true
														},
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "true",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "POST batch review: update with updateFilters - detail string \"batch\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"let userId = pm.environment.get(\"userId\");\r",
															"console.log(\"user: \" + user);\r",
															"console.log(\"userId: \" + userId)\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"const respData = pm.response.json()\r",
															"\r",
															"pm.test(\"test inserted\", function () {\r",
															"    // try {\r",
															"        pm.expect(respData.inserted).to.eql(0)\r",
															"    // }\r",
															"    // catch (e) {\r",
															"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"    //     throw(e)\r",
															"    // }\r",
															"});\r",
															"pm.test(\"test updated\", function () {\r",
															"        pm.expect(respData.updated).to.eql(1)\r",
															"});\r",
															"\r",
															"pm.test(\"test failed validation\", function () {\r",
															"        pm.expect(respData.failedValidation).to.eql(0)\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"validation errors\", function () {\r",
															"        pm.expect(respData.validationErrors).to.have.length(0)\r",
															"\r",
															"});\r",
															"\r",
															"// const reqData = JSON.parse(pm.request.body.raw)\r",
															"// const expectedReview = {\r",
															"//   assetId: \"42\",\r",
															"//   assetName: \"Collection_X_lvl1_asset-1\",\r",
															"//   assetLabelIds: [\r",
															"//     \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
															"//     \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
															"//     ],\r",
															"//   ruleId: pm.environment.get(\"testRuleId\"),\r",
															"//   result: reqData.result,\r",
															"//   resultEngine: null,\r",
															"//   detail: reqData.detail,\r",
															"//   autoResult: reqData.autoResult,\r",
															"//   comment: reqData.comment,\r",
															"//   userId: userId,\r",
															"//   username: user,\r",
															"//   ts: respData.ts,\r",
															"//   touchTs: respData.touchTs,\r",
															"//   status: {\r",
															"//       ts: respData.status.ts,\r",
															"//       text: null,\r",
															"//       user: {\r",
															"//           userId: userId,\r",
															"//           username: user\r",
															"//       },\r",
															"//       label: reqData.status\r",
															"//   },\r",
															"//   stigs: [\"VPN_SRG_TEST\"],\r",
															"//   rule: {\r",
															"//     title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
															"//     ruleId: \"SV-106179r1_rule\",\r",
															"//     version: \"SRG-NET-000019-VPN-000040\",\r",
															"//     severity: \"medium\"\r",
															"//   }\r",
															"// }\r",
															"// pm.test(\"Response matches expected response\", function () {\r",
															"//     try {\r",
															"//         pm.expect(respData).to.eql(expectedReview)\r",
															"//     }\r",
															"//     catch (e) {\r",
															"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"//         throw(e)\r",
															"//     }\r",
															"// });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let batchSourceReview =\r",
															"{\r",
															"    \"source\":\r",
															"    {\r",
															"        \"review\":\r",
															"            {\r",
															"                \"result\":\"fail\",\r",
															"                \"detail\":\"tesetsetset\"\r",
															"            }\r",
															"       \r",
															"    },\r",
															"    \"assets\":{\r",
															"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
															"    },\r",
															"    \"rules\":{\r",
															"        \"ruleIds\":[\"SV-106179r1_rule\"]\r",
															"    },\r",
															"    \"updateFilters\":[\r",
															"        {\r",
															"            \"field\": \"detail\",\r",
															"            \"condition\":\"endsWith\",\r",
															"            \"value\":\"batch\"            \r",
															"        }\r",
															"    ],\r",
															"\"action\": \"update\"\r",
															"}\r",
															"\r",
															"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{batchSourceReview}}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "batch check - one reset resultengine, rest = source Copy 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"\r",
															"// request with update filter looking for informational result should not change any reviews.\r",
															"if (batchSourceReview.updateFilters[0].value == \"informational\" ) {\r",
															"  console.log(\"exclusionary filter test\")\r",
															"  pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"\r",
															"  pm.expect(jsonData).to.have.lengthOf(2);\r",
															"  })\r",
															"\r",
															"  for (let item of jsonData){\r",
															"      // CASE: test update with exclusionary filter. Nothing should have source detail \r",
															"    pm.test(\"test update with exclusionary filter. Nothing should have source detail \", function () {\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"        pm.expect(item.detail).to.not.eql(batchSourceReview.source.review.detail);\r",
															"        }\r",
															"    })\r",
															"  }\r",
															"\r",
															"  return;\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"\r",
															"    if (user == \"lvl1\" ) {\r",
															"        pm.expect(jsonData).to.have.lengthOf(2);\r",
															"    }\r",
															"    else{\r",
															"      if (batchSourceReview.rules.benchmarkIds){\r",
															"        console.log(\"request targeted benchmark rules\")\r",
															"        pm.expect(jsonData).to.have.lengthOf(243);\r",
															"      }\r",
															"      else{\r",
															"        console.log(\"request targeted one rule\")\r",
															"\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"          console.log(\"request updated for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(2);\r",
															"        }\r",
															"        else{\r",
															"          console.log(\"request inserted for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(3);\r",
															"        }\r",
															"      }\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"const generatedReviewFields = {\r",
															"        // ruleId: \"SV-106179r1_rule\",\r",
															"        // result: \"fail\",\r",
															"        // detail: \"test batch\",\r",
															"        // comment: \"\",\r",
															"        // userId: \"87\",\r",
															"        // ts: \"\",\r",
															"        // touchTs: \"\",\r",
															"        username: user,\r",
															"        status: {\r",
															"            user: {\r",
															"                username: user\r",
															"            },\r",
															"            // label: \"saved\"\r",
															"        }        \r",
															"      };\r",
															"\r",
															"// let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"console.log(\"sourceReview: \" + batchSourceReview)\r",
															"\r",
															"let testedReviewFields =  generatedReviewFields\r",
															"testedReviewFields.result = batchSourceReview.source.review.result\r",
															"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
															"let expectedStatus \r",
															"//         {\r",
															"//             user: {\r",
															"//                 username: \"admin\"\r",
															"//             },\r",
															"//             label: \"saved\"\r",
															"//         }        \r",
															"\r",
															"\r",
															"// testedReviewFields.status = expectedStatus ;\r",
															"\r",
															"\r",
															"        console.log(\"testedReviewFields: \")\r",
															"        console.log(testedReviewFields)\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
															"        // console.log(testRuleId)\r",
															"\r",
															"\r",
															"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
															"    for (let item of jsonData){\r",
															"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
															"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
															"            if (batchSourceReview.action == \"insert\") {\r",
															"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"               pm.expect(item.resultEngine).to.not.eql(null);\r",
															"               pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"\r",
															"            }\r",
															"            else {\r",
															"            console.log(\"found test asset and rule - resultengine clear item\")\r",
															"            console.log(item)\r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"            }\r",
															"        })\r",
															"        }\r",
															"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
															"          pm.test(\"test update review - same result\", function () {\r",
															"            // if (batchSourceReview.action == \"insert\") {\r",
															"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"              pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"              pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"              pm.expect(item.username).to.eql(\"admin\");              \r",
															"              pm.expect(item.detail).to.eql(\"test\");\r",
															"\r",
															"\r",
															"            // }\r",
															"            // else {            \r",
															"            // pm.expect(item.resultEngine).to.eql(null);\r",
															"            // pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"            // pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"            // pm.expect(item.username).to.eql(user);\r",
															"            // pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            // pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"            // }\r",
															"          })\r",
															"      }\r",
															"        \r",
															"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
															"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
															"        pm.test(\"test insert review. Should not exist for update actions\", function () {\r",
															"          if (batchSourceReview.action == \"update\") {\r",
															"            pm.expect(1).to.eql(2);\r",
															"\r",
															"          }\r",
															"          else{\r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"          }\r",
															"        })\r",
															"\r",
															"\r",
															"\r",
															"      }\r",
															"\r",
															"\r",
															"\r",
															"    };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"// // console.log(\"collection string = \" + collectionMatchString);\r",
															"// var regex = new RegExp(collectionMatchString);\r",
															"// let collectionNames = _.map(jsonData, 'name');\r",
															"// // console.log(collectionNames);\r",
															"\r",
															"// pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//     for (let name of collectionNames){\r",
															"//         pm.expect(name).to.match(regex);\r",
															"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
															"\r",
															"//     }\r",
															" \r",
															"// })\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update pass only",
									"item": [
										{
											"name": "Import BATCH application data (as elevated Admin) Copy 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let response = pm.response.text();\r",
															"console.log(response)\r",
															"\r",
															"pm.test(\"Body contains string\",() => {\r",
															"  pm.expect(response).to.include(\"Commit successful\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{appDataFile}}",
															"disabled": true
														},
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "true",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "POST batch review: update with updateFilters - pass only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"let userId = pm.environment.get(\"userId\");\r",
															"console.log(\"user: \" + user);\r",
															"console.log(\"userId: \" + userId)\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"const respData = pm.response.json()\r",
															"\r",
															"pm.test(\"test inserted\", function () {\r",
															"    // try {\r",
															"        pm.expect(respData.inserted).to.eql(0)\r",
															"    // }\r",
															"    // catch (e) {\r",
															"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"    //     throw(e)\r",
															"    // }\r",
															"});\r",
															"pm.test(\"test updated\", function () {\r",
															"        pm.expect(respData.updated).to.eql(1)\r",
															"});\r",
															"\r",
															"pm.test(\"test failed validation\", function () {\r",
															"        pm.expect(respData.failedValidation).to.eql(0)\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"validation errors\", function () {\r",
															"        pm.expect(respData.validationErrors).to.have.length(0)\r",
															"\r",
															"});\r",
															"\r",
															"// const reqData = JSON.parse(pm.request.body.raw)\r",
															"// const expectedReview = {\r",
															"//   assetId: \"42\",\r",
															"//   assetName: \"Collection_X_lvl1_asset-1\",\r",
															"//   assetLabelIds: [\r",
															"//     \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
															"//     \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
															"//     ],\r",
															"//   ruleId: pm.environment.get(\"testRuleId\"),\r",
															"//   result: reqData.result,\r",
															"//   resultEngine: null,\r",
															"//   detail: reqData.detail,\r",
															"//   autoResult: reqData.autoResult,\r",
															"//   comment: reqData.comment,\r",
															"//   userId: userId,\r",
															"//   username: user,\r",
															"//   ts: respData.ts,\r",
															"//   touchTs: respData.touchTs,\r",
															"//   status: {\r",
															"//       ts: respData.status.ts,\r",
															"//       text: null,\r",
															"//       user: {\r",
															"//           userId: userId,\r",
															"//           username: user\r",
															"//       },\r",
															"//       label: reqData.status\r",
															"//   },\r",
															"//   stigs: [\"VPN_SRG_TEST\"],\r",
															"//   rule: {\r",
															"//     title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
															"//     ruleId: \"SV-106179r1_rule\",\r",
															"//     version: \"SRG-NET-000019-VPN-000040\",\r",
															"//     severity: \"medium\"\r",
															"//   }\r",
															"// }\r",
															"// pm.test(\"Response matches expected response\", function () {\r",
															"//     try {\r",
															"//         pm.expect(respData).to.eql(expectedReview)\r",
															"//     }\r",
															"//     catch (e) {\r",
															"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"//         throw(e)\r",
															"//     }\r",
															"// });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let batchSourceReview =\r",
															"{\r",
															"    \"source\":\r",
															"    {\r",
															"        \"review\":\r",
															"            {\r",
															"                \"result\":\"fail\",\r",
															"                \"detail\":\"tesetsetset\"\r",
															"            }\r",
															"       \r",
															"    },\r",
															"    \"assets\":{\r",
															"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
															"    },\r",
															"    \"rules\":{\r",
															"        \"ruleIds\":[\"SV-106179r1_rule\"]\r",
															"    },\r",
															"    \"updateFilters\":[\r",
															"        {\r",
															"            \"field\": \"result\",\r",
															"            \"value\" : \"pass\"\r",
															"            }\r",
															"    ],\r",
															"\"action\": \"update\"\r",
															"}\r",
															"\r",
															"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{batchSourceReview}}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "batch check - one reset resultengine, rest = source Copy 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"\r",
															"// request with update filter looking for informational result should not change any reviews.\r",
															"if (batchSourceReview.updateFilters[0].value == \"informational\" ) {\r",
															"  console.log(\"exclusionary filter test\")\r",
															"  pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"\r",
															"  pm.expect(jsonData).to.have.lengthOf(2);\r",
															"  })\r",
															"\r",
															"  for (let item of jsonData){\r",
															"      // CASE: test update with exclusionary filter. Nothing should have source detail \r",
															"    pm.test(\"test update with exclusionary filter. Nothing should have source detail \", function () {\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"        pm.expect(item.detail).to.not.eql(batchSourceReview.source.review.detail);\r",
															"        }\r",
															"    })\r",
															"  }\r",
															"\r",
															"  return;\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"\r",
															"    if (user == \"lvl1\" ) {\r",
															"        pm.expect(jsonData).to.have.lengthOf(2);\r",
															"    }\r",
															"    else{\r",
															"      if (batchSourceReview.rules.benchmarkIds){\r",
															"        console.log(\"request targeted benchmark rules\")\r",
															"        pm.expect(jsonData).to.have.lengthOf(243);\r",
															"      }\r",
															"      else{\r",
															"        console.log(\"request targeted one rule\")\r",
															"\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"          console.log(\"request updated for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(2);\r",
															"        }\r",
															"        else{\r",
															"          console.log(\"request inserted for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(3);\r",
															"        }\r",
															"      }\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"const generatedReviewFields = {\r",
															"        // ruleId: \"SV-106179r1_rule\",\r",
															"        // result: \"fail\",\r",
															"        // detail: \"test batch\",\r",
															"        // comment: \"\",\r",
															"        // userId: \"87\",\r",
															"        // ts: \"\",\r",
															"        // touchTs: \"\",\r",
															"        username: user,\r",
															"        status: {\r",
															"            user: {\r",
															"                username: user\r",
															"            },\r",
															"            // label: \"saved\"\r",
															"        }        \r",
															"      };\r",
															"\r",
															"// let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"console.log(\"sourceReview: \" + batchSourceReview)\r",
															"\r",
															"let testedReviewFields =  generatedReviewFields\r",
															"testedReviewFields.result = batchSourceReview.source.review.result\r",
															"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
															"let expectedStatus \r",
															"//         {\r",
															"//             user: {\r",
															"//                 username: \"admin\"\r",
															"//             },\r",
															"//             label: \"saved\"\r",
															"//         }        \r",
															"\r",
															"\r",
															"// testedReviewFields.status = expectedStatus ;\r",
															"\r",
															"\r",
															"        console.log(\"testedReviewFields: \")\r",
															"        console.log(testedReviewFields)\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
															"        // console.log(testRuleId)\r",
															"\r",
															"\r",
															"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
															"    for (let item of jsonData){\r",
															"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
															"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
															"            if (batchSourceReview.action == \"insert\") {\r",
															"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"               pm.expect(item.resultEngine).to.not.eql(null);\r",
															"               pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"\r",
															"            }\r",
															"            else {\r",
															"            console.log(\"found test asset and rule - resultengine clear item\")\r",
															"            console.log(item)\r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"            }\r",
															"        })\r",
															"        }\r",
															"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
															"          pm.test(\"test update review - same result\", function () {\r",
															"            // if (batchSourceReview.action == \"insert\") {\r",
															"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"              pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"              pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"              pm.expect(item.username).to.eql(\"admin\");              \r",
															"              pm.expect(item.detail).to.eql(\"test\");\r",
															"\r",
															"\r",
															"            // }\r",
															"            // else {            \r",
															"            // pm.expect(item.resultEngine).to.eql(null);\r",
															"            // pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"            // pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"            // pm.expect(item.username).to.eql(user);\r",
															"            // pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            // pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"            // }\r",
															"          })\r",
															"      }\r",
															"        \r",
															"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
															"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
															"        pm.test(\"test insert review. Should not exist for update actions\", function () {\r",
															"          if (batchSourceReview.action == \"update\") {\r",
															"            pm.expect(1).to.eql(2);\r",
															"\r",
															"          }\r",
															"          else{\r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"          }\r",
															"        })\r",
															"\r",
															"\r",
															"\r",
															"      }\r",
															"\r",
															"\r",
															"\r",
															"    };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"// // console.log(\"collection string = \" + collectionMatchString);\r",
															"// var regex = new RegExp(collectionMatchString);\r",
															"// let collectionNames = _.map(jsonData, 'name');\r",
															"// // console.log(collectionNames);\r",
															"\r",
															"// pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//     for (let name of collectionNames){\r",
															"//         pm.expect(name).to.match(regex);\r",
															"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
															"\r",
															"//     }\r",
															" \r",
															"// })\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update admins reviews only",
									"item": [
										{
											"name": "Import BATCH application data (as elevated Admin) Copy 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let response = pm.response.text();\r",
															"console.log(response)\r",
															"\r",
															"pm.test(\"Body contains string\",() => {\r",
															"  pm.expect(response).to.include(\"Commit successful\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{appDataFile}}",
															"disabled": true
														},
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "true",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "POST batch review: update -  updateFilters - admins reviews only",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"let userId = pm.environment.get(\"userId\");\r",
															"console.log(\"user: \" + user);\r",
															"console.log(\"userId: \" + userId)\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"const respData = pm.response.json()\r",
															"\r",
															"pm.test(\"test inserted\", function () {\r",
															"    // try {\r",
															"        pm.expect(respData.inserted).to.eql(0)\r",
															"    // }\r",
															"    // catch (e) {\r",
															"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"    //     throw(e)\r",
															"    // }\r",
															"});\r",
															"pm.test(\"test updated\", function () {\r",
															"        pm.expect(respData.updated).to.eql(2)\r",
															"});\r",
															"\r",
															"pm.test(\"test failed validation\", function () {\r",
															"        pm.expect(respData.failedValidation).to.eql(0)\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"validation errors\", function () {\r",
															"        pm.expect(respData.validationErrors).to.have.length(0)\r",
															"\r",
															"});\r",
															"\r",
															"// const reqData = JSON.parse(pm.request.body.raw)\r",
															"// const expectedReview = {\r",
															"//   assetId: \"42\",\r",
															"//   assetName: \"Collection_X_lvl1_asset-1\",\r",
															"//   assetLabelIds: [\r",
															"//     \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
															"//     \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
															"//     ],\r",
															"//   ruleId: pm.environment.get(\"testRuleId\"),\r",
															"//   result: reqData.result,\r",
															"//   resultEngine: null,\r",
															"//   detail: reqData.detail,\r",
															"//   autoResult: reqData.autoResult,\r",
															"//   comment: reqData.comment,\r",
															"//   userId: userId,\r",
															"//   username: user,\r",
															"//   ts: respData.ts,\r",
															"//   touchTs: respData.touchTs,\r",
															"//   status: {\r",
															"//       ts: respData.status.ts,\r",
															"//       text: null,\r",
															"//       user: {\r",
															"//           userId: userId,\r",
															"//           username: user\r",
															"//       },\r",
															"//       label: reqData.status\r",
															"//   },\r",
															"//   stigs: [\"VPN_SRG_TEST\"],\r",
															"//   rule: {\r",
															"//     title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
															"//     ruleId: \"SV-106179r1_rule\",\r",
															"//     version: \"SRG-NET-000019-VPN-000040\",\r",
															"//     severity: \"medium\"\r",
															"//   }\r",
															"// }\r",
															"// pm.test(\"Response matches expected response\", function () {\r",
															"//     try {\r",
															"//         pm.expect(respData).to.eql(expectedReview)\r",
															"//     }\r",
															"//     catch (e) {\r",
															"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"//         throw(e)\r",
															"//     }\r",
															"// });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let batchSourceReview =\r",
															"{\r",
															"    \"source\":\r",
															"    {\r",
															"        \"review\":\r",
															"            {\r",
															"                \"result\":\"fail\",\r",
															"                \"detail\":\"tesetsetset\"\r",
															"            }\r",
															"       \r",
															"    },\r",
															"    \"assets\":{\r",
															"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
															"    },\r",
															"    \"rules\":{\r",
															"        \"ruleIds\":[\"SV-106179r1_rule\"]\r",
															"    },\r",
															"    \"updateFilters\":[\r",
															"        {\r",
															"            \"field\": \"userId\",\r",
															"            \"value\" : \"87\"\r",
															"            }\r",
															"    ],\r",
															"\"action\": \"update\"\r",
															"}\r",
															"\r",
															"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{batchSourceReview}}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "batch check - one reset resultengine, rest = source Copy 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"\r",
															"// request with update filter looking for informational result should not change any reviews.\r",
															"if (batchSourceReview.updateFilters[0].value == \"informational\" ) {\r",
															"  console.log(\"exclusionary filter test\")\r",
															"  pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"\r",
															"  pm.expect(jsonData).to.have.lengthOf(2);\r",
															"  })\r",
															"\r",
															"  for (let item of jsonData){\r",
															"      // CASE: test update with exclusionary filter. Nothing should have source detail \r",
															"    pm.test(\"test update with exclusionary filter. Nothing should have source detail \", function () {\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"        pm.expect(item.detail).to.not.eql(batchSourceReview.source.review.detail);\r",
															"        }\r",
															"    })\r",
															"  }\r",
															"\r",
															"  return;\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"\r",
															"    if (user == \"lvl1\" ) {\r",
															"        pm.expect(jsonData).to.have.lengthOf(2);\r",
															"    }\r",
															"    else{\r",
															"      if (batchSourceReview.rules.benchmarkIds){\r",
															"        console.log(\"request targeted benchmark rules\")\r",
															"        pm.expect(jsonData).to.have.lengthOf(243);\r",
															"      }\r",
															"      else{\r",
															"        console.log(\"request targeted one rule\")\r",
															"\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"          console.log(\"request updated for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(2);\r",
															"        }\r",
															"        else{\r",
															"          console.log(\"request inserted for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(3);\r",
															"        }\r",
															"      }\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"const generatedReviewFields = {\r",
															"        // ruleId: \"SV-106179r1_rule\",\r",
															"        // result: \"fail\",\r",
															"        // detail: \"test batch\",\r",
															"        // comment: \"\",\r",
															"        // userId: \"87\",\r",
															"        // ts: \"\",\r",
															"        // touchTs: \"\",\r",
															"        username: user,\r",
															"        status: {\r",
															"            user: {\r",
															"                username: user\r",
															"            },\r",
															"            // label: \"saved\"\r",
															"        }        \r",
															"      };\r",
															"\r",
															"// let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"console.log(\"sourceReview: \" + batchSourceReview)\r",
															"\r",
															"let testedReviewFields =  generatedReviewFields\r",
															"testedReviewFields.result = batchSourceReview.source.review.result\r",
															"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
															"let expectedStatus \r",
															"//         {\r",
															"//             user: {\r",
															"//                 username: \"admin\"\r",
															"//             },\r",
															"//             label: \"saved\"\r",
															"//         }        \r",
															"\r",
															"\r",
															"// testedReviewFields.status = expectedStatus ;\r",
															"\r",
															"\r",
															"        console.log(\"testedReviewFields: \")\r",
															"        console.log(testedReviewFields)\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
															"        // console.log(testRuleId)\r",
															"\r",
															"\r",
															"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
															"    for (let item of jsonData){\r",
															"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
															"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
															"            if (batchSourceReview.action == \"insert\") {\r",
															"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"               pm.expect(item.resultEngine).to.not.eql(null);\r",
															"               pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"\r",
															"            }\r",
															"            else {\r",
															"            console.log(\"found test asset and rule - resultengine clear item\")\r",
															"            console.log(item)\r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"            }\r",
															"        })\r",
															"        }\r",
															"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
															"          pm.test(\"test update review - same result\", function () {\r",
															"            if (batchSourceReview.action == \"insert\") {\r",
															"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"              pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"              pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"              pm.expect(item.username).to.eql(\"admin\");              \r",
															"              pm.expect(item.detail).to.eql(\"test\");\r",
															"\r",
															"\r",
															"            }\r",
															"            else {            \r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"            }\r",
															"          })\r",
															"      }\r",
															"        \r",
															"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
															"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
															"        pm.test(\"test insert review. Should not exist for update actions\", function () {\r",
															"          if (batchSourceReview.action == \"update\") {\r",
															"            pm.expect(1).to.eql(2);\r",
															"\r",
															"          }\r",
															"          else{\r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"          }\r",
															"        })\r",
															"\r",
															"\r",
															"\r",
															"      }\r",
															"\r",
															"\r",
															"\r",
															"    };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"// // console.log(\"collection string = \" + collectionMatchString);\r",
															"// var regex = new RegExp(collectionMatchString);\r",
															"// let collectionNames = _.map(jsonData, 'name');\r",
															"// // console.log(collectionNames);\r",
															"\r",
															"// pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//     for (let name of collectionNames){\r",
															"//         pm.expect(name).to.match(regex);\r",
															"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
															"\r",
															"//     }\r",
															" \r",
															"// })\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update before date",
									"item": [
										{
											"name": "Import BATCH application data (as elevated Admin) Copy 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let response = pm.response.text();\r",
															"console.log(response)\r",
															"\r",
															"pm.test(\"Body contains string\",() => {\r",
															"  pm.expect(response).to.include(\"Commit successful\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{appDataFile}}",
															"disabled": true
														},
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "true",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "POST batch review: update - updateFilters- before date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"let userId = pm.environment.get(\"userId\");\r",
															"console.log(\"user: \" + user);\r",
															"console.log(\"userId: \" + userId)\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"const respData = pm.response.json()\r",
															"\r",
															"pm.test(\"test inserted\", function () {\r",
															"    // try {\r",
															"        pm.expect(respData.inserted).to.eql(0)\r",
															"    // }\r",
															"    // catch (e) {\r",
															"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"    //     throw(e)\r",
															"    // }\r",
															"});\r",
															"pm.test(\"test updated\", function () {\r",
															"        pm.expect(respData.updated).to.eql(1)\r",
															"});\r",
															"\r",
															"pm.test(\"test failed validation\", function () {\r",
															"        pm.expect(respData.failedValidation).to.eql(0)\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"validation errors\", function () {\r",
															"        pm.expect(respData.validationErrors).to.have.length(0)\r",
															"\r",
															"});\r",
															"\r",
															"// const reqData = JSON.parse(pm.request.body.raw)\r",
															"// const expectedReview = {\r",
															"//   assetId: \"42\",\r",
															"//   assetName: \"Collection_X_lvl1_asset-1\",\r",
															"//   assetLabelIds: [\r",
															"//     \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
															"//     \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
															"//     ],\r",
															"//   ruleId: pm.environment.get(\"testRuleId\"),\r",
															"//   result: reqData.result,\r",
															"//   resultEngine: null,\r",
															"//   detail: reqData.detail,\r",
															"//   autoResult: reqData.autoResult,\r",
															"//   comment: reqData.comment,\r",
															"//   userId: userId,\r",
															"//   username: user,\r",
															"//   ts: respData.ts,\r",
															"//   touchTs: respData.touchTs,\r",
															"//   status: {\r",
															"//       ts: respData.status.ts,\r",
															"//       text: null,\r",
															"//       user: {\r",
															"//           userId: userId,\r",
															"//           username: user\r",
															"//       },\r",
															"//       label: reqData.status\r",
															"//   },\r",
															"//   stigs: [\"VPN_SRG_TEST\"],\r",
															"//   rule: {\r",
															"//     title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
															"//     ruleId: \"SV-106179r1_rule\",\r",
															"//     version: \"SRG-NET-000019-VPN-000040\",\r",
															"//     severity: \"medium\"\r",
															"//   }\r",
															"// }\r",
															"// pm.test(\"Response matches expected response\", function () {\r",
															"//     try {\r",
															"//         pm.expect(respData).to.eql(expectedReview)\r",
															"//     }\r",
															"//     catch (e) {\r",
															"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"//         throw(e)\r",
															"//     }\r",
															"// });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let batchSourceReview =\r",
															"{\r",
															"    \"source\":\r",
															"    {\r",
															"        \"review\":\r",
															"            {\r",
															"                \"result\":\"fail\",\r",
															"                \"detail\":\"tesetsetset\"\r",
															"            }\r",
															"       \r",
															"    },\r",
															"    \"assets\":{\r",
															"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
															"    },\r",
															"    \"rules\":{\r",
															"        \"ruleIds\":[\"SV-106179r1_rule\"]\r",
															"    },\r",
															"    \"updateFilters\":[\r",
															"        {\r",
															"            \"field\": \"ts\",\r",
															"            \"condition\" : \"lessThan\",\r",
															"            \"value\" : \"2022-10-26T22:37:46Z\"\r",
															"            }\r",
															"    ],\r",
															"\"action\": \"update\"\r",
															"}\r",
															"\r",
															"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{batchSourceReview}}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "batch check - one reset resultengine, rest = source Copy 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"\r",
															"// request with update filter looking for informational result should not change any reviews.\r",
															"if (batchSourceReview.updateFilters[0].value == \"informational\" ) {\r",
															"  console.log(\"exclusionary filter test\")\r",
															"  pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"\r",
															"  pm.expect(jsonData).to.have.lengthOf(2);\r",
															"  })\r",
															"\r",
															"  for (let item of jsonData){\r",
															"      // CASE: test update with exclusionary filter. Nothing should have source detail \r",
															"    pm.test(\"test update with exclusionary filter. Nothing should have source detail \", function () {\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"        pm.expect(item.detail).to.not.eql(batchSourceReview.source.review.detail);\r",
															"        }\r",
															"    })\r",
															"  }\r",
															"\r",
															"  return;\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"\r",
															"    if (user == \"lvl1\" ) {\r",
															"        pm.expect(jsonData).to.have.lengthOf(2);\r",
															"    }\r",
															"    else{\r",
															"      if (batchSourceReview.rules.benchmarkIds){\r",
															"        console.log(\"request targeted benchmark rules\")\r",
															"        pm.expect(jsonData).to.have.lengthOf(243);\r",
															"      }\r",
															"      else{\r",
															"        console.log(\"request targeted one rule\")\r",
															"\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"          console.log(\"request updated for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(2);\r",
															"        }\r",
															"        else{\r",
															"          console.log(\"request inserted for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(3);\r",
															"        }\r",
															"      }\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"const generatedReviewFields = {\r",
															"        // ruleId: \"SV-106179r1_rule\",\r",
															"        // result: \"fail\",\r",
															"        // detail: \"test batch\",\r",
															"        // comment: \"\",\r",
															"        // userId: \"87\",\r",
															"        // ts: \"\",\r",
															"        // touchTs: \"\",\r",
															"        username: user,\r",
															"        status: {\r",
															"            user: {\r",
															"                username: user\r",
															"            },\r",
															"            // label: \"saved\"\r",
															"        }        \r",
															"      };\r",
															"\r",
															"// let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"console.log(\"sourceReview: \" + batchSourceReview)\r",
															"\r",
															"let testedReviewFields =  generatedReviewFields\r",
															"testedReviewFields.result = batchSourceReview.source.review.result\r",
															"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
															"let expectedStatus \r",
															"//         {\r",
															"//             user: {\r",
															"//                 username: \"admin\"\r",
															"//             },\r",
															"//             label: \"saved\"\r",
															"//         }        \r",
															"\r",
															"\r",
															"// testedReviewFields.status = expectedStatus ;\r",
															"\r",
															"\r",
															"        console.log(\"testedReviewFields: \")\r",
															"        console.log(testedReviewFields)\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
															"        // console.log(testRuleId)\r",
															"\r",
															"\r",
															"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
															"    for (let item of jsonData){\r",
															"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
															"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
															"            if (batchSourceReview.action == \"insert\") {\r",
															"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"               pm.expect(item.resultEngine).to.not.eql(null);\r",
															"               pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"\r",
															"            }\r",
															"            else {\r",
															"            console.log(\"found test asset and rule - resultengine clear item\")\r",
															"            console.log(item)\r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"            }\r",
															"        })\r",
															"        }\r",
															"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
															"          pm.test(\"test update review - same result\", function () {\r",
															"            if (batchSourceReview.action == \"insert\") {\r",
															"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"              pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"              pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"              pm.expect(item.username).to.eql(\"admin\");              \r",
															"              pm.expect(item.detail).to.eql(\"test\");\r",
															"\r",
															"\r",
															"            }\r",
															"            else {            \r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"            pm.expect(item.username).to.eql(\"admin\");\r",
															"            // pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            // pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"            }\r",
															"          })\r",
															"      }\r",
															"        \r",
															"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
															"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
															"        pm.test(\"test insert review. Should not exist for update actions\", function () {\r",
															"          if (batchSourceReview.action == \"update\") {\r",
															"            pm.expect(1).to.eql(2);\r",
															"\r",
															"          }\r",
															"          else{\r",
															"            pm.expect(item.resultEngine).to.eql(null);\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"            pm.expect(item.username).to.eql(user);\r",
															"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"          }\r",
															"        })\r",
															"\r",
															"\r",
															"\r",
															"      }\r",
															"\r",
															"\r",
															"\r",
															"    };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"// // console.log(\"collection string = \" + collectionMatchString);\r",
															"// var regex = new RegExp(collectionMatchString);\r",
															"// let collectionNames = _.map(jsonData, 'name');\r",
															"// // console.log(collectionNames);\r",
															"\r",
															"// pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//     for (let name of collectionNames){\r",
															"//         pm.expect(name).to.match(regex);\r",
															"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
															"\r",
															"//     }\r",
															" \r",
															"// })\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "update by status",
									"item": [
										{
											"name": "Import BATCH application data (as elevated Admin) Copy 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let response = pm.response.text();\r",
															"console.log(response)\r",
															"\r",
															"pm.test(\"Body contains string\",() => {\r",
															"  pm.expect(response).to.include(\"Commit successful\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{appDataFile}}",
															"disabled": true
														},
														{
															"key": "importFile",
															"type": "file",
															"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/op/appdata?elevate=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"op",
														"appdata"
													],
													"query": [
														{
															"key": "elevate",
															"value": "true",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "POST batch review: update - updateFilters- only non-saved status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"let userId = pm.environment.get(\"userId\");\r",
															"console.log(\"user: \" + user);\r",
															"console.log(\"userId: \" + userId)\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"const respData = pm.response.json()\r",
															"\r",
															"pm.test(\"test inserted\", function () {\r",
															"    // try {\r",
															"        pm.expect(respData.inserted).to.eql(0)\r",
															"    // }\r",
															"    // catch (e) {\r",
															"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"    //     throw(e)\r",
															"    // }\r",
															"});\r",
															"pm.test(\"test updated\", function () {\r",
															"        pm.expect(respData.updated).to.eql(2)\r",
															"});\r",
															"\r",
															"pm.test(\"test failed validation\", function () {\r",
															"        pm.expect(respData.failedValidation).to.eql(0)\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"validation errors\", function () {\r",
															"        pm.expect(respData.validationErrors).to.have.length(0)\r",
															"\r",
															"});\r",
															"\r",
															"// const reqData = JSON.parse(pm.request.body.raw)\r",
															"// const expectedReview = {\r",
															"//   assetId: \"42\",\r",
															"//   assetName: \"Collection_X_lvl1_asset-1\",\r",
															"//   assetLabelIds: [\r",
															"//     \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
															"//     \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
															"//     ],\r",
															"//   ruleId: pm.environment.get(\"testRuleId\"),\r",
															"//   result: reqData.result,\r",
															"//   resultEngine: null,\r",
															"//   detail: reqData.detail,\r",
															"//   autoResult: reqData.autoResult,\r",
															"//   comment: reqData.comment,\r",
															"//   userId: userId,\r",
															"//   username: user,\r",
															"//   ts: respData.ts,\r",
															"//   touchTs: respData.touchTs,\r",
															"//   status: {\r",
															"//       ts: respData.status.ts,\r",
															"//       text: null,\r",
															"//       user: {\r",
															"//           userId: userId,\r",
															"//           username: user\r",
															"//       },\r",
															"//       label: reqData.status\r",
															"//   },\r",
															"//   stigs: [\"VPN_SRG_TEST\"],\r",
															"//   rule: {\r",
															"//     title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
															"//     ruleId: \"SV-106179r1_rule\",\r",
															"//     version: \"SRG-NET-000019-VPN-000040\",\r",
															"//     severity: \"medium\"\r",
															"//   }\r",
															"// }\r",
															"// pm.test(\"Response matches expected response\", function () {\r",
															"//     try {\r",
															"//         pm.expect(respData).to.eql(expectedReview)\r",
															"//     }\r",
															"//     catch (e) {\r",
															"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
															"//         throw(e)\r",
															"//     }\r",
															"// });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let batchSourceReview =\r",
															"{\r",
															"    \"source\":\r",
															"    {\r",
															"        \"review\":\r",
															"            {\r",
															"                \"status\":\"saved\",\r",
															"            }\r",
															"       \r",
															"    },\r",
															"    \"assets\":{\r",
															"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
															"    },\r",
															"    \"rules\":{\r",
															"        \"ruleIds\":[\"SV-106179r1_rule\"]\r",
															"    },\r",
															"    \"updateFilters\":[\r",
															"        {\r",
															"            \"field\": \"statusLabel\",\r",
															"            \"condition\" : \"notequal\",\r",
															"            \"value\" : \"saved\"\r",
															"            }\r",
															"    ],\r",
															"\"action\": \"update\"\r",
															"}\r",
															"\r",
															"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{batchSourceReview}}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "projection",
															"value": "history",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												},
												"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
											},
											"response": []
										},
										{
											"name": "batch check - all reviews set to saved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
															"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"\r",
															"// request with update filter looking for informational result should not change any reviews.\r",
															"if (batchSourceReview.updateFilters[0].value == \"informational\" ) {\r",
															"  console.log(\"exclusionary filter test\")\r",
															"  pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"\r",
															"  pm.expect(jsonData).to.have.lengthOf(2);\r",
															"  })\r",
															"\r",
															"  for (let item of jsonData){\r",
															"      // CASE: test update with exclusionary filter. Nothing should have source detail \r",
															"    pm.test(\"test update with exclusionary filter. Nothing should have source detail \", function () {\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"        pm.expect(item.detail).to.not.eql(batchSourceReview.source.review.detail);\r",
															"        }\r",
															"    })\r",
															"  }\r",
															"\r",
															"  return;\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"\r",
															"    if (user == \"lvl1\" ) {\r",
															"        pm.expect(jsonData).to.have.lengthOf(2);\r",
															"    }\r",
															"    else{\r",
															"      if (batchSourceReview.rules.benchmarkIds){\r",
															"        console.log(\"request targeted benchmark rules\")\r",
															"        pm.expect(jsonData).to.have.lengthOf(243);\r",
															"      }\r",
															"      else{\r",
															"        console.log(\"request targeted one rule\")\r",
															"\r",
															"        if (batchSourceReview.action == \"update\") {\r",
															"          console.log(\"request updated for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(2);\r",
															"        }\r",
															"        else{\r",
															"          console.log(\"request inserted for one rule\")\r",
															"          pm.expect(jsonData).to.have.lengthOf(3);\r",
															"        }\r",
															"      }\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"const generatedReviewFields = {\r",
															"        // ruleId: \"SV-106179r1_rule\",\r",
															"        // result: \"fail\",\r",
															"        // detail: \"test batch\",\r",
															"        // comment: \"\",\r",
															"        // userId: \"87\",\r",
															"        // ts: \"\",\r",
															"        // touchTs: \"\",\r",
															"        username: user,\r",
															"        status: {\r",
															"            user: {\r",
															"                username: user\r",
															"            },\r",
															"            // label: \"saved\"\r",
															"        }        \r",
															"      };\r",
															"\r",
															"// let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
															"console.log(\"sourceReview: \" + batchSourceReview)\r",
															"\r",
															"let testedReviewFields =  generatedReviewFields\r",
															"testedReviewFields.result = batchSourceReview.source.review.result\r",
															"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
															"let expectedStatus \r",
															"//         {\r",
															"//             user: {\r",
															"//                 username: \"admin\"\r",
															"//             },\r",
															"//             label: \"saved\"\r",
															"//         }        \r",
															"\r",
															"\r",
															"// testedReviewFields.status = expectedStatus ;\r",
															"\r",
															"\r",
															"        console.log(\"testedReviewFields: \")\r",
															"        console.log(testedReviewFields)\r",
															"\r",
															"let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
															"        // console.log(testRuleId)\r",
															"\r",
															"\r",
															"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
															"    for (let item of jsonData){\r",
															"\r",
															"        pm.test(\"test update review - all reviews have status set to saved by current user\", function () {\r",
															"            pm.expect(item.status.label).to.eql(\"saved\");\r",
															"            pm.expect(item.status.user.username).to.eql(user);\r",
															"        })\r",
															"\r",
															"\r",
															"    //     if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
															"    //       // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"    //     pm.test(\"test update review - different status - resultEngine Clear, status to reset\", function () {\r",
															"    //         if (batchSourceReview.action == \"insert\") {\r",
															"    //           console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"    //            pm.expect(item.resultEngine).to.not.eql(null);\r",
															"    //            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"\r",
															"    //         }\r",
															"    //         else {\r",
															"    //         console.log(\"found test asset and rule - resultengine clear item\")\r",
															"    //         console.log(item)\r",
															"    //         pm.expect(item.resultEngine).to.eql(null);\r",
															"    //         pm.expect(item.status.label).to.eql(\"saved\");\r",
															"    //         pm.expect(item.status.user.username).to.eql(user);\r",
															"    //         pm.expect(item.username).to.eql(user);\r",
															"    //         pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"    //         pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"    //         }\r",
															"    //     })\r",
															"    //     }\r",
															"    //     // CASE: Existing review, test reset of resultengine and status - all users can update\r",
															"    //     else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
															"    //       pm.test(\"test update review - same result\", function () {\r",
															"    //         if (batchSourceReview.action == \"insert\") {\r",
															"    //           console.log(\"found test asset and rule - action=insert - no changes\")\r",
															"    //           pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"    //           pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"    //           pm.expect(item.username).to.eql(\"admin\");              \r",
															"    //           pm.expect(item.detail).to.eql(\"test\");\r",
															"\r",
															"\r",
															"    //         }\r",
															"    //         else {            \r",
															"    //         pm.expect(item.resultEngine).to.eql(null);\r",
															"    //         pm.expect(item.status.label).to.eql(\"submitted\");\r",
															"    //         pm.expect(item.status.user.username).to.eql(\"admin\");\r",
															"    //         pm.expect(item.username).to.eql(\"admin\");\r",
															"    //         // pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"    //         // pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"    //         }\r",
															"    //       })\r",
															"    //   }\r",
															"        \r",
															"    //   // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
															"    //   else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
															"    //     pm.test(\"test insert review. Should not exist for update actions\", function () {\r",
															"    //       if (batchSourceReview.action == \"update\") {\r",
															"    //         pm.expect(1).to.eql(2);\r",
															"\r",
															"    //       }\r",
															"    //       else{\r",
															"    //         pm.expect(item.resultEngine).to.eql(null);\r",
															"    //         pm.expect(item.status.label).to.eql(\"saved\");\r",
															"    //         pm.expect(item.status.user.username).to.eql(user);\r",
															"    //         pm.expect(item.username).to.eql(user);\r",
															"    //         pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
															"    //         pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
															"    //       }\r",
															"    //     })\r",
															"\r",
															"\r",
															"\r",
															"    //   }\r",
															"\r",
															"\r",
															"\r",
															"    };\r",
															"\r",
															"// });\r",
															"\r",
															"\r",
															"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"// // console.log(\"collection string = \" + collectionMatchString);\r",
															"// var regex = new RegExp(collectionMatchString);\r",
															"// let collectionNames = _.map(jsonData, 'name');\r",
															"// // console.log(collectionNames);\r",
															"\r",
															"// pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//     for (let name of collectionNames){\r",
															"//         pm.expect(name).to.match(regex);\r",
															"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
															"\r",
															"//     }\r",
															" \r",
															"// })\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "expect validation fail",
							"item": [
								{
									"name": "Import BATCH application data (as elevated Admin) Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST batch Review: target by assets, and one rule, expect validation failure - invalid result for status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"let userId = pm.environment.get(\"userId\");\r",
													"console.log(\"user: \" + user);\r",
													"console.log(\"userId: \" + userId)\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"const respData = pm.response.json()\r",
													"\r",
													"pm.test(\"test inserted\", function () {\r",
													"    // try {\r",
													"        pm.expect(respData.inserted).to.eql(0)\r",
													"    // }\r",
													"    // catch (e) {\r",
													"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"    //     throw(e)\r",
													"    // }\r",
													"});\r",
													"pm.test(\"test updated\", function () {\r",
													"        pm.expect(respData.updated).to.eql(0)\r",
													"});\r",
													"\r",
													"pm.test(\"test failed validation\", function () {\r",
													"if (user == \"lvl1\"){\r",
													"        pm.expect(respData.failedValidation).to.eql(3)\r",
													"}\r",
													"else {\r",
													"    pm.expect(respData.failedValidation).to.eql(3)\r",
													"}\r",
													"});\r",
													"\r",
													"pm.test(\"expected validation errors\", function () {\r",
													"if (user == \"lvl1\"){\r",
													"        pm.expect(respData.validationErrors).to.have.length(3)\r",
													"        for (item of respData.validationErrors){\r",
													"            pm.expect(item.error).to.be.oneOf([\"status is not allowed for the result\",\"no grant for this asset/ruleId\"])\r",
													"            if (item.assetId == 62) {\r",
													"                pm.expect(item.error).to.eql(\"no grant for this asset/ruleId\")                \r",
													"            }\r",
													"        }\r",
													"}\r",
													"else {\r",
													"        pm.expect(respData.validationErrors).to.have.length(3)\r",
													"        for (item of respData.validationErrors){\r",
													"            pm.expect(item.error).to.eql(\"status is not allowed for the result\")\r",
													"        }   \r",
													"}    \r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let batchSourceReview =\r",
													"{\r",
													"    \"source\":{\r",
													"        \"review\":\r",
													"            {\r",
													"                \"result\":\"informational\",\r",
													"                \"detail\":\"tesetsetset\",\r",
													"                \"status\":\"submitted\"\r",
													"            }\r",
													"       \r",
													"    },\r",
													"    \"assets\":{\r",
													"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
													"    },\r",
													"    \"rules\":\r",
													"        {\"ruleIds\":[\"SV-106179r1_rule\"]}\r",
													"}\r",
													"\r",
													"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{batchSourceReview}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "projection",
													"value": "{{batchSourceReview}}",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": []
								},
								{
									"name": "batch check - one reset resultengine, rest = source Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
													"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"    if (user == \"lvl1\" ) {\r",
													"        pm.expect(jsonData).to.have.lengthOf(2);\r",
													"    }\r",
													"    else{\r",
													"        pm.expect(jsonData).to.have.lengthOf(2);\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"const generatedReviewFields = {\r",
													"        // ruleId: \"SV-106179r1_rule\",\r",
													"        // result: \"fail\",\r",
													"        // detail: \"test batch\",\r",
													"        // comment: \"\",\r",
													"        // userId: \"87\",\r",
													"        // ts: \"\",\r",
													"        // touchTs: \"\",\r",
													"        username: user,\r",
													"        status: {\r",
													"            user: {\r",
													"                username: user\r",
													"            },\r",
													"            // label: \"saved\"\r",
													"        }        \r",
													"      };\r",
													"\r",
													"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
													"console.log(\"sourceReview: \" + batchSourceReview)\r",
													"\r",
													"let testedReviewFields =  generatedReviewFields\r",
													"testedReviewFields.result = batchSourceReview.source.review.result\r",
													"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
													"let expectedStatus \r",
													"//         {\r",
													"//             user: {\r",
													"//                 username: \"admin\"\r",
													"//             },\r",
													"//             label: \"saved\"\r",
													"//         }        \r",
													"\r",
													"\r",
													"// testedReviewFields.status = expectedStatus ;\r",
													"\r",
													"\r",
													"        console.log(\"testedReviewFields: \")\r",
													"        console.log(testedReviewFields)\r",
													"\r",
													"let testAsset = pm.environment.get(\"testAsset\");\r",
													"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
													"        // console.log(testRuleId)\r",
													"\r",
													"\r",
													"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
													"    for (let item of jsonData){\r",
													"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
													"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
													"        pm.test(\"test update review - status and result did not change. \", function () {\r",
													"\r",
													"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
													"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
													"            pm.expect(item.username).to.eql(\"admin\");\r",
													"            pm.expect(item.result).to.eql(\"pass\");\r",
													"        })\r",
													"        }\r",
													"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
													"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
													"          pm.test(\"test update review - same result\", function () {\r",
													"            pm.expect(item.resultEngine).to.eql(null);\r",
													"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
													"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
													"            pm.expect(item.username).to.eql(\"admin\");\r",
													"            pm.expect(item.result).to.eql(\"fail\");\r",
													"\r",
													"          })\r",
													"      }\r",
													"        \r",
													"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
													"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
													"        pm.test(\"test insert review\", function () {\r",
													"          pm.expect(item.resultEngine).to.eql(null);\r",
													"          pm.expect(item.status.label).to.eql(\"saved\");\r",
													"          pm.expect(item.status.user.username).to.eql(user);\r",
													"          pm.expect(item.username).to.eql(user);\r",
													"          pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
													"          pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
													"      \r",
													"        })\r",
													"\r",
													"\r",
													"\r",
													"      }\r",
													"\r",
													"\r",
													"\r",
													"    };\r",
													"\r",
													"// });\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(collectionNames);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     for (let name of collectionNames){\r",
													"//         pm.expect(name).to.match(regex);\r",
													"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
													"\r",
													"//     }\r",
													" \r",
													"// })\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "status",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "ruleId",
													"value": "<string>",
													"description": "Selects Reviews of a Rule",
													"disabled": true
												},
												{
													"key": "groupId",
													"value": "<string>",
													"description": "A query parameter that indentifies a Group",
													"disabled": true
												},
												{
													"key": "cci",
													"value": "<string>",
													"description": "A query parameter that indentifies a CCI",
													"disabled": true
												},
												{
													"key": "userId",
													"value": "<string>",
													"description": "A path parameter that indentifies a User",
													"disabled": true
												},
												{
													"key": "assetId",
													"value": "<string>",
													"description": "A query parameter that indentifies an Asset",
													"disabled": true
												},
												{
													"key": "benchmarkId",
													"value": "<string>",
													"description": "A query parameter that indentifies a STIG",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "rule",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import BATCH application data (as elevated Admin) Copy 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST batch Review: target by stig, and one rule, expect validation failure - invalid result for status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"let userId = pm.environment.get(\"userId\");\r",
													"console.log(\"user: \" + user);\r",
													"console.log(\"userId: \" + userId)\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"const respData = pm.response.json()\r",
													"\r",
													"pm.test(\"test inserted\", function () {\r",
													"    // try {\r",
													"        pm.expect(respData.inserted).to.eql(0)\r",
													"    // }\r",
													"    // catch (e) {\r",
													"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"    //     throw(e)\r",
													"    // }\r",
													"});\r",
													"pm.test(\"test updated\", function () {\r",
													"        pm.expect(respData.updated).to.eql(0)\r",
													"});\r",
													"\r",
													"pm.test(\"test failed validation\", function () {\r",
													"if (user == \"lvl1\"){\r",
													"        pm.expect(respData.failedValidation).to.eql(2)\r",
													"}\r",
													"else {\r",
													"    pm.expect(respData.failedValidation).to.eql(3)\r",
													"}\r",
													"});\r",
													"\r",
													"pm.test(\"validation errors\", function () {\r",
													"if (user == \"lvl1\"){\r",
													"        pm.expect(respData.validationErrors).to.have.length(2)\r",
													"}\r",
													"else {\r",
													"        pm.expect(respData.validationErrors).to.have.length(3)\r",
													"}    \r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let batchSourceReview =\r",
													"{\r",
													"    \"source\":{\r",
													"        \"review\":\r",
													"            {\r",
													"                \"result\":\"informational\",\r",
													"                \"detail\":\"tesetsetset\",\r",
													"                \"status\":\"submitted\"\r",
													"            }\r",
													"       \r",
													"    },\r",
													"    \"assets\":{\r",
													"        \"benchmarkIds\":[\"VPN_SRG_TEST\"]\r",
													"    },\r",
													"    \"rules\":\r",
													"        {\"ruleIds\":[\"SV-106179r1_rule\"]}\r",
													"}\r",
													"\r",
													"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{batchSourceReview}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "projection",
													"value": "{{batchSourceReview}}",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": []
								},
								{
									"name": "batch check - one reset resultengine, rest = source Copy 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
													"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"    if (user == \"lvl1\" ) {\r",
													"        pm.expect(jsonData).to.have.lengthOf(2);\r",
													"    }\r",
													"    else{\r",
													"        pm.expect(jsonData).to.have.lengthOf(2);\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"const generatedReviewFields = {\r",
													"        // ruleId: \"SV-106179r1_rule\",\r",
													"        // result: \"fail\",\r",
													"        // detail: \"test batch\",\r",
													"        // comment: \"\",\r",
													"        // userId: \"87\",\r",
													"        // ts: \"\",\r",
													"        // touchTs: \"\",\r",
													"        username: user,\r",
													"        status: {\r",
													"            user: {\r",
													"                username: user\r",
													"            },\r",
													"            // label: \"saved\"\r",
													"        }        \r",
													"      };\r",
													"\r",
													"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
													"console.log(\"sourceReview: \" + batchSourceReview)\r",
													"\r",
													"let testedReviewFields =  generatedReviewFields\r",
													"testedReviewFields.result = batchSourceReview.source.review.result\r",
													"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
													"let expectedStatus \r",
													"//         {\r",
													"//             user: {\r",
													"//                 username: \"admin\"\r",
													"//             },\r",
													"//             label: \"saved\"\r",
													"//         }        \r",
													"\r",
													"\r",
													"// testedReviewFields.status = expectedStatus ;\r",
													"\r",
													"\r",
													"        console.log(\"testedReviewFields: \")\r",
													"        console.log(testedReviewFields)\r",
													"\r",
													"let testAsset = pm.environment.get(\"testAsset\");\r",
													"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
													"        // console.log(testRuleId)\r",
													"\r",
													"\r",
													"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
													"    for (let item of jsonData){\r",
													"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
													"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
													"        pm.test(\"test update review - status and result did not change. \", function () {\r",
													"\r",
													"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
													"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
													"            pm.expect(item.username).to.eql(\"admin\");\r",
													"            pm.expect(item.result).to.eql(\"pass\");\r",
													"        })\r",
													"        }\r",
													"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
													"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
													"          pm.test(\"test update review - same result\", function () {\r",
													"            pm.expect(item.resultEngine).to.eql(null);\r",
													"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
													"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
													"            pm.expect(item.username).to.eql(\"admin\");\r",
													"            pm.expect(item.result).to.eql(\"fail\");\r",
													"\r",
													"          })\r",
													"      }\r",
													"        \r",
													"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
													"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
													"        pm.test(\"test insert review\", function () {\r",
													"          pm.expect(item.resultEngine).to.eql(null);\r",
													"          pm.expect(item.status.label).to.eql(\"saved\");\r",
													"          pm.expect(item.status.user.username).to.eql(user);\r",
													"          pm.expect(item.username).to.eql(user);\r",
													"          pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
													"          pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
													"      \r",
													"        })\r",
													"\r",
													"\r",
													"\r",
													"      }\r",
													"\r",
													"\r",
													"\r",
													"    };\r",
													"\r",
													"// });\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(collectionNames);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     for (let name of collectionNames){\r",
													"//         pm.expect(name).to.match(regex);\r",
													"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
													"\r",
													"//     }\r",
													" \r",
													"// })\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "status",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "ruleId",
													"value": "<string>",
													"description": "Selects Reviews of a Rule",
													"disabled": true
												},
												{
													"key": "groupId",
													"value": "<string>",
													"description": "A query parameter that indentifies a Group",
													"disabled": true
												},
												{
													"key": "cci",
													"value": "<string>",
													"description": "A query parameter that indentifies a CCI",
													"disabled": true
												},
												{
													"key": "userId",
													"value": "<string>",
													"description": "A path parameter that indentifies a User",
													"disabled": true
												},
												{
													"key": "assetId",
													"value": "<string>",
													"description": "A query parameter that indentifies an Asset",
													"disabled": true
												},
												{
													"key": "benchmarkId",
													"value": "<string>",
													"description": "A query parameter that indentifies a STIG",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "rule",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import BATCH application data (as elevated Admin) Copy 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST batch Review: target by stig, and one rule, expect validation failure - fail result, no comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"let userId = pm.environment.get(\"userId\");\r",
													"console.log(\"user: \" + user);\r",
													"console.log(\"userId: \" + userId)\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"const respData = pm.response.json()\r",
													"\r",
													"pm.test(\"test inserted\", function () {\r",
													"    // try {\r",
													"        pm.expect(respData.inserted).to.eql(0)\r",
													"    // }\r",
													"    // catch (e) {\r",
													"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"    //     throw(e)\r",
													"    // }\r",
													"});\r",
													"pm.test(\"test updated\", function () {\r",
													"        pm.expect(respData.updated).to.eql(0)\r",
													"});\r",
													"\r",
													"pm.test(\"test failed validation\", function () {\r",
													"if (user == \"lvl1\"){\r",
													"        pm.expect(respData.failedValidation).to.eql(2)\r",
													"}\r",
													"else {\r",
													"    pm.expect(respData.failedValidation).to.eql(3)\r",
													"}\r",
													"});\r",
													"\r",
													"pm.test(\"validation errors\", function () {\r",
													"if (user == \"lvl1\"){\r",
													"        pm.expect(respData.validationErrors).to.have.length(2)\r",
													"}\r",
													"else {\r",
													"        pm.expect(respData.validationErrors).to.have.length(3)\r",
													"}    \r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let batchSourceReview =\r",
													"{\r",
													"    \"source\":{\r",
													"        \"review\":\r",
													"            {\r",
													"                \"result\":\"fail\",\r",
													"                \"detail\":\"tesetsetset\",\r",
													"                \"comment\":\"\",\r",
													"                \"status\":\"submitted\"\r",
													"            }\r",
													"       \r",
													"    },\r",
													"    \"assets\":{\r",
													"        \"benchmarkIds\":[\"VPN_SRG_TEST\"]\r",
													"    },\r",
													"    \"rules\":\r",
													"        {\"ruleIds\":[\"SV-106179r1_rule\"]}\r",
													"}\r",
													"\r",
													"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{batchSourceReview}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "projection",
													"value": "{{batchSourceReview}}",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": []
								},
								{
									"name": "batch check - one reset resultengine, rest = source Copy 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
													"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"    if (user == \"lvl1\" ) {\r",
													"        pm.expect(jsonData).to.have.lengthOf(2);\r",
													"    }\r",
													"    else{\r",
													"        pm.expect(jsonData).to.have.lengthOf(2);\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"const generatedReviewFields = {\r",
													"        // ruleId: \"SV-106179r1_rule\",\r",
													"        // result: \"fail\",\r",
													"        // detail: \"test batch\",\r",
													"        // comment: \"\",\r",
													"        // userId: \"87\",\r",
													"        // ts: \"\",\r",
													"        // touchTs: \"\",\r",
													"        username: user,\r",
													"        status: {\r",
													"            user: {\r",
													"                username: user\r",
													"            },\r",
													"            // label: \"saved\"\r",
													"        }        \r",
													"      };\r",
													"\r",
													"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
													"console.log(\"sourceReview: \" + batchSourceReview)\r",
													"\r",
													"let testedReviewFields =  generatedReviewFields\r",
													"testedReviewFields.result = batchSourceReview.source.review.result\r",
													"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
													"let expectedStatus \r",
													"//         {\r",
													"//             user: {\r",
													"//                 username: \"admin\"\r",
													"//             },\r",
													"//             label: \"saved\"\r",
													"//         }        \r",
													"\r",
													"\r",
													"// testedReviewFields.status = expectedStatus ;\r",
													"\r",
													"\r",
													"        console.log(\"testedReviewFields: \")\r",
													"        console.log(testedReviewFields)\r",
													"\r",
													"let testAsset = pm.environment.get(\"testAsset\");\r",
													"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
													"        // console.log(testRuleId)\r",
													"\r",
													"\r",
													"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
													"    for (let item of jsonData){\r",
													"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
													"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
													"        pm.test(\"test update review - status and result did not change. \", function () {\r",
													"\r",
													"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
													"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
													"            pm.expect(item.username).to.eql(\"admin\");\r",
													"            pm.expect(item.result).to.eql(\"pass\");\r",
													"        })\r",
													"        }\r",
													"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
													"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
													"          pm.test(\"test update review - same result\", function () {\r",
													"            pm.expect(item.resultEngine).to.eql(null);\r",
													"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
													"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
													"            pm.expect(item.username).to.eql(\"admin\");\r",
													"            pm.expect(item.result).to.eql(\"fail\");\r",
													"\r",
													"          })\r",
													"      }\r",
													"        \r",
													"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
													"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
													"        pm.test(\"test insert review\", function () {\r",
													"          pm.expect(item.resultEngine).to.eql(null);\r",
													"          pm.expect(item.status.label).to.eql(\"saved\");\r",
													"          pm.expect(item.status.user.username).to.eql(user);\r",
													"          pm.expect(item.username).to.eql(user);\r",
													"          pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
													"          pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
													"      \r",
													"        })\r",
													"\r",
													"\r",
													"\r",
													"      }\r",
													"\r",
													"\r",
													"\r",
													"    };\r",
													"\r",
													"// });\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(collectionNames);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     for (let name of collectionNames){\r",
													"//         pm.expect(name).to.match(regex);\r",
													"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
													"\r",
													"//     }\r",
													" \r",
													"// })\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "status",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "ruleId",
													"value": "<string>",
													"description": "Selects Reviews of a Rule",
													"disabled": true
												},
												{
													"key": "groupId",
													"value": "<string>",
													"description": "A query parameter that indentifies a Group",
													"disabled": true
												},
												{
													"key": "cci",
													"value": "<string>",
													"description": "A query parameter that indentifies a CCI",
													"disabled": true
												},
												{
													"key": "userId",
													"value": "<string>",
													"description": "A path parameter that indentifies a User",
													"disabled": true
												},
												{
													"key": "assetId",
													"value": "<string>",
													"description": "A query parameter that indentifies an Asset",
													"disabled": true
												},
												{
													"key": "benchmarkId",
													"value": "<string>",
													"description": "A query parameter that indentifies a STIG",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "rule",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import BATCH application data (as elevated Admin) Copy 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST batch Review: target by stig, and one rule, expect validation failure - no detail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"let userId = pm.environment.get(\"userId\");\r",
													"console.log(\"user: \" + user);\r",
													"console.log(\"userId: \" + userId)\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"const respData = pm.response.json()\r",
													"\r",
													"pm.test(\"test inserted\", function () {\r",
													"    // try {\r",
													"        pm.expect(respData.inserted).to.eql(0)\r",
													"    // }\r",
													"    // catch (e) {\r",
													"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"    //     throw(e)\r",
													"    // }\r",
													"});\r",
													"pm.test(\"test updated\", function () {\r",
													"        pm.expect(respData.updated).to.eql(0)\r",
													"});\r",
													"\r",
													"pm.test(\"test failed validation\", function () {\r",
													"if (user == \"lvl1\"){\r",
													"        pm.expect(respData.failedValidation).to.eql(2)\r",
													"}\r",
													"else {\r",
													"    pm.expect(respData.failedValidation).to.eql(3)\r",
													"}\r",
													"});\r",
													"\r",
													"pm.test(\"validation errors\", function () {\r",
													"if (user == \"lvl1\"){\r",
													"        pm.expect(respData.validationErrors).to.have.length(2)\r",
													"}\r",
													"else {\r",
													"        pm.expect(respData.validationErrors).to.have.length(3)\r",
													"}    \r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let batchSourceReview =\r",
													"{\r",
													"    \"source\":{\r",
													"        \"review\":\r",
													"            {\r",
													"                \"result\":\"pass\",\r",
													"                \"detail\":\"\",\r",
													"                \"comment\":\"test comment\",\r",
													"                \"status\":\"submitted\"\r",
													"            }\r",
													"       \r",
													"    },\r",
													"    \"assets\":{\r",
													"        \"benchmarkIds\":[\"VPN_SRG_TEST\"]\r",
													"    },\r",
													"    \"rules\":\r",
													"        {\"ruleIds\":[\"SV-106179r1_rule\"]}\r",
													"}\r",
													"\r",
													"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{batchSourceReview}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "projection",
													"value": "{{batchSourceReview}}",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": []
								},
								{
									"name": "batch check - one reset resultengine, rest = source Copy 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
													"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"    if (user == \"lvl1\" ) {\r",
													"        pm.expect(jsonData).to.have.lengthOf(2);\r",
													"    }\r",
													"    else{\r",
													"        pm.expect(jsonData).to.have.lengthOf(2);\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"const generatedReviewFields = {\r",
													"        // ruleId: \"SV-106179r1_rule\",\r",
													"        // result: \"fail\",\r",
													"        // detail: \"test batch\",\r",
													"        // comment: \"\",\r",
													"        // userId: \"87\",\r",
													"        // ts: \"\",\r",
													"        // touchTs: \"\",\r",
													"        username: user,\r",
													"        status: {\r",
													"            user: {\r",
													"                username: user\r",
													"            },\r",
													"            // label: \"saved\"\r",
													"        }        \r",
													"      };\r",
													"\r",
													"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
													"console.log(\"sourceReview: \" + batchSourceReview)\r",
													"\r",
													"let testedReviewFields =  generatedReviewFields\r",
													"testedReviewFields.result = batchSourceReview.source.review.result\r",
													"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
													"let expectedStatus \r",
													"//         {\r",
													"//             user: {\r",
													"//                 username: \"admin\"\r",
													"//             },\r",
													"//             label: \"saved\"\r",
													"//         }        \r",
													"\r",
													"\r",
													"// testedReviewFields.status = expectedStatus ;\r",
													"\r",
													"\r",
													"        console.log(\"testedReviewFields: \")\r",
													"        console.log(testedReviewFields)\r",
													"\r",
													"let testAsset = pm.environment.get(\"testAsset\");\r",
													"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
													"        // console.log(testRuleId)\r",
													"\r",
													"\r",
													"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
													"    for (let item of jsonData){\r",
													"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
													"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
													"        pm.test(\"test update review - status and result did not change. \", function () {\r",
													"\r",
													"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
													"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
													"            pm.expect(item.username).to.eql(\"admin\");\r",
													"            pm.expect(item.result).to.eql(\"pass\");\r",
													"        })\r",
													"        }\r",
													"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
													"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
													"          pm.test(\"test update review - same result\", function () {\r",
													"            pm.expect(item.resultEngine).to.eql(null);\r",
													"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
													"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
													"            pm.expect(item.username).to.eql(\"admin\");\r",
													"            pm.expect(item.result).to.eql(\"fail\");\r",
													"\r",
													"          })\r",
													"      }\r",
													"        \r",
													"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
													"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
													"        pm.test(\"test insert review\", function () {\r",
													"          pm.expect(item.resultEngine).to.eql(null);\r",
													"          pm.expect(item.status.label).to.eql(\"saved\");\r",
													"          pm.expect(item.status.user.username).to.eql(user);\r",
													"          pm.expect(item.username).to.eql(user);\r",
													"          pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
													"          pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
													"      \r",
													"        })\r",
													"\r",
													"\r",
													"\r",
													"      }\r",
													"\r",
													"\r",
													"\r",
													"    };\r",
													"\r",
													"// });\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(collectionNames);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     for (let name of collectionNames){\r",
													"//         pm.expect(name).to.match(regex);\r",
													"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
													"\r",
													"//     }\r",
													" \r",
													"// })\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "status",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "ruleId",
													"value": "<string>",
													"description": "Selects Reviews of a Rule",
													"disabled": true
												},
												{
													"key": "groupId",
													"value": "<string>",
													"description": "A query parameter that indentifies a Group",
													"disabled": true
												},
												{
													"key": "cci",
													"value": "<string>",
													"description": "A query parameter that indentifies a CCI",
													"disabled": true
												},
												{
													"key": "userId",
													"value": "<string>",
													"description": "A path parameter that indentifies a User",
													"disabled": true
												},
												{
													"key": "assetId",
													"value": "<string>",
													"description": "A query parameter that indentifies an Asset",
													"disabled": true
												},
												{
													"key": "benchmarkId",
													"value": "<string>",
													"description": "A query parameter that indentifies a STIG",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "rule",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Import BATCH application data (as elevated Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST batch Review: target by assets, and one rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"const respData = pm.response.json()\r",
											"\r",
											"pm.test(\"test inserted\", function () {\r",
											"    // try {\r",
											"if (user == \"lvl1\"){\r",
											"        pm.expect(respData.inserted).to.eql(0)\r",
											"}\r",
											"else {\r",
											"    pm.expect(respData.inserted).to.eql(1)\r",
											"}\r",
											"    // }\r",
											"    // catch (e) {\r",
											"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"    //     throw(e)\r",
											"    // }\r",
											"});\r",
											"pm.test(\"test updated\", function () {\r",
											"        pm.expect(respData.updated).to.eql(2)\r",
											"});\r",
											"\r",
											"pm.test(\"test failed validation\", function () {\r",
											"    if (user == \"lvl1\"){\r",
											"        pm.expect(respData.failedValidation).to.eql(1)\r",
											"}\r",
											"else {    \r",
											"        pm.expect(respData.failedValidation).to.eql(0)\r",
											"}\r",
											"});\r",
											"\r",
											"pm.test(\"validation errors\", function () {\r",
											"    if (user == \"lvl1\"){\r",
											"        pm.expect(respData.validationErrors).to.have.length(1)\r",
											"}\r",
											"else {        \r",
											"        pm.expect(respData.validationErrors).to.have.length(0)\r",
											"}\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let batchSourceReview =\r",
											"{\r",
											"    \"source\":{\r",
											"        \"review\":\r",
											"            {\r",
											"                \"result\":\"fail\",\r",
											"                \"detail\":\"tesetsetset\"\r",
											"            }\r",
											"       \r",
											"    },\r",
											"    \"assets\":{\r",
											"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
											"    },\r",
											"    \"rules\":\r",
											"        {\"ruleIds\":[\"SV-106179r1_rule\"]}\r",
											"}\r",
											"\r",
											"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchSourceReview}}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "projection",
											"value": "{{batchSourceReview}}",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "batch check - one reset resultengine, rest = source",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
											"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    if (user == \"lvl1\" ) {\r",
											"        pm.expect(jsonData).to.have.lengthOf(2);\r",
											"    }\r",
											"    else{\r",
											"        pm.expect(jsonData).to.have.lengthOf(3);\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const generatedReviewFields = {\r",
											"        // ruleId: \"SV-106179r1_rule\",\r",
											"        // result: \"fail\",\r",
											"        // detail: \"test batch\",\r",
											"        // comment: \"\",\r",
											"        // userId: \"87\",\r",
											"        // ts: \"\",\r",
											"        // touchTs: \"\",\r",
											"        username: user,\r",
											"        status: {\r",
											"            user: {\r",
											"                username: user\r",
											"            },\r",
											"            // label: \"saved\"\r",
											"        }        \r",
											"      };\r",
											"\r",
											"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
											"console.log(\"sourceReview: \" + batchSourceReview)\r",
											"\r",
											"let testedReviewFields =  generatedReviewFields\r",
											"testedReviewFields.result = batchSourceReview.source.review.result\r",
											"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
											"let expectedStatus \r",
											"//         {\r",
											"//             user: {\r",
											"//                 username: \"admin\"\r",
											"//             },\r",
											"//             label: \"saved\"\r",
											"//         }        \r",
											"\r",
											"\r",
											"// testedReviewFields.status = expectedStatus ;\r",
											"\r",
											"\r",
											"        console.log(\"testedReviewFields: \")\r",
											"        console.log(testedReviewFields)\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
											"        // console.log(testRuleId)\r",
											"\r",
											"\r",
											"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
											"    for (let item of jsonData){\r",
											"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
											"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
											"\r",
											"            console.log(\"found test asset and rule - resultengine clear item\")\r",
											"            console.log(item)\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"saved\");\r",
											"            pm.expect(item.status.user.username).to.eql(user);\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"        })\r",
											"        }\r",
											"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
											"          pm.test(\"test update review - same result\", function () {\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
											"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"\r",
											"          })\r",
											"      }\r",
											"        \r",
											"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
											"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
											"        pm.test(\"test insert review\", function () {\r",
											"          pm.expect(item.resultEngine).to.eql(null);\r",
											"          pm.expect(item.status.label).to.eql(\"saved\");\r",
											"          pm.expect(item.status.user.username).to.eql(user);\r",
											"          pm.expect(item.username).to.eql(user);\r",
											"          pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"          pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"      \r",
											"        })\r",
											"\r",
											"\r",
											"\r",
											"      }\r",
											"\r",
											"\r",
											"\r",
											"    };\r",
											"\r",
											"// });\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(collectionNames);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     for (let name of collectionNames){\r",
											"//         pm.expect(name).to.match(regex);\r",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"//     }\r",
											" \r",
											"// })\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "status",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "groupId",
											"value": "<string>",
											"description": "A query parameter that indentifies a Group",
											"disabled": true
										},
										{
											"key": "cci",
											"value": "<string>",
											"description": "A query parameter that indentifies a CCI",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import BATCH application data (as elevated Admin) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST batch review: target by stig and rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"const respData = pm.response.json()\r",
											"\r",
											"pm.test(\"test inserted\", function () {\r",
											"    // try {\r",
											"if (user == \"lvl1\"){\r",
											"        pm.expect(respData.inserted).to.eql(0)\r",
											"}\r",
											"else {\r",
											"    pm.expect(respData.inserted).to.eql(1)\r",
											"}\r",
											"    // }\r",
											"    // catch (e) {\r",
											"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"    //     throw(e)\r",
											"    // }\r",
											"});\r",
											"pm.test(\"test updated\", function () {\r",
											"        pm.expect(respData.updated).to.eql(2)\r",
											"});\r",
											"\r",
											"pm.test(\"test failed validation\", function () {\r",
											"    if (user == \"lvl1\"){\r",
											"        pm.expect(respData.failedValidation).to.eql(0)\r",
											"}\r",
											"else {    \r",
											"        pm.expect(respData.failedValidation).to.eql(0)\r",
											"}\r",
											"});\r",
											"\r",
											"pm.test(\"validation errors\", function () {\r",
											"    if (user == \"lvl1\"){\r",
											"        pm.expect(respData.validationErrors).to.have.length(0)\r",
											"}\r",
											"else {        \r",
											"        pm.expect(respData.validationErrors).to.have.length(0)\r",
											"}\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let batchSourceReview =\r",
											"{\r",
											"    \"source\":{\r",
											"        \"review\":\r",
											"            {\r",
											"                \"result\":\"fail\",\r",
											"                \"detail\":\"tesetsetset\"\r",
											"            }\r",
											"       \r",
											"    },\r",
											"    \"assets\":{\r",
											"        \"benchmarkIds\":[\"VPN_SRG_TEST\"]\r",
											"    },\r",
											"    \"rules\":\r",
											"        {\"ruleIds\":[\"SV-106179r1_rule\"]}\r",
											"}\r",
											"\r",
											"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchSourceReview}}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "batch check - one reset resultengine, rest = source Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
											"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    if (user == \"lvl1\" ) {\r",
											"        pm.expect(jsonData).to.have.lengthOf(2);\r",
											"    }\r",
											"    else{\r",
											"        pm.expect(jsonData).to.have.lengthOf(3);\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const generatedReviewFields = {\r",
											"        // ruleId: \"SV-106179r1_rule\",\r",
											"        // result: \"fail\",\r",
											"        // detail: \"test batch\",\r",
											"        // comment: \"\",\r",
											"        // userId: \"87\",\r",
											"        // ts: \"\",\r",
											"        // touchTs: \"\",\r",
											"        username: user,\r",
											"        status: {\r",
											"            user: {\r",
											"                username: user\r",
											"            },\r",
											"            // label: \"saved\"\r",
											"        }        \r",
											"      };\r",
											"\r",
											"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
											"console.log(\"sourceReview: \" + batchSourceReview)\r",
											"\r",
											"let testedReviewFields =  generatedReviewFields\r",
											"testedReviewFields.result = batchSourceReview.source.review.result\r",
											"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
											"let expectedStatus \r",
											"//         {\r",
											"//             user: {\r",
											"//                 username: \"admin\"\r",
											"//             },\r",
											"//             label: \"saved\"\r",
											"//         }        \r",
											"\r",
											"\r",
											"// testedReviewFields.status = expectedStatus ;\r",
											"\r",
											"\r",
											"        console.log(\"testedReviewFields: \")\r",
											"        console.log(testedReviewFields)\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
											"        // console.log(testRuleId)\r",
											"\r",
											"\r",
											"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
											"    for (let item of jsonData){\r",
											"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
											"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
											"\r",
											"            console.log(\"found test asset and rule - resultengine clear item\")\r",
											"            console.log(item)\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"saved\");\r",
											"            pm.expect(item.status.user.username).to.eql(user);\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"        })\r",
											"        }\r",
											"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
											"          pm.test(\"test update review - same result\", function () {\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
											"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"\r",
											"          })\r",
											"      }\r",
											"        \r",
											"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
											"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
											"        pm.test(\"test insert review\", function () {\r",
											"          pm.expect(item.resultEngine).to.eql(null);\r",
											"          pm.expect(item.status.label).to.eql(\"saved\");\r",
											"          pm.expect(item.status.user.username).to.eql(user);\r",
											"          pm.expect(item.username).to.eql(user);\r",
											"          pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"          pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"      \r",
											"        })\r",
											"\r",
											"\r",
											"\r",
											"      }\r",
											"\r",
											"\r",
											"\r",
											"    };\r",
											"\r",
											"// });\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(collectionNames);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     for (let name of collectionNames){\r",
											"//         pm.expect(name).to.match(regex);\r",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"//     }\r",
											" \r",
											"// })\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "status",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "groupId",
											"value": "<string>",
											"description": "A query parameter that indentifies a Group",
											"disabled": true
										},
										{
											"key": "cci",
											"value": "<string>",
											"description": "A query parameter that indentifies a CCI",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import BATCH application data (as elevated Admin) Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST batch review: target assets, whole stig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"const respData = pm.response.json()\r",
											"\r",
											"pm.test(\"test inserted\", function () {\r",
											"    // try {\r",
											"if (user == \"lvl1\"){\r",
											"        pm.expect(respData.inserted).to.eql(160)\r",
											"}\r",
											"else {\r",
											"    pm.expect(respData.inserted).to.eql(241)\r",
											"}\r",
											"    // }\r",
											"    // catch (e) {\r",
											"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"    //     throw(e)\r",
											"    // }\r",
											"});\r",
											"pm.test(\"test updated\", function () {\r",
											"        pm.expect(respData.updated).to.eql(2)\r",
											"});\r",
											"\r",
											"pm.test(\"test failed validation\", function () {\r",
											"    if (user == \"lvl1\"){\r",
											"        pm.expect(respData.failedValidation).to.eql(81)\r",
											"}\r",
											"else {    \r",
											"        pm.expect(respData.failedValidation).to.eql(0)\r",
											"}\r",
											"});\r",
											"\r",
											"pm.test(\"validation errors\", function () {\r",
											"    if (user == \"lvl1\"){\r",
											"        pm.expect(respData.validationErrors).to.have.length(50)\r",
											"}\r",
											"else {        \r",
											"        pm.expect(respData.validationErrors).to.have.length(0)\r",
											"}\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let batchSourceReview =\r",
											"{\r",
											"    \"source\":{\r",
											"        \"review\":\r",
											"            {\r",
											"                \"result\":\"fail\",\r",
											"                \"detail\":\"tesetsetset\"\r",
											"            }\r",
											"       \r",
											"    },\r",
											"    \"assets\":{\r",
											"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
											"    },\r",
											"    \"rules\":\r",
											"        {\r",
											"        \"benchmarkIds\":[\"VPN_SRG_TEST\"]\r",
											"        }\r",
											"}\r",
											"\r",
											"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "            {{batchSourceReview}}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "batch check - one reset resultengine, rest = source Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
											"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    if (user == \"lvl1\" ) {\r",
											"        pm.expect(jsonData).to.have.lengthOf(162);\r",
											"    }\r",
											"    else{\r",
											"      if (batchSourceReview.rules.benchmarkIds){\r",
											"        console.log(\"request targeted benchmark rules\")\r",
											"        pm.expect(jsonData).to.have.lengthOf(243);\r",
											"      }\r",
											"      else{\r",
											"        console.log(\"request targeted one rule\")\r",
											"        pm.expect(jsonData).to.have.lengthOf(3);\r",
											"      }\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const generatedReviewFields = {\r",
											"        // ruleId: \"SV-106179r1_rule\",\r",
											"        // result: \"fail\",\r",
											"        // detail: \"test batch\",\r",
											"        // comment: \"\",\r",
											"        // userId: \"87\",\r",
											"        // ts: \"\",\r",
											"        // touchTs: \"\",\r",
											"        username: user,\r",
											"        status: {\r",
											"            user: {\r",
											"                username: user\r",
											"            },\r",
											"            // label: \"saved\"\r",
											"        }        \r",
											"      };\r",
											"\r",
											"// let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
											"console.log(\"sourceReview: \" + batchSourceReview)\r",
											"\r",
											"let testedReviewFields =  generatedReviewFields\r",
											"testedReviewFields.result = batchSourceReview.source.review.result\r",
											"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
											"let expectedStatus \r",
											"//         {\r",
											"//             user: {\r",
											"//                 username: \"admin\"\r",
											"//             },\r",
											"//             label: \"saved\"\r",
											"//         }        \r",
											"\r",
											"\r",
											"// testedReviewFields.status = expectedStatus ;\r",
											"\r",
											"\r",
											"        console.log(\"testedReviewFields: \")\r",
											"        console.log(testedReviewFields)\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
											"        // console.log(testRuleId)\r",
											"\r",
											"\r",
											"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
											"    for (let item of jsonData){\r",
											"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
											"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
											"\r",
											"            console.log(\"found test asset and rule - resultengine clear item\")\r",
											"            console.log(item)\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"saved\");\r",
											"            pm.expect(item.status.user.username).to.eql(user);\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"        })\r",
											"        }\r",
											"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
											"          pm.test(\"test update review - same result\", function () {\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
											"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"\r",
											"          })\r",
											"      }\r",
											"        \r",
											"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
											"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
											"        pm.test(\"test insert review\", function () {\r",
											"          pm.expect(item.resultEngine).to.eql(null);\r",
											"          pm.expect(item.status.label).to.eql(\"saved\");\r",
											"          pm.expect(item.status.user.username).to.eql(user);\r",
											"          pm.expect(item.username).to.eql(user);\r",
											"          pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"          pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"      \r",
											"        })\r",
											"\r",
											"\r",
											"\r",
											"      }\r",
											"\r",
											"\r",
											"\r",
											"    };\r",
											"\r",
											"// });\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(collectionNames);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     for (let name of collectionNames){\r",
											"//         pm.expect(name).to.match(regex);\r",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"//     }\r",
											" \r",
											"// })\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "status",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "groupId",
											"value": "<string>",
											"description": "A query parameter that indentifies a Group",
											"disabled": true
										},
										{
											"key": "cci",
											"value": "<string>",
											"description": "A query parameter that indentifies a CCI",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import BATCH application data (as elevated Admin) Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST batch review: target stig, whole stig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"const respData = pm.response.json()\r",
											"\r",
											"pm.test(\"test inserted\", function () {\r",
											"    // try {\r",
											"if (user == \"lvl1\"){\r",
											"        pm.expect(respData.inserted).to.eql(160)\r",
											"}\r",
											"else {\r",
											"    pm.expect(respData.inserted).to.eql(241)\r",
											"}\r",
											"    // }\r",
											"    // catch (e) {\r",
											"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"    //     throw(e)\r",
											"    // }\r",
											"});\r",
											"pm.test(\"test updated\", function () {\r",
											"        pm.expect(respData.updated).to.eql(2)\r",
											"});\r",
											"\r",
											"pm.test(\"test failed validation\", function () {\r",
											"    if (user == \"lvl1\"){\r",
											"        pm.expect(respData.failedValidation).to.eql(0)\r",
											"}\r",
											"else {    \r",
											"        pm.expect(respData.failedValidation).to.eql(0)\r",
											"}\r",
											"});\r",
											"\r",
											"pm.test(\"validation errors\", function () {\r",
											"    if (user == \"lvl1\"){\r",
											"        pm.expect(respData.validationErrors).to.have.length(0)\r",
											"}\r",
											"else {        \r",
											"        pm.expect(respData.validationErrors).to.have.length(0)\r",
											"}\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let batchSourceReview =\r",
											"{\r",
											"    \"source\":{\r",
											"        \"review\":\r",
											"            {\r",
											"                \"result\":\"fail\",\r",
											"                \"detail\":\"tesetsetset\"\r",
											"            }\r",
											"       \r",
											"    },\r",
											"    \"assets\":{\r",
											"        \"benchmarkIds\":[\"VPN_SRG_TEST\"]\r",
											"    },\r",
											"    \"rules\":\r",
											"        {\r",
											"        \"benchmarkIds\":[\"VPN_SRG_TEST\"]\r",
											"        }\r",
											"}\r",
											"\r",
											"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchSourceReview}}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "batch check - one reset resultengine, rest = source Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
											"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    if (user == \"lvl1\" ) {\r",
											"        pm.expect(jsonData).to.have.lengthOf(162);\r",
											"    }\r",
											"    else{\r",
											"      if (batchSourceReview.rules.benchmarkIds){\r",
											"        console.log(\"request targeted benchmark rules\")\r",
											"        pm.expect(jsonData).to.have.lengthOf(243);\r",
											"      }\r",
											"      else{\r",
											"        console.log(\"request targeted one rule\")\r",
											"        pm.expect(jsonData).to.have.lengthOf(3);\r",
											"      }\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const generatedReviewFields = {\r",
											"        // ruleId: \"SV-106179r1_rule\",\r",
											"        // result: \"fail\",\r",
											"        // detail: \"test batch\",\r",
											"        // comment: \"\",\r",
											"        // userId: \"87\",\r",
											"        // ts: \"\",\r",
											"        // touchTs: \"\",\r",
											"        username: user,\r",
											"        status: {\r",
											"            user: {\r",
											"                username: user\r",
											"            },\r",
											"            // label: \"saved\"\r",
											"        }        \r",
											"      };\r",
											"\r",
											"// let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
											"console.log(\"sourceReview: \" + batchSourceReview)\r",
											"\r",
											"let testedReviewFields =  generatedReviewFields\r",
											"testedReviewFields.result = batchSourceReview.source.review.result\r",
											"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
											"let expectedStatus \r",
											"//         {\r",
											"//             user: {\r",
											"//                 username: \"admin\"\r",
											"//             },\r",
											"//             label: \"saved\"\r",
											"//         }        \r",
											"\r",
											"\r",
											"// testedReviewFields.status = expectedStatus ;\r",
											"\r",
											"\r",
											"        console.log(\"testedReviewFields: \")\r",
											"        console.log(testedReviewFields)\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
											"        // console.log(testRuleId)\r",
											"\r",
											"\r",
											"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
											"    for (let item of jsonData){\r",
											"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
											"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
											"\r",
											"            console.log(\"found test asset and rule - resultengine clear item\")\r",
											"            console.log(item)\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"saved\");\r",
											"            pm.expect(item.status.user.username).to.eql(user);\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"        })\r",
											"        }\r",
											"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
											"          pm.test(\"test update review - same result\", function () {\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
											"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"\r",
											"          })\r",
											"      }\r",
											"        \r",
											"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
											"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
											"        pm.test(\"test insert review\", function () {\r",
											"          pm.expect(item.resultEngine).to.eql(null);\r",
											"          pm.expect(item.status.label).to.eql(\"saved\");\r",
											"          pm.expect(item.status.user.username).to.eql(user);\r",
											"          pm.expect(item.username).to.eql(user);\r",
											"          pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"          pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"      \r",
											"        })\r",
											"\r",
											"\r",
											"\r",
											"      }\r",
											"\r",
											"\r",
											"\r",
											"    };\r",
											"\r",
											"// });\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(collectionNames);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     for (let name of collectionNames){\r",
											"//         pm.expect(name).to.match(regex);\r",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"//     }\r",
											" \r",
											"// })\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "status",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "groupId",
											"value": "<string>",
											"description": "A query parameter that indentifies a Group",
											"disabled": true
										},
										{
											"key": "cci",
											"value": "<string>",
											"description": "A query parameter that indentifies a CCI",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import BATCH application data (as elevated Admin) Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST batch review: target stig, whole stig - ACTION: insert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"const respData = pm.response.json()\r",
											"\r",
											"pm.test(\"test inserted\", function () {\r",
											"    // try {\r",
											"if (user == \"lvl1\"){\r",
											"        pm.expect(respData.inserted).to.eql(0)\r",
											"}\r",
											"else {\r",
											"    pm.expect(respData.inserted).to.eql(1)\r",
											"}\r",
											"});\r",
											"pm.test(\"test updated\", function () {\r",
											"        pm.expect(respData.updated).to.eql(0)\r",
											"});\r",
											"\r",
											"pm.test(\"test failed validation\", function () {\r",
											"    if (user == \"lvl1\"){\r",
											"        pm.expect(respData.failedValidation).to.eql(1)\r",
											"}\r",
											"else {    \r",
											"        pm.expect(respData.failedValidation).to.eql(0)\r",
											"}\r",
											"});\r",
											"\r",
											"pm.test(\"validation errors\", function () {\r",
											"    if (user == \"lvl1\"){\r",
											"        pm.expect(respData.validationErrors).to.have.length(1)\r",
											"}\r",
											"else {        \r",
											"        pm.expect(respData.validationErrors).to.have.length(0)\r",
											"}\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let batchSourceReview =\r",
											"{\r",
											"    \"source\":\r",
											"    {\r",
											"        \"review\":\r",
											"            {\r",
											"                \"result\":\"fail\",\r",
											"                \"detail\":\"tesetsetset\"\r",
											"            }\r",
											"       \r",
											"    },\r",
											"    \"assets\":{\r",
											"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
											"    },\r",
											"    \"rules\":{\r",
											"        \"ruleIds\":[\"SV-106179r1_rule\"]\r",
											"    },\r",
											"    \"action\": \"insert\"\r",
											"\r",
											"}\r",
											"\r",
											"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "            {{batchSourceReview}}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "batch check - one reset resultengine, rest = source Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
											"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    if (user == \"lvl1\" ) {\r",
											"        pm.expect(jsonData).to.have.lengthOf(2);\r",
											"    }\r",
											"    else{\r",
											"      if (batchSourceReview.rules.benchmarkIds){\r",
											"        console.log(\"request targeted benchmark rules\")\r",
											"        pm.expect(jsonData).to.have.lengthOf(243);\r",
											"      }\r",
											"      else{\r",
											"        console.log(\"request targeted one rule\")\r",
											"        pm.expect(jsonData).to.have.lengthOf(3);\r",
											"      }\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const generatedReviewFields = {\r",
											"        // ruleId: \"SV-106179r1_rule\",\r",
											"        // result: \"fail\",\r",
											"        // detail: \"test batch\",\r",
											"        // comment: \"\",\r",
											"        // userId: \"87\",\r",
											"        // ts: \"\",\r",
											"        // touchTs: \"\",\r",
											"        username: user,\r",
											"        status: {\r",
											"            user: {\r",
											"                username: user\r",
											"            },\r",
											"            // label: \"saved\"\r",
											"        }        \r",
											"      };\r",
											"\r",
											"// let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
											"console.log(\"sourceReview: \" + batchSourceReview)\r",
											"\r",
											"let testedReviewFields =  generatedReviewFields\r",
											"testedReviewFields.result = batchSourceReview.source.review.result\r",
											"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
											"let expectedStatus \r",
											"//         {\r",
											"//             user: {\r",
											"//                 username: \"admin\"\r",
											"//             },\r",
											"//             label: \"saved\"\r",
											"//         }        \r",
											"\r",
											"\r",
											"// testedReviewFields.status = expectedStatus ;\r",
											"\r",
											"\r",
											"        console.log(\"testedReviewFields: \")\r",
											"        console.log(testedReviewFields)\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
											"        // console.log(testRuleId)\r",
											"\r",
											"\r",
											"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
											"    for (let item of jsonData){\r",
											"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
											"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
											"            if (batchSourceReview.action == \"insert\") {\r",
											"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
											"               pm.expect(item.resultEngine).to.not.eql(null);\r",
											"               pm.expect(item.status.user.username).to.eql(\"admin\");\r",
											"\r",
											"            }\r",
											"            else {\r",
											"            console.log(\"found test asset and rule - resultengine clear item\")\r",
											"            console.log(item)\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"saved\");\r",
											"            pm.expect(item.status.user.username).to.eql(user);\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"            }\r",
											"        })\r",
											"        }\r",
											"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
											"          pm.test(\"test update review - same result\", function () {\r",
											"            if (batchSourceReview.action == \"insert\") {\r",
											"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
											"              pm.expect(item.status.label).to.eql(\"submitted\");\r",
											"              pm.expect(item.status.user.username).to.eql(\"admin\");\r",
											"              pm.expect(item.username).to.eql(\"admin\");              \r",
											"              pm.expect(item.detail).to.eql(\"test\");\r",
											"\r",
											"\r",
											"            }\r",
											"            else {            \r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
											"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"            }\r",
											"          })\r",
											"      }\r",
											"        \r",
											"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
											"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
											"        pm.test(\"test insert review. Should not exist for update actions\", function () {\r",
											"          if (batchSourceReview.action == \"update\") {\r",
											"            pm.expect(1).to.eql(2);\r",
											"\r",
											"          }\r",
											"          else{\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"saved\");\r",
											"            pm.expect(item.status.user.username).to.eql(user);\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"          }\r",
											"        })\r",
											"\r",
											"\r",
											"\r",
											"      }\r",
											"\r",
											"\r",
											"\r",
											"    };\r",
											"\r",
											"// });\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(collectionNames);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     for (let name of collectionNames){\r",
											"//         pm.expect(name).to.match(regex);\r",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"//     }\r",
											" \r",
											"// })\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "status",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "groupId",
											"value": "<string>",
											"description": "A query parameter that indentifies a Group",
											"disabled": true
										},
										{
											"key": "cci",
											"value": "<string>",
											"description": "A query parameter that indentifies a CCI",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import BATCH application data (as elevated Admin) Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{batch-appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST batch review: target stig, whole stig - ACTION: merge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"const respData = pm.response.json()\r",
											"\r",
											"pm.test(\"test inserted\", function () {\r",
											"    // try {\r",
											"        pm.expect(respData.inserted).to.eql(0)\r",
											"    // }\r",
											"    // catch (e) {\r",
											"    //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"    //     throw(e)\r",
											"    // }\r",
											"});\r",
											"pm.test(\"test updated\", function () {\r",
											"        pm.expect(respData.updated).to.eql(2)\r",
											"});\r",
											"\r",
											"pm.test(\"test failed validation\", function () {\r",
											"        pm.expect(respData.failedValidation).to.eql(0)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"validation errors\", function () {\r",
											"        pm.expect(respData.validationErrors).to.have.length(0)\r",
											"\r",
											"});\r",
											"\r",
											"// const reqData = JSON.parse(pm.request.body.raw)\r",
											"// const expectedReview = {\r",
											"//   assetId: \"42\",\r",
											"//   assetName: \"Collection_X_lvl1_asset-1\",\r",
											"//   assetLabelIds: [\r",
											"//     \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
											"//     \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
											"//     ],\r",
											"//   ruleId: pm.environment.get(\"testRuleId\"),\r",
											"//   result: reqData.result,\r",
											"//   resultEngine: null,\r",
											"//   detail: reqData.detail,\r",
											"//   autoResult: reqData.autoResult,\r",
											"//   comment: reqData.comment,\r",
											"//   userId: userId,\r",
											"//   username: user,\r",
											"//   ts: respData.ts,\r",
											"//   touchTs: respData.touchTs,\r",
											"//   status: {\r",
											"//       ts: respData.status.ts,\r",
											"//       text: null,\r",
											"//       user: {\r",
											"//           userId: userId,\r",
											"//           username: user\r",
											"//       },\r",
											"//       label: reqData.status\r",
											"//   },\r",
											"//   stigs: [\"VPN_SRG_TEST\"],\r",
											"//   rule: {\r",
											"//     title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
											"//     ruleId: \"SV-106179r1_rule\",\r",
											"//     version: \"SRG-NET-000019-VPN-000040\",\r",
											"//     severity: \"medium\"\r",
											"//   }\r",
											"// }\r",
											"// pm.test(\"Response matches expected response\", function () {\r",
											"//     try {\r",
											"//         pm.expect(respData).to.eql(expectedReview)\r",
											"//     }\r",
											"//     catch (e) {\r",
											"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"//         throw(e)\r",
											"//     }\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let batchSourceReview =\r",
											"{\r",
											"    \"source\":\r",
											"    {\r",
											"        \"review\":\r",
											"            {\r",
											"                \"result\":\"fail\",\r",
											"                \"detail\":\"tesetsetset\"\r",
											"            }\r",
											"       \r",
											"    },\r",
											"    \"assets\":{\r",
											"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
											"    },\r",
											"    \"rules\":{\r",
											"        \"ruleIds\":[\"SV-106179r1_rule\"]\r",
											"    },\r",
											"    \"action\": \"update\"\r",
											"\r",
											"}\r",
											"\r",
											"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchSourceReview}}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "batch check - one reset resultengine, rest = source Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
											"    pm.test(\"Status should be is 403 for user bizarroLvl1 and collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    if (user == \"lvl1\" ) {\r",
											"        pm.expect(jsonData).to.have.lengthOf(2);\r",
											"    }\r",
											"    else{\r",
											"      if (batchSourceReview.rules.benchmarkIds){\r",
											"        console.log(\"request targeted benchmark rules\")\r",
											"        pm.expect(jsonData).to.have.lengthOf(243);\r",
											"      }\r",
											"      else{\r",
											"        console.log(\"request targeted one rule\")\r",
											"\r",
											"        if (batchSourceReview.action == \"update\") {\r",
											"          console.log(\"request updated for one rule\")\r",
											"          pm.expect(jsonData).to.have.lengthOf(2);\r",
											"        }\r",
											"        else{\r",
											"          console.log(\"request inserted for one rule\")\r",
											"          pm.expect(jsonData).to.have.lengthOf(3);\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const generatedReviewFields = {\r",
											"        // ruleId: \"SV-106179r1_rule\",\r",
											"        // result: \"fail\",\r",
											"        // detail: \"test batch\",\r",
											"        // comment: \"\",\r",
											"        // userId: \"87\",\r",
											"        // ts: \"\",\r",
											"        // touchTs: \"\",\r",
											"        username: user,\r",
											"        status: {\r",
											"            user: {\r",
											"                username: user\r",
											"            },\r",
											"            // label: \"saved\"\r",
											"        }        \r",
											"      };\r",
											"\r",
											"// let batchSourceReview =  JSON.parse(pm.environment.get(\"batchSourceReview\"));\r",
											"console.log(\"sourceReview: \" + batchSourceReview)\r",
											"\r",
											"let testedReviewFields =  generatedReviewFields\r",
											"testedReviewFields.result = batchSourceReview.source.review.result\r",
											"testedReviewFields.detail = batchSourceReview.source.review.detail\r",
											"let expectedStatus \r",
											"//         {\r",
											"//             user: {\r",
											"//                 username: \"admin\"\r",
											"//             },\r",
											"//             label: \"saved\"\r",
											"//         }        \r",
											"\r",
											"\r",
											"// testedReviewFields.status = expectedStatus ;\r",
											"\r",
											"\r",
											"        console.log(\"testedReviewFields: \")\r",
											"        console.log(testedReviewFields)\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testRuleId =  pm.environment.get(\"testRuleId\");\r",
											"        // console.log(testRuleId)\r",
											"\r",
											"\r",
											"// pm.test(\"Check if resulting reviews are as expected\", function () {\r",
											"    for (let item of jsonData){\r",
											"        if (item.ruleId == testRuleId && item.assetId == testAsset) {\r",
											"          // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        pm.test(\"test update review - different result - resultEngine Clear, status to reset\", function () {\r",
											"            if (batchSourceReview.action == \"insert\") {\r",
											"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
											"               pm.expect(item.resultEngine).to.not.eql(null);\r",
											"               pm.expect(item.status.user.username).to.eql(\"admin\");\r",
											"\r",
											"            }\r",
											"            else {\r",
											"            console.log(\"found test asset and rule - resultengine clear item\")\r",
											"            console.log(item)\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"saved\");\r",
											"            pm.expect(item.status.user.username).to.eql(user);\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"            }\r",
											"        })\r",
											"        }\r",
											"        // CASE: Existing review, test reset of resultengine and status - all users can update\r",
											"        else if (item.ruleId == testRuleId && item.assetId == 154) {\r",
											"          pm.test(\"test update review - same result\", function () {\r",
											"            if (batchSourceReview.action == \"insert\") {\r",
											"              console.log(\"found test asset and rule - action=insert - no changes\")\r",
											"              pm.expect(item.status.label).to.eql(\"submitted\");\r",
											"              pm.expect(item.status.user.username).to.eql(\"admin\");\r",
											"              pm.expect(item.username).to.eql(\"admin\");              \r",
											"              pm.expect(item.detail).to.eql(\"test\");\r",
											"\r",
											"\r",
											"            }\r",
											"            else {            \r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"submitted\");\r",
											"            pm.expect(item.status.user.username).to.eql(\"admin\");\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"            }\r",
											"          })\r",
											"      }\r",
											"        \r",
											"      // CASE: new  review, test reset of resultengine and status - non-lvl1-can update\r",
											"      else if (item.ruleId == testRuleId && item.assetId == 62) {\r",
											"        pm.test(\"test insert review. Should not exist for update actions\", function () {\r",
											"          if (batchSourceReview.action == \"update\") {\r",
											"            pm.expect(1).to.eql(2);\r",
											"\r",
											"          }\r",
											"          else{\r",
											"            pm.expect(item.resultEngine).to.eql(null);\r",
											"            pm.expect(item.status.label).to.eql(\"saved\");\r",
											"            pm.expect(item.status.user.username).to.eql(user);\r",
											"            pm.expect(item.username).to.eql(user);\r",
											"            pm.expect(item.result).to.eql(batchSourceReview.source.review.result);\r",
											"            pm.expect(item.detail).to.eql(batchSourceReview.source.review.detail);\r",
											"          }\r",
											"        })\r",
											"\r",
											"\r",
											"\r",
											"      }\r",
											"\r",
											"\r",
											"\r",
											"    };\r",
											"\r",
											"// });\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(collectionNames);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     for (let name of collectionNames){\r",
											"//         pm.expect(name).to.match(regex);\r",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"//     }\r",
											" \r",
											"// })\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "status",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "groupId",
											"value": "<string>",
											"description": "A query parameter that indentifies a Group",
											"disabled": true
										},
										{
											"key": "cci",
											"value": "<string>",
											"description": "A query parameter that indentifies a CCI",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Revision Pinning",
					"item": [
						{
							"name": "LoadTestData Copy",
							"item": [
								{
									"name": "Import a new STIG - VPN  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"// }\r",
													"// else {\r",
													"//     pm.test(\"Status code is 403\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{vpnStig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - VPN R1V0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// let jsonData = pm.response.json();\r",
													"// let expectedRevData = \r",
													"// {\r",
													"//     \"benchmarkId\": \"VPN_SRG_TEST\",\r",
													"//     \"revisionStr\": \"V1R0\",\r",
													"//     \"action\": \"inserted\"\r",
													"// }\r",
													"\r",
													"\r",
													"// pm.test(\"Response JSON as expected)\", function () {\r",
													"//     pm.expect(jsonData).to.be.an('object')\r",
													"//     pm.expect(jsonData).to.eql(expectedRevData)\r",
													"// });\r",
													"\r",
													"\r",
													"// console.log(response)\r",
													"\r",
													"\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{testStigFile}}",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "form-data-files/U_VPN_SRG_V1R0_Manual-xccdf.xml"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - VPN R1V0 - just check response",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"// }\r",
													"// else {\r",
													"//     pm.test(\"Status code is 403\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{testStigFile}}",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "form-data-files/U_VPN_SRG_V1R0_Manual-xccdf.xml"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - Win 10  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"// }\r",
													"// else {\r",
													"//     pm.test(\"Status code is 403\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{win10Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - RHEL 7 (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"// }\r",
													"// else {\r",
													"//     pm.test(\"Status code is 403\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{rhel7Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data (as elevated Admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "LoadTestData - create-and-deletes-only",
							"item": [
								{
									"name": "load standard test data - but not for rev pinning",
									"item": []
								},
								{
									"name": "create and delete a new collection, and an asset in the testCollection",
									"item": [
										{
											"name": "Create a Collection in order to delete it",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
															"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(403);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"// else {\r",
															"    pm.test(\"Status code is 201\", function () {\r",
															"        pm.response.to.have.status(201); \r",
															"    });\r",
															"// }\r",
															"if (pm.response.code !== 201) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let respJson = pm.response.json();\r",
															"let collectionToDelete = respJson.collectionId\r",
															"pm.environment.set(\"collectionToDelete\", collectionToDelete);\r",
															"\r",
															"// let requestToTest = JSON.parse(pm.request.body.raw)\r",
															"\r",
															"//Collection creator cannot see labels on collection it did not give itself a grant for\r",
															"// if (user == \"collectioncreator\") { \r",
															"//     requestToTest.labels = []\r",
															"// }\r",
															"console.log(\"created collection with id: \" + JSON.stringify(collectionToDelete));\r",
															"\r",
															"\r",
															"// created now being returned, but don't know what value it will be.\r",
															"// response validation will verify that the property exists.\r",
															"// delete respJson.created;\r",
															"\r",
															"// pm.test(\"Response matches request\", function () {\r",
															"//     pm.expect(collectionGetToPost(respJson))\r",
															"//     .to.eql(requestToTest)\r",
															"// })\r",
															"\r",
															"// function collectionGetToPost (collectionGet) {\r",
															"//     // extract the transformed and unposted properties\r",
															"//     const {collectionId, grants, labels, ...collectionPost} = collectionGet\r",
															"\r",
															"//     // add transformed properties to the derived post  \r",
															"//     collectionPost.grants = grantsPostToGet(grants)\r",
															"//     collectionPost.labels = labelsPostToGet(labels)\r",
															"\r",
															"//     // the derived post object\r",
															"//     return collectionPost\r",
															"// }\r",
															"\r",
															"// function grantsPostToGet(grantsGetArray) {\r",
															"//     const grantsPostArray = []\r",
															"//     for (const grant of grantsGetArray) {\r",
															"//         grantsPostArray.push({\r",
															"//             userId: grant.user.userId,\r",
															"//             accessLevel: grant.accessLevel\r",
															"//         })\r",
															"//     }\r",
															"//     return grantsPostArray\r",
															"// }\r",
															"\r",
															"// function labelsPostToGet(labelsGetArray) {\r",
															"//    return labelsGetArray.map( label => {\r",
															"//         const {labelId, uses, ...labelPost} = label\r",
															"//         return labelPost\r",
															"\r",
															"//     })\r",
															"// }"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"TEST_delete_{{$randomNoun}}-{{$randomJobType}}\",\n    \"description\": \"Collection TEST description\",\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        },\n        \"history\": {\n            \"maxReviews\": 11\n        }\n  },\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"grants\": [\n        {\n                \"userId\": \"1\",\n                \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"85\",\n                \"accessLevel\": 1\n        }        \n    ],\n    \"labels\": [\n        {\n            \"name\": \"TEST\",\n            \"description\": \"Collection label description\",\n            \"color\": \"ffffff\"\n        }\n    ]\n}\n"
												},
												"url": {
													"raw": "{{baseUrl}}/collections?elevate=true&projection=grants&projection=labels",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "elevate",
															"value": "true",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														},
														{
															"key": "projection",
															"value": "grants",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "labels"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Same tests as for GET /collection/{collectionId}\r",
															"\r",
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"lvl1\" || user == \"lvl2\" || user == \"lvl3\" || user == \"globular\" || user == \"collectioncreator\" ) { \r",
															"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    // return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let respJson = pm.response.json();\r",
															"let deletedCollection = respJson.collectionId\r",
															"pm.environment.set(\"deletedCollection\", deletedCollection);\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response has requested projections and values\", function () {\r",
															"    // for (let item of jsonData){\r",
															"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"    // var regex = new RegExp(collectionMatchString);\r",
															"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
															"    //     pm.expect(jsonData.name).to.match(regex);\r",
															"    // });\r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
															"        pm.expect(jsonData).to.have.property('assets');\r",
															"\r",
															"        for (let asset of jsonData.assets){\r",
															"            // pm.expect(asset).to.have.property('name');\r",
															"            // pm.expect(asset).to.have.property('assetId');\r",
															"        }\r",
															"    }\r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
															"        pm.expect(jsonData).to.have.property('grants');\r",
															"   \r",
															"        for (let grant of jsonData.grants){\r",
															"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
															"            // pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
															"        pm.expect(jsonData).to.have.property('stigs');\r",
															"\r",
															"        for (let stig of jsonData.stigs){\r",
															"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
															"        // console.log(\"checking owners projection\");\r",
															"        pm.expect(jsonData).to.have.property('owners');\r",
															"        for (let owner of jsonData.owners){\r",
															"            // pm.expect(owner).to.have.all.keys(userKeys);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
															"        // console.log(\"checking statistics projection\");\r",
															"        pm.expect(jsonData).to.have.property('statistics');\r",
															"\r",
															"        // pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
															"    }\r",
															"\r",
															"\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
															"// // console.log(\"collection string = \" + collectionMatchString);\r",
															"// var regex = new RegExp(collectionMatchString);\r",
															"// // let collectionNames = _.map(jsonData, 'name');\r",
															"// // console.log(jsonData.name);\r",
															"\r",
															"// pm.test(\"Check that proper Collections are returned\", function () {\r",
															"//     pm.expect(jsonData.name).to.match(regex);\r",
															"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
															"// });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId?elevate=true&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "true",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "grants",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "owners"
														},
														{
															"key": "projection",
															"value": "statistics"
														},
														{
															"key": "projection",
															"value": "stigs"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{collectionToDelete}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create an Asset to be deleted in test collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
															"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
															"//         pm.response.to.have.status(403);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"// else {\r",
															"    pm.test(\"Status code is 201\", function () {\r",
															"        pm.response.to.have.status(201);\r",
															"    });\r",
															"// }\r",
															"if (pm.response.code !== 201) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let respJson = pm.response.json();\r",
															"let assetToBeDeletedInTESTCollection = respJson.assetId\r",
															"pm.environment.set(\"assetToBeDeletedInTESTCollection\", assetToBeDeletedInTESTCollection);\r",
															"\r",
															"console.log(\"created asset with id: \" + JSON.stringify(assetToBeDeletedInTESTCollection));\r",
															"\r",
															"\r",
															"// pm.test(\"Response matches request\", function () {\r",
															"//     pm.expect(assetGetToPost(respJson))\r",
															"//     .to.eql(JSON.parse(pm.request.body.raw))\r",
															"// })\r",
															"\r",
															"// function assetGetToPost(assetGet) {\r",
															"//     // extract the transformed and unposted properties\r",
															"//     const {assetId, collection, stigs, mac, fqdn, ...assetPost} = assetGet\r",
															"    \r",
															"//     // add transformed properties to the derived post  \r",
															"//     assetPost.collectionId = collection.collectionId\r",
															"//     assetPost.stigs = stigsGetToPost(stigs)\r",
															"\r",
															"//     // the derived post object\r",
															"//     return assetPost\r",
															"// }\r",
															"\r",
															"// function stigsGetToPost(stigsGetArray) {\r",
															"//     const stigsPostArray = []\r",
															"//     for (const stig of stigsGetArray) {\r",
															"//         stigsPostArray.push(stig.benchmarkId)\r",
															"//     }\r",
															"//     return stigsPostArray\r",
															"// }\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{testCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"labelIds\": [\"{{testLabel}}\"],\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/assets?projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "set stig-asset grants for a lvl1 user in this collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"let response = pm.response.text();\r",
															"console.log(response)\r",
															"\r",
															"// pm.test(\"Body contains string\",() => {\r",
															"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
															"// });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"{{assetToBeDeletedInTESTCollection}}\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"42\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"154\"\r\n    }        \r\n]\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"grants",
														":userId",
														"access"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "userId",
															"value": "{{testLvl1User}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Import one or more Reviews from a JSON body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"const expectedResponse = {\r",
															"    rejected: [],\r",
															"    affected: {\r",
															"        updated: 0,\r",
															"        inserted: 1\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Response matches request\", function () {\r",
															"    pm.expect(jsonData).to.eql(expectedResponse);\r",
															"})\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "assetId",
															"value": "{{assetToBeDeletedInTESTCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete an Asset in test collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"let response = pm.response.text();\r",
															"console.log(response)\r",
															"\r",
															"// pm.test(\"Body contains string\",() => {\r",
															"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
															"// });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token.stigmanadmin}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "statusStats",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigGrants"
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{assetToBeDeletedInTESTCollection}}",
															"description": "(Required) A path parameter that indentifies an Asset"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Pin revision for Collection",
							"item": [
								{
									"name": "Return the STIGs mapped in the specified Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// let stigKeys = [\r",
													"//     \"title\",\r",
													"//     \"ruleCount\",\r",
													"//     \"benchmarkId\",\r",
													"//     \"lastRevisionDate\",\r",
													"//     \"lastRevisionStr\",\r",
													"//     \"assetCount\",\r",
													"//     \"acceptedCount\",\r",
													"//     \"rejectedCount\",\r",
													"//     \"submittedCount\",\r",
													"//     \"savedCount\",\r",
													"//     \"minTs\",\r",
													"//     \"maxTs\"\r",
													"// ]\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    for (let stig of jsonData){\r",
													"        // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"        pm.expect(stig.revisionPinned).to.eql(false);\r",
													"\r",
													"    };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set the Assets mapped to a STIG - default rev and assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"defaultRevisionStr\": \"V1R1\",\n    \"assetIds\": [\"62\",\"42\",\"154\"]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "restrictedUserAccess",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set the Assets mapped to a STIG - default latest and assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"defaultRevisionStr\": \"latest\",\n    \"assetIds\": [\"62\",\"42\",\"154\"]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "restrictedUserAccess",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set the Assets mapped to a STIG - assets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetIds\": [\"62\",\"42\",\"154\"]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "restrictedUserAccess",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set the Assets mapped to a STIG - invalid rev - expect 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(422);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"// let jsonData = pm.response.json();\r",
													"\r",
													"// const respData = pm.response.json()\r",
													"// const reqData = JSON.parse(pm.request.body.raw)\r",
													"// const expectedResponse = {\r",
													"//   benchmarkId: pm.environment.get(\"testBenchmark\"),\r",
													"//   revisionStr: \"V1R0\",\r",
													"//   benchmarkDate: \"2010-07-19\",\r",
													"//   revisionPinned: true,\r",
													"//   ruleCount: 81,\r",
													"//   assetCount: 3,\r",
													"\r",
													"// }    \r",
													"\r",
													"// pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"//     pm.expect(respData).to.be.an('array');\r",
													"//     pm.expect(respData).to.have.lengthOf.at.least(1);\r",
													"//     pm.expect(respData).to.have.lengthOf(1);\r",
													"\r",
													"// });\r",
													"\r",
													"// pm.test(\"Response matches expected response\", function () {\r",
													"//     try {\r",
													"//         pm.expect(respData[0]).to.eql(expectedResponse)\r",
													"//     }\r",
													"//     catch (e) {\r",
													"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"//         throw(e)\r",
													"//     }\r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"defaultRevisionStr\": \"V1R5\"\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "restrictedUserAccess",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set the Assets mapped to a STIG - default rev only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"// let jsonData = pm.response.json();\r",
													"\r",
													"const respData = pm.response.json()\r",
													"const reqData = JSON.parse(pm.request.body.raw)\r",
													"const expectedResponse = {\r",
													"  benchmarkId: pm.environment.get(\"testBenchmark\"),\r",
													"  title: \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
													"  revisionStr: \"V1R0\",\r",
													"  benchmarkDate: \"2010-07-19\",\r",
													"  revisionPinned: true,\r",
													"  ruleCount: 81,\r",
													"  assetCount: 3,\r",
													"\r",
													"}    \r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(respData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response matches expected response\", function () {\r",
													"    try {\r",
													"        pm.expect(respData).to.eql(expectedResponse)\r",
													"    }\r",
													"    catch (e) {\r",
													"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"        throw(e)\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"defaultRevisionStr\": \"V1R0\"\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "restrictedUserAccess",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return mapped STIGs - expect v1r0 pin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"});\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let testPinnedRevStr = pm.environment.get(\"testPinnedRevStr\");\r",
													"\r",
													"let pinnedState = true;\r",
													"if (user == \"lvl1\" || user == \"lvl2\" ) {\r",
													"    pinnedState = false;\r",
													"    testPinnedRevStr = \"V1R1\"\r",
													"}\r",
													"\r",
													"// let stigKeys = [\r",
													"//     \"title\",\r",
													"//     \"ruleCount\",\r",
													"//     \"benchmarkId\",\r",
													"//     \"lastRevisionDate\",\r",
													"//     \"lastRevisionStr\",\r",
													"//     \"assetCount\",\r",
													"//     \"acceptedCount\",\r",
													"//     \"rejectedCount\",\r",
													"//     \"submittedCount\",\r",
													"//     \"savedCount\",\r",
													"//     \"minTs\",\r",
													"//     \"maxTs\"\r",
													"// ]\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    for (let stig of jsonData){\r",
													"        // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"        if (stig.benchmarkId ==  pm.environment.get(\"testBenchmark\"))\r",
													"        {\r",
													"            pm.expect(stig.revisionPinned).to.eql(pinnedState)\r",
													"            console.log(stig.revisionStr)\r",
													"            pm.expect(stig.revisionStr).to.eql(testPinnedRevStr)\r",
													"\r",
													"        }\r",
													"        else{\r",
													"            pm.expect(stig.revisionPinned).to.eql(false)\r",
													"        }\r",
													"\r",
													"\r",
													"    };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "verify metrics were recalculated relative to new pinned rev",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"lvl1\" || user == \"lvl2\" ) {\r",
													"    pm.test(\"Status should be is 200 for user lvl1 and lvl2, but can't change pins so can't affect metrics\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"});\r",
													"\r",
													"\r",
													"let testAsset = pm.environment.get(\"testAsset\");\r",
													"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
													"let testLabel = pm.environment.get(\"testLabel\");\r",
													"let testLabelName = pm.environment.get(\"testLabelName\");\r",
													"\r",
													"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
													"\r",
													"\r",
													"\r",
													"// Checking that response fulfills parameter requests\r",
													"for (let item of jsonData){\r",
													"    console.log( \"testing: \" + item.name) \r",
													"\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
													"        pm.expect(item.name).to.match(regex);\r",
													"    });\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
													"        pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
													"            pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
													"        })\r",
													"    }\r",
													"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
													"        pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
													"            pm.expect(item.assetId).to.eql(testAsset);\r",
													"        })\r",
													"    }   \r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
													"        pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
													"            let responseLabels = [];\r",
													"            for (let label of item.labels) {\r",
													"                responseLabels.push(label.labelId)\r",
													"            }\r",
													"            pm.expect(responseLabels).to.include(testLabel);\r",
													"        })\r",
													"    }           \r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
													"        pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
													"            let responseLabels = [];\r",
													"            for (let label of item.labels) {\r",
													"                responseLabels.push(label.name)\r",
													"            }\r",
													"            pm.expect(responseLabels).to.include(testLabelName);\r",
													"        })\r",
													"    }              \r",
													"\r",
													"\r",
													"\r",
													"//Checking that metric summaries are correct\r",
													"    let metricsReferenceCommon = {\r",
													"        assessed: 6,\r",
													"        assessments: testChecklistLength,\r",
													"        maxTs: \"2022-02-03T00:07:05Z\",\r",
													"        minTs: \"2020-08-11T22:27:26Z\",\r",
													"        results: {\r",
													"            fail: {\r",
													"                total: 3,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            pass: {\r",
													"                total: 1,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            error: {\r",
													"                total: 0,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            fixed: {\r",
													"                total: 0,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            unknown: {\r",
													"                total: 0,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            notchecked: {\r",
													"                total: 0,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            notselected: {\r",
													"                total: 0,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            informational: {\r",
													"                total: 0,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            notapplicable: {\r",
													"                total: 1,\r",
													"                resultEngine: 0\r",
													"            }\r",
													"        },\r",
													"        findings: {\r",
													"            low: 1,\r",
													"            medium: 2,\r",
													"            high: 0\r",
													"        },    \r",
													"        statuses: {\r",
													"            saved: {\r",
													"                total: 1,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            accepted: {\r",
													"                total: 0,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            rejected: {\r",
													"                total: 0,\r",
													"                resultEngine: 0\r",
													"            },\r",
													"            submitted: {\r",
													"                total: 4,\r",
													"                resultEngine: 0\r",
													"            }\r",
													"        }\t \r",
													"    }\r",
													"\r",
													"    metricsReferenceCommon.results.unassessed = {\r",
													"        total:  metricsReferenceCommon.results.informational.total + \r",
													"                metricsReferenceCommon.results.notselected.total + \r",
													"                metricsReferenceCommon.results.notchecked.total + \r",
													"                metricsReferenceCommon.results.error.total + \r",
													"                metricsReferenceCommon.results.fixed.total\r",
													"    }\r",
													"\r",
													"    \r",
													"    if (pm.request.url.getPath().match(/summary/)) {\r",
													"        console.log(\"checking summary metrics\")\r",
													"        if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
													"            // if (item.assetId ==  testAsset ) {\r",
													"            console.log( \"found Collection_X_lvl1_asset\") \r",
													"\r",
													"            pm.test(\"Check some stats - maxTs\", function () {\r",
													"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);\r",
													"            });                \r",
													"            pm.test(\"Check some stats - minTs\", function () {\r",
													"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);\r",
													"            });           \r",
													"\r",
													"            pm.test(\"Check some stats - findings, low\", function () {\r",
													"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);\r",
													"            });\r",
													"            pm.test(\"Check some stats - findings, medium\", function () {\r",
													"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);\r",
													"            });\r",
													"            pm.test(\"Check some stats - findings, high\", function () {\r",
													"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);\r",
													"            });                                \r",
													"\r",
													"            pm.test(\"Check some stats - results - NA\", function () {\r",
													"                pm.expect(item.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);\r",
													"            });        \r",
													"            pm.test(\"Check some stats - results - pass\", function () {\r",
													"                pm.expect(item.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);\r",
													"            });        \r",
													"\r",
													"            pm.test(\"Check some stats - results - fail\", function () {\r",
													"                pm.expect(item.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);\r",
													"            });     \r",
													"            pm.test(\"Check some stats - results - unassessed\", function () {\r",
													"                pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);\r",
													"            });                   \r",
													"\r",
													"            pm.test(\"Check some stats - status - saved\", function () {\r",
													"                pm.expect(item.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);\r",
													"            });   \r",
													"\r",
													"            pm.test(\"Check some stats - status - submitted\", function () {\r",
													"                pm.expect(item.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);\r",
													"            });  \r",
													"            pm.test(\"Check some stats - status - accepted\", function () {\r",
													"                pm.expect(item.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);\r",
													"            });                   \r",
													"            pm.test(\"Check some stats - status - rejected\", function () {\r",
													"                pm.expect(item.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);\r",
													"            });      \r",
													"\r",
													"            pm.test(\"Check some stats - assessments\", function () {\r",
													"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);\r",
													"            });             \r",
													"            pm.test(\"Check some stats - assessed\", function () {\r",
													"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);\r",
													"            });                          \r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"//Checking that metric details are correct\r",
													"    if (pm.request.url.getPath().match(/detail/)) {\r",
													"        if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
													"            // if (item.assetId ==  testAsset ) {\r",
													"            console.log( \"found Collection_X_lvl1_asset\") \r",
													"\r",
													"            pm.test(\"Check some stats - maxTs\", function () {\r",
													"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);\r",
													"            });                \r",
													"            pm.test(\"Check some stats - minTs\", function () {\r",
													"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);\r",
													"            });           \r",
													"\r",
													"            pm.test(\"Check some stats - findings, low\", function () {\r",
													"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);\r",
													"            });\r",
													"            pm.test(\"Check some stats - findings, medium\", function () {\r",
													"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);\r",
													"            });\r",
													"            pm.test(\"Check some stats - findings, high\", function () {\r",
													"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);\r",
													"            });                                \r",
													"\r",
													"            pm.test(\"Check some stats - results - NA\", function () {\r",
													"                pm.expect(item.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);\r",
													"            });        \r",
													"            pm.test(\"Check some stats - results - pass\", function () {\r",
													"                pm.expect(item.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);\r",
													"            });        \r",
													"\r",
													"            pm.test(\"Check some stats - results - fail\", function () {\r",
													"                pm.expect(item.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);\r",
													"            });     \r",
													"            pm.test(\"Check some stats - results - informational\", function () {\r",
													"                pm.expect(item.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);\r",
													"            });                 \r",
													"            pm.test(\"Check some stats - results - notchecked\", function () {\r",
													"                pm.expect(item.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);\r",
													"            });                 \r",
													"            pm.test(\"Check some stats - results - notselected\", function () {\r",
													"                pm.expect(item.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);\r",
													"            });                 \r",
													"            pm.test(\"Check some stats - results - error\", function () {\r",
													"                pm.expect(item.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);\r",
													"            });    \r",
													"            pm.test(\"Check some stats - results - fixed\", function () {\r",
													"                pm.expect(item.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);\r",
													"            });                 \r",
													"\r",
													"            // pm.test(\"Check some stats - results - unassessed\", function () {\r",
													"            //     pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);\r",
													"            // });                   \r",
													"\r",
													"            pm.test(\"Check some stats - status - saved\", function () {\r",
													"                pm.expect(item.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);\r",
													"            });   \r",
													"\r",
													"            pm.test(\"Check some stats - status - submitted\", function () {\r",
													"                pm.expect(item.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);\r",
													"            });  \r",
													"            pm.test(\"Check some stats - status - accepted\", function () {\r",
													"                pm.expect(item.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);\r",
													"            });                   \r",
													"            pm.test(\"Check some stats - status - rejected\", function () {\r",
													"                pm.expect(item.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);\r",
													"            });      \r",
													"\r",
													"            pm.test(\"Check some stats - assessments\", function () {\r",
													"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);\r",
													"            });             \r",
													"            pm.test(\"Check some stats - assessed\", function () {\r",
													"                pm.expect(item.metrics.assessed).to.equal(5);\r",
													"            });                          \r",
													"\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"   \r",
													"\r",
													"\r",
													"return;\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"metrics",
												"detail"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set the Assets mapped to a STIG - clear assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 204\", function () {\r",
													"        pm.response.to.have.status(204);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 204) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"// let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"// pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"//     pm.expect(jsonData).to.be.an('array');\r",
													"//     pm.expect(jsonData).to.have.lengthOf(0);\r",
													"\r",
													"// });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetIds\": []\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "restrictedUserAccess",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set the Assets mapped to a STIG - after pinned delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetIds\": [\"62\",\"42\",\"154\"]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "restrictedUserAccess",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TEST that re-adding STIG does not have old pin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// let stigKeys = [\r",
													"//     \"title\",\r",
													"//     \"ruleCount\",\r",
													"//     \"benchmarkId\",\r",
													"//     \"lastRevisionDate\",\r",
													"//     \"lastRevisionStr\",\r",
													"//     \"assetCount\",\r",
													"//     \"acceptedCount\",\r",
													"//     \"rejectedCount\",\r",
													"//     \"submittedCount\",\r",
													"//     \"savedCount\",\r",
													"//     \"minTs\",\r",
													"//     \"maxTs\"\r",
													"// ]\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    for (let stig of jsonData){\r",
													"        // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"        pm.expect(stig.revisionPinned).to.eql(false);\r",
													"\r",
													"    };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set the Assets mapped to a STIG - default rev only Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"// let jsonData = pm.response.json();\r",
													"\r",
													"const respData = pm.response.json()\r",
													"const reqData = JSON.parse(pm.request.body.raw)\r",
													"const expectedResponse = {\r",
													"  benchmarkId: pm.environment.get(\"testBenchmark\"),\r",
													"  title: \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
													"  revisionStr: \"V1R0\",\r",
													"  benchmarkDate: \"2010-07-19\",\r",
													"  revisionPinned: true,\r",
													"  ruleCount: 81,\r",
													"  assetCount: 3,\r",
													"\r",
													"}    \r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(respData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected response\", function () {\r",
													"    try {\r",
													"        pm.expect(respData).to.eql(expectedResponse)\r",
													"    }\r",
													"    catch (e) {\r",
													"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"        throw(e)\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"defaultRevisionStr\": \"V1R0\"\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "restrictedUserAccess",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Post and Get Reviews against Collection with pinned rev",
							"item": [
								{
									"name": "Return a list of Reviews for an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "status",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "benchmarkId",
													"value": "<string>",
													"description": "A query parameter that indentifies a STIG",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "rule",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												},
												{
													"key": "assetId",
													"value": "{{testAsset}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Review: rule only in latest, not default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"let userId = pm.environment.get(\"userId\");\r",
													"console.log(\"user: \" + user);\r",
													"console.log(\"userId: \" + userId)\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"lvl1\" || user == \"lvl2\" ) {\r",
													"    pm.test(\"Status should be is 200 for user lvl1 and lvl2, but can't change pins so can't affect metrics\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"const respData = pm.response.json()\r",
													"const reqData = JSON.parse(pm.request.body.raw)\r",
													"const expectedReview = {\r",
													"  assetId: \"42\",\r",
													"  assetName: \"Collection_X_lvl1_asset-1\",\r",
													"  assetLabelIds: [\r",
													"    \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
													"    \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
													"    ],\r",
													"  ruleId: pm.environment.get(\"testRuleId\"),\r",
													" ruleIds: [\r",
													"        pm.environment.get(\"testRuleId\")\r",
													"    ],  \r",
													"  result: reqData.result,\r",
													"  resultEngine: null,\r",
													"  detail: reqData.detail,\r",
													"  autoResult: reqData.autoResult,\r",
													"  comment: reqData.comment,\r",
													"  userId: userId,\r",
													"  username: user,\r",
													"  ts: respData.ts,\r",
													"  touchTs: respData.touchTs,\r",
													"  status: {\r",
													"      ts: respData.status.ts,\r",
													"      text: null,\r",
													"      user: {\r",
													"          userId: userId,\r",
													"          username: user\r",
													"      },\r",
													"      label: reqData.status\r",
													"  },\r",
													"  stigs: [\r",
													"        {\r",
													"            \"isDefault\": false,\r",
													"            \"ruleCount\": 81,\r",
													"            \"benchmarkId\": \"VPN_SRG_TEST\",\r",
													"            \"revisionStr\": \"V1R1\",\r",
													"            \"benchmarkDate\": \"2019-07-19\",\r",
													"            \"revisionPinned\": false\r",
													"        }\r",
													"    ],\r",
													"  rule: {\r",
													"    title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
													"    ruleId: \"SV-106179r1_rule\",\r",
													"    version: \"SRG-NET-000019-VPN-000040\",\r",
													"    severity: \"medium\"\r",
													"  }\r",
													"}\r",
													"pm.test(\"Response matches expected response\", function () {\r",
													"    try {\r",
													"        pm.expect(respData).to.eql(expectedReview)\r",
													"    }\r",
													"    catch (e) {\r",
													"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"        throw(e)\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "rule",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "history",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "ruleId",
													"value": "{{testRuleId}}",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": []
								},
								{
									"name": "PUT Review: rule is only in pinned rev - expect 201",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"let userId = pm.environment.get(\"userId\");\r",
													"console.log(\"user: \" + user);\r",
													"console.log(\"userId: \" + userId)\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
													"        pm.response.to.have.status(201);\r",
													"    });\r",
													"}\r",
													"// if (pm.response.code !== 200) {\r",
													"//     return;\r",
													"// }\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let testPinnedRevStr = pm.environment.get(\"testPinnedRevStr\");\r",
													"\r",
													"let pinnedState = true;\r",
													"if (user == \"lvl1\" || user == \"lvl2\" ) {\r",
													"    pinnedState = false;\r",
													"    testPinnedRevStr = \"V1R0\"\r",
													"}\r",
													"\r",
													"const respData = pm.response.json()\r",
													"const reqData = JSON.parse(pm.request.body.raw)\r",
													"const expectedReview = {\r",
													"  assetId: \"42\",\r",
													"  assetName: \"Collection_X_lvl1_asset-1\",\r",
													"  assetLabelIds: [\r",
													"    \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
													"    \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
													"    ],\r",
													"  ruleId: pm.environment.get(\"testRuleId-PinnedRev\"),\r",
													" ruleIds: [\r",
													"        pm.environment.get(\"testRuleId-PinnedRev\")\r",
													"    ],  \r",
													"  result: reqData.result,\r",
													"  resultEngine: null,\r",
													"  detail: reqData.detail,\r",
													"  autoResult: reqData.autoResult,\r",
													"  comment: reqData.comment,\r",
													"  userId: userId,\r",
													"  username: user,\r",
													"  ts: respData.ts,\r",
													"  touchTs: respData.touchTs,\r",
													"  status: {\r",
													"      ts: respData.status.ts,\r",
													"      text: null,\r",
													"      user: {\r",
													"          userId: userId,\r",
													"          username: user\r",
													"      },\r",
													"      label: reqData.status\r",
													"  },\r",
													"  stigs: [\r",
													"        {\r",
													"            \"isDefault\": pinnedState,\r",
													"            \"ruleCount\": 81,\r",
													"            \"benchmarkId\": \"VPN_SRG_TEST\",\r",
													"            \"revisionStr\": testPinnedRevStr,\r",
													"            \"benchmarkDate\": \"2010-07-19\",\r",
													"            \"revisionPinned\": pinnedState\r",
													"        }\r",
													"    ],\r",
													"  rule: {\r",
													"    title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
													"    ruleId: pm.environment.get(\"testRuleId-PinnedRev\"),\r",
													"    version: \"SRG-NET-000019-VPN-000040\",\r",
													"    severity: \"medium\"\r",
													"  }\r",
													"}\r",
													"pm.test(\"Response matches expected response\", function () {\r",
													"    try {\r",
													"        pm.expect(respData).to.eql(expectedReview)\r",
													"    }\r",
													"    catch (e) {\r",
													"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"        throw(e)\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "rule",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "history",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "ruleId",
													"value": "{{testRuleId-PinnedRev}}",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": []
								},
								{
									"name": "PUT Review: rule is only in pinned rev - 200 expected",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"let userId = pm.environment.get(\"userId\");\r",
													"console.log(\"user: \" + user);\r",
													"console.log(\"userId: \" + userId)\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let testPinnedRevStr = pm.environment.get(\"testPinnedRevStr\");\r",
													"\r",
													"let pinnedState = true;\r",
													"if (user == \"lvl1\" || user == \"lvl2\" ) {\r",
													"    pinnedState = false;\r",
													"    testPinnedRevStr = \"V1R0\"\r",
													"}\r",
													"\r",
													"\r",
													"const respData = pm.response.json()\r",
													"const reqData = JSON.parse(pm.request.body.raw)\r",
													"const expectedReview = {\r",
													"  assetId: \"42\",\r",
													"  assetName: \"Collection_X_lvl1_asset-1\",\r",
													"  assetLabelIds: [\r",
													"    \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
													"    \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
													"    ],\r",
													"  ruleId: pm.environment.get(\"testRuleId-PinnedRev\"),\r",
													" ruleIds: [\r",
													"        pm.environment.get(\"testRuleId-PinnedRev\")\r",
													"    ],  \r",
													"  result: reqData.result,\r",
													"  resultEngine: null,\r",
													"  detail: reqData.detail,\r",
													"  autoResult: reqData.autoResult,\r",
													"  comment: reqData.comment,\r",
													"  userId: userId,\r",
													"  username: user,\r",
													"  ts: respData.ts,\r",
													"  touchTs: respData.touchTs,\r",
													"  status: {\r",
													"      ts: respData.status.ts,\r",
													"      text: null,\r",
													"      user: {\r",
													"          userId: userId,\r",
													"          username: user\r",
													"      },\r",
													"      label: reqData.status\r",
													"  },\r",
													"  stigs: [\r",
													"        {\r",
													"            \"isDefault\": pinnedState,\r",
													"            \"ruleCount\": 81,\r",
													"            \"benchmarkId\": \"VPN_SRG_TEST\",\r",
													"            \"revisionStr\": testPinnedRevStr,\r",
													"            \"benchmarkDate\": \"2010-07-19\",\r",
													"            \"revisionPinned\": pinnedState\r",
													"        }\r",
													"    ],\r",
													"  rule: {\r",
													"    title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
													"    ruleId: pm.environment.get(\"testRuleId-PinnedRev\"),\r",
													"    version: \"SRG-NET-000019-VPN-000040\",\r",
													"    severity: \"medium\"\r",
													"  }\r",
													"}\r",
													"pm.test(\"Response matches expected response\", function () {\r",
													"    try {\r",
													"        pm.expect(respData).to.eql(expectedReview)\r",
													"    }\r",
													"    catch (e) {\r",
													"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"        throw(e)\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "rule",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "history",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "ruleId",
													"value": "{{testRuleId-PinnedRev}}",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": []
								}
							]
						},
						{
							"name": "batch",
							"item": [
								{
									"name": "POST batch review: target rules defined by stig (expect pinned rules only)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"let userId = pm.environment.get(\"userId\");\r",
													"console.log(\"user: \" + user);\r",
													"console.log(\"userId: \" + userId)\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"// const respData = pm.response.json()\r",
													"\r",
													"// pm.test(\"test inserted\", function () {\r",
													"//     // try {\r",
													"// if (user == \"lvl1\"){\r",
													"//         pm.expect(respData.inserted).to.eql(160)\r",
													"// }\r",
													"// else {\r",
													"//     pm.expect(respData.inserted).to.eql(241)\r",
													"// }\r",
													"//     // }\r",
													"//     // catch (e) {\r",
													"//     //     e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"//     //     throw(e)\r",
													"//     // }\r",
													"// });\r",
													"// pm.test(\"test updated\", function () {\r",
													"//         pm.expect(respData.updated).to.eql(2)\r",
													"// });\r",
													"\r",
													"// pm.test(\"test failed validation\", function () {\r",
													"//     if (user == \"lvl1\"){\r",
													"//         pm.expect(respData.failedValidation).to.eql(81)\r",
													"// }\r",
													"// else {    \r",
													"//         pm.expect(respData.failedValidation).to.eql(0)\r",
													"// }\r",
													"// });\r",
													"\r",
													"// pm.test(\"validation errors\", function () {\r",
													"//     if (user == \"lvl1\"){\r",
													"//         pm.expect(respData.validationErrors).to.have.length(50)\r",
													"// }\r",
													"// else {        \r",
													"//         pm.expect(respData.validationErrors).to.have.length(0)\r",
													"// }\r",
													"// });\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let batchSourceReview =\r",
													"{\r",
													"    \"source\":{\r",
													"        \"review\":\r",
													"            {\r",
													"                \"result\":\"fail\",\r",
													"                \"detail\":\"tesetsetset\"\r",
													"            }\r",
													"       \r",
													"    },\r",
													"    \"assets\":{\r",
													"        \"assetIds\":[\"62\",\"42\",\"154\"]\r",
													"    },\r",
													"    \"rules\":\r",
													"        {\r",
													"        \"benchmarkIds\":[\"VPN_SRG_TEST\"]\r",
													"        }\r",
													"}\r",
													"\r",
													"pm.environment.set(\"batchSourceReview\", JSON.stringify(batchSourceReview));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "            {{batchSourceReview}}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "projection",
													"value": "history",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": []
								},
								{
									"name": "Return detailed metrics for the specified Collection - check previously empty asset for 80 assesments (overlap between pin and current)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"});\r",
													"\r",
													"\r",
													"// let testAsset = pm.environment.get(\"testAsset\");\r",
													"let testAsset = 154\r",
													"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
													"// let testLabel = pm.environment.get(\"testLabel\");\r",
													"// let testLabelName = pm.environment.get(\"testLabelName\");\r",
													"\r",
													"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
													"\r",
													"\r",
													"\r",
													"// Checking that response fulfills parameter requests\r",
													"for (let item of jsonData){\r",
													"\r",
													"//Checking that metric details are correct\r",
													"    if (pm.request.url.getPath().match(/detail/)) {\r",
													"        if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
													"            // if (item.assetId ==  testAsset ) {\r",
													"            console.log( \"found Collection_X_lvl1_asset2\") \r",
													"     \r",
													"            pm.test(\"Check some stats - assessed\", function () {\r",
													"                pm.expect(item.metrics.assessed).to.equal(testChecklistLength);\r",
													"            });                          \r",
													"\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"   \r",
													"\r",
													"\r",
													"return;\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"metrics",
												"detail"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "STIG and Revision deletes",
							"item": [
								{
									"name": "benchmark",
									"item": [
										{
											"name": "Deletes a STIG (*** and all revisions ***) - expect fail, stig is assigned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"stigmanadmin\" || user == \"elevated\" ) { \r",
															"    pm.test(\"Status should be is 422 for user stigmanadmin while revision is pinned for this stig\", function () {\r",
															"        pm.response.to.have.status(422);\r",
															"    });\r",
															"    // return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403 for all other users\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}"
														},
														{
															"key": "force",
															"value": "true",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "{revision Str}",
									"item": [
										{
											"name": "Deletes the specified revision of a STIG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"stigmanadmin\" || user == \"elevated\" ) { \r",
															"    pm.test(\"Status should be is 200 for user stigmanadmin\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"    // return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403 for all other users\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId",
														"revisions",
														":revisionStr"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}"
														}
													],
													"variable": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "{{testRev}}",
															"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Deletes the specified revision of a STIG v1r0 - wo force (pinned)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"stigmanadmin\" || user == \"elevated\" ) { \r",
															"    pm.test(\"Status should be is 400 for user stigmanadmin. Latest is not a permitted revision string for this endpoint.\", function () {\r",
															"        pm.response.to.have.status(422);\r",
															"    });\r",
															"    // return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403 for all other users\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId",
														"revisions",
														":revisionStr"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}"
														},
														{
															"key": "force",
															"value": "true",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "V1R0",
															"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Deletes the specified revision of a STIG v1r0 - with force",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"stigmanadmin\" || user == \"elevated\" ) { \r",
															"    pm.test(\"Status should be is 400 for user stigmanadmin. Latest is not a permitted revision string for this endpoint.\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"    // return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 403 for all other users\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate={{elevated}}&force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId",
														"revisions",
														":revisionStr"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}"
														},
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "V1R0",
															"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return detailed metrics for the specified Collection - check metrics after delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"// let testAsset = pm.environment.get(\"testAsset\");\r",
															"let testAsset = 154\r",
															"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
															"// let testLabel = pm.environment.get(\"testLabel\");\r",
															"// let testLabelName = pm.environment.get(\"testLabelName\");\r",
															"\r",
															"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
															"\r",
															"\r",
															"\r",
															"// Checking that response fulfills parameter requests\r",
															"for (let item of jsonData){\r",
															"\r",
															"//Checking that metric details are correct\r",
															"    if (pm.request.url.getPath().match(/detail/)) {\r",
															"        if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
															"            // if (item.assetId ==  testAsset ) {\r",
															"            console.log( \"found Collection_X_lvl1_asset2\") \r",
															"     \r",
															"            pm.test(\"Check some stats - assessed\", function () {\r",
															"                pm.expect(item.metrics.assessed).to.equal(testChecklistLength);\r",
															"            });                          \r",
															"\r",
															"        }\r",
															"\r",
															"    }\r",
															"\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															"   \r",
															"\r",
															"\r",
															"return;\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"metrics",
														"detail"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Return the STIGs mapped in the specified Collection Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"let testPinnedRevStr = pm.environment.get(\"testPinnedRevStr\");\r",
											"\r",
											"let pinnedState = true;\r",
											"if (user == \"lvl1\" || user == \"lvl2\" ) {\r",
											"    pinnedState = false;\r",
											"    testPinnedRevStr = \"V1R1\"\r",
											"}\r",
											"\r",
											"// let stigKeys = [\r",
											"//     \"title\",\r",
											"//     \"ruleCount\",\r",
											"//     \"benchmarkId\",\r",
											"//     \"lastRevisionDate\",\r",
											"//     \"lastRevisionStr\",\r",
											"//     \"assetCount\",\r",
											"//     \"acceptedCount\",\r",
											"//     \"rejectedCount\",\r",
											"//     \"submittedCount\",\r",
											"//     \"savedCount\",\r",
											"//     \"minTs\",\r",
											"//     \"maxTs\"\r",
											"// ]\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response has requested properties and values\", function () {\r",
											"    for (let stig of jsonData){\r",
											"        // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
											"        if (stig.benchmarkId ==  pm.environment.get(\"testBenchmark\"))\r",
											"        {\r",
											"            pm.expect(stig.revisionPinned).to.eql(pinnedState)\r",
											"            console.log(stig.revisionStr)\r",
											"            pm.expect(stig.revisionStr).to.eql(testPinnedRevStr)\r",
											"\r",
											"        }\r",
											"        else{\r",
											"            pm.expect(stig.revisionPinned).to.eql(false)\r",
											"        }\r",
											"\r",
											"\r",
											"    };\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"stigs"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Requests that alter data"
		},
		{
			"name": "STIGS",
			"item": [
				{
					"name": "LoadTestData",
					"item": [
						{
							"name": "load standard test data",
							"item": [
								{
									"name": "Import a new STIG - Win 10  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{win10Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - RHEL 7 (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{rhel7Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - VPN  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{vpnStig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data (as elevated Admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Deletes the specified revision of a STIG v1r0 - with force - could fail if not present, so no tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate=true&force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												":benchmarkId",
												"revisions",
												":revisionStr"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true"
												},
												{
													"key": "force",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "V1R0",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create and delete a new collection, and an asset in the testCollection",
							"item": [
								{
									"name": "Create a Collection in order to delete it",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"    pm.test(\"Status code is 201\", function () {\r",
													"        pm.response.to.have.status(201); \r",
													"    });\r",
													"// }\r",
													"if (pm.response.code !== 201) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let collectionToDelete = respJson.collectionId\r",
													"pm.environment.set(\"collectionToDelete\", collectionToDelete);\r",
													"\r",
													"// let requestToTest = JSON.parse(pm.request.body.raw)\r",
													"\r",
													"//Collection creator cannot see labels on collection it did not give itself a grant for\r",
													"// if (user == \"collectioncreator\") { \r",
													"//     requestToTest.labels = []\r",
													"// }\r",
													"console.log(\"created collection with id: \" + JSON.stringify(collectionToDelete));\r",
													"\r",
													"\r",
													"// created now being returned, but don't know what value it will be.\r",
													"// response validation will verify that the property exists.\r",
													"// delete respJson.created;\r",
													"\r",
													"// pm.test(\"Response matches request\", function () {\r",
													"//     pm.expect(collectionGetToPost(respJson))\r",
													"//     .to.eql(requestToTest)\r",
													"// })\r",
													"\r",
													"// function collectionGetToPost (collectionGet) {\r",
													"//     // extract the transformed and unposted properties\r",
													"//     const {collectionId, grants, labels, ...collectionPost} = collectionGet\r",
													"\r",
													"//     // add transformed properties to the derived post  \r",
													"//     collectionPost.grants = grantsPostToGet(grants)\r",
													"//     collectionPost.labels = labelsPostToGet(labels)\r",
													"\r",
													"//     // the derived post object\r",
													"//     return collectionPost\r",
													"// }\r",
													"\r",
													"// function grantsPostToGet(grantsGetArray) {\r",
													"//     const grantsPostArray = []\r",
													"//     for (const grant of grantsGetArray) {\r",
													"//         grantsPostArray.push({\r",
													"//             userId: grant.user.userId,\r",
													"//             accessLevel: grant.accessLevel\r",
													"//         })\r",
													"//     }\r",
													"//     return grantsPostArray\r",
													"// }\r",
													"\r",
													"// function labelsPostToGet(labelsGetArray) {\r",
													"//    return labelsGetArray.map( label => {\r",
													"//         const {labelId, uses, ...labelPost} = label\r",
													"//         return labelPost\r",
													"\r",
													"//     })\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TEST_delete_{{$randomNoun}}-{{$randomJobType}}\",\n    \"description\": \"Collection TEST description\",\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        },\n        \"history\": {\n            \"maxReviews\": 11\n        }\n  },\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"grants\": [\n        {\n                \"userId\": \"1\",\n                \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"85\",\n                \"accessLevel\": 1\n        }        \n    ],\n    \"labels\": [\n        {\n            \"name\": \"TEST\",\n            \"description\": \"Collection label description\",\n            \"color\": \"ffffff\"\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections?elevate=true&projection=grants&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Same tests as for GET /collection/{collectionId}\r",
													"\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"lvl3\" || user == \"globular\" || user == \"collectioncreator\" ) { \r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    // return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let deletedCollection = respJson.collectionId\r",
													"pm.environment.set(\"deletedCollection\", deletedCollection);\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested projections and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    // var regex = new RegExp(collectionMatchString);\r",
													"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
													"    //     pm.expect(jsonData.name).to.match(regex);\r",
													"    // });\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        pm.expect(jsonData).to.have.property('assets');\r",
													"\r",
													"        for (let asset of jsonData.assets){\r",
													"            // pm.expect(asset).to.have.property('name');\r",
													"            // pm.expect(asset).to.have.property('assetId');\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        pm.expect(jsonData).to.have.property('grants');\r",
													"   \r",
													"        for (let grant of jsonData.grants){\r",
													"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            // pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        pm.expect(jsonData).to.have.property('stigs');\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        // console.log(\"checking owners projection\");\r",
													"        pm.expect(jsonData).to.have.property('owners');\r",
													"        for (let owner of jsonData.owners){\r",
													"            // pm.expect(owner).to.have.all.keys(userKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData).to.have.property('statistics');\r",
													"\r",
													"        // pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// // let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(jsonData.name);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     pm.expect(jsonData.name).to.match(regex);\r",
													"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate=true&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{collectionToDelete}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create an Asset to be deleted in test collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"    pm.test(\"Status code is 201\", function () {\r",
													"        pm.response.to.have.status(201);\r",
													"    });\r",
													"// }\r",
													"if (pm.response.code !== 201) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let assetToBeDeletedInTESTCollection = respJson.assetId\r",
													"pm.environment.set(\"assetToBeDeletedInTESTCollection\", assetToBeDeletedInTESTCollection);\r",
													"\r",
													"console.log(\"created asset with id: \" + JSON.stringify(assetToBeDeletedInTESTCollection));\r",
													"\r",
													"\r",
													"// pm.test(\"Response matches request\", function () {\r",
													"//     pm.expect(assetGetToPost(respJson))\r",
													"//     .to.eql(JSON.parse(pm.request.body.raw))\r",
													"// })\r",
													"\r",
													"// function assetGetToPost(assetGet) {\r",
													"//     // extract the transformed and unposted properties\r",
													"//     const {assetId, collection, stigs, mac, fqdn, ...assetPost} = assetGet\r",
													"    \r",
													"//     // add transformed properties to the derived post  \r",
													"//     assetPost.collectionId = collection.collectionId\r",
													"//     assetPost.stigs = stigsGetToPost(stigs)\r",
													"\r",
													"//     // the derived post object\r",
													"//     return assetPost\r",
													"// }\r",
													"\r",
													"// function stigsGetToPost(stigsGetArray) {\r",
													"//     const stigsPostArray = []\r",
													"//     for (const stig of stigsGetArray) {\r",
													"//         stigsPostArray.push(stig.benchmarkId)\r",
													"//     }\r",
													"//     return stigsPostArray\r",
													"// }\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{testCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"labelIds\": [\"{{testLabel}}\"],\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "set stig-asset grants for a lvl1 user in this collection.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"{{assetToBeDeletedInTESTCollection}}\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"42\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"154\"\r\n    }        \r\n]\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"grants",
												":userId",
												"access"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												},
												{
													"key": "userId",
													"value": "{{testLvl1User}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import one or more Reviews from a JSON body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"const expectedResponse = {\r",
													"    rejected: [],\r",
													"    affected: {\r",
													"        updated: 0,\r",
													"        inserted: 1\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"Response matches request\", function () {\r",
													"    pm.expect(jsonData).to.eql(expectedResponse);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												},
												{
													"key": "assetId",
													"value": "{{assetToBeDeletedInTESTCollection}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an Asset in test collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{assetToBeDeletedInTESTCollection}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "stigs GET",
					"item": [
						{
							"name": "{benchmark Id}",
							"item": [
								{
									"name": "revisions",
									"item": [
										{
											"name": "{revision Str}",
											"item": [
												{
													"name": "groups",
													"item": [
														{
															"name": "Return the list of groups for the specified revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an array\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('array');\r",
																			"});\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON aggregated by group\", function () {\r",
																			"\r",
																			"    for (let item of jsonData){\r",
																			"        pm.expect(item.groupId).to.exist;\r",
																			"        pm.expect(item.rules).to.be.an('array')\r",
																			"    }   \r",
																			"});\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups?projection=rules",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"groups"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "rules",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "<string>",
																			"description": "Additional properties to include in the response.\n",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Return the rules, checks and fixes for a Group from a specified revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an array\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('object');\r",
																			"});\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON aggregated by group\", function () {\r",
																			"\r",
																			"    // for (let item of jsonData){\r",
																			"        pm.expect(jsonData.groupId).to.exist;\r",
																			"        pm.expect(jsonData.rules).to.be.an('array')\r",
																			"    // }   \r",
																			"});\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups/:groupId?projection=rules",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"groups",
																		":groupId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "rules",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "<string>",
																			"description": "Additional properties to include in the response.\n",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		},
																		{
																			"key": "groupId",
																			"value": "{{testGroupId}}",
																			"description": "(Required) A path parameter that indentifies a Group"
																		}
																	]
																},
																"description": "None"
															},
															"response": []
														}
													]
												},
												{
													"name": "rules",
													"item": [
														{
															"name": "Return rule data for the specified revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"let testChecklistLength = pm.environment.get(\"checklistLength\");\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an array\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('array').of.length(testChecklistLength);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=detail&projection=ccis&projection=check&projection=fix",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"rules"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "detail",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "ccis",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "check"
																		},
																		{
																			"key": "projection",
																			"value": "fix"
																		},
																		{
																			"key": "projection",
																			"value": "stigs",
																			"disabled": true
																		},
																		{
																			"key": "projection",
																			"value": "checkContentMatches",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Return rule data for the LATEST revision of a STIG",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an array\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('array');\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=detail&projection=ccis&projection=check&projection=fix",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"rules"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "detail",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "ccis",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "check"
																		},
																		{
																			"key": "projection",
																			"value": "fix"
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "latest",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Return rule data for the specified Rule in a revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an object\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('object');\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules/:ruleId?projection=detail&projection=ccis&projection=check&projection=fix",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"rules",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "detail",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "ccis",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "check"
																		},
																		{
																			"key": "projection",
																			"value": "fix"
																		},
																		{
																			"key": "projection",
																			"value": "stigs",
																			"disabled": true
																		},
																		{
																			"key": "projection",
																			"value": "checkContentMatches",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}"
																		},
																		{
																			"key": "ruleId",
																			"value": "{{testRuleId}}"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Return metadata for the specified revision of a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr"
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "{{testRev}}",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of CCIs from a STIG revision",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/ccis",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr",
																"ccis"
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "{{testRev}}",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Return a list of revisions for the specified STIG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId",
														"revisions"
													],
													"variable": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Return properties of the specified STIG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												":benchmarkId"
											],
											"variable": [
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Return a list of available STIGs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "title",
											"value": "<string>",
											"description": "A string found anywhere in a STIG title",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of available STIGs NAME FILTER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs?title=vpn",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "title",
											"value": "vpn",
											"description": "A string found anywhere in a STIG title"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return data for the specified CCI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//START AZDO #117\r",
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON contains requested projections\", function () {\r",
											"    if (pm.request.url.getQueryString().match(/projection=emassAp/)) {\r",
											"        pm.expect(jsonData.emassAp).to.be.an('object');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=references/)) {\r",
											"        pm.expect(jsonData.references).to.be.an('array');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        pm.expect(jsonData.stigs).to.be.an('array');\r",
											"}});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/ccis/:cci?projection=stigs&projection=emassAp&projection=references",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										"ccis",
										":cci"
									],
									"query": [
										{
											"key": "projection",
											"value": "stigs"
										},
										{
											"key": "projection",
											"value": "emassAp"
										},
										{
											"key": "projection",
											"value": "references"
										}
									],
									"variable": [
										{
											"key": "cci",
											"value": "{{testCci}}",
											"description": "(Required) A path parameter that indentifies a CCI"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return rule data for the specified Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let testRuleId = pm.environment.get(\"testRuleId\");\r",
											"\r",
											"\r",
											"let title = \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\"\r",
											"let checkContent = \"Verify the VPN Gateway has an inbound and outbound traffic security policy which is in compliance with information flow control policies (e.g., IPsec policy configuration).\\n\\nReview network device configurations and topology diagrams. Verify encapsulated or encrypted traffic received from other enclaves with different security policies terminate at the perimeter for filtering and content inspection by a firewall and IDPS before gaining access to the private network.\\n\\nIf the VPN Gateway does not ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies, this is a finding.\"\r",
											"\r",
											"\r",
											"pm.test(\"Response rule has proper title\", function () {\r",
											"    pm.expect(jsonData.title).to.eql(title);\r",
											"});\r",
											"pm.test(\"proper check content\", function () {\r",
											"    pm.expect(jsonData.check.content).to.not.eql(\"This check content has been replaced!\");\r",
											"});    \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/rules/:ruleId?projection=detail&projection=ccis&projection=check&projection=fix",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										"rules",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "detail",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "ccis",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "check"
										},
										{
											"key": "projection",
											"value": "fix"
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "checkContentMatches",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "ruleId",
											"value": "{{testRuleId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "stigs PPPD",
					"item": [
						{
							"name": "{benchmark Id}",
							"item": [
								{
									"name": "revisions",
									"item": [
										{
											"name": "{revision Str}",
											"item": [
												{
													"name": "Deletes the specified revision of a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"let elevated = \"\";\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"   elevated = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"stigmanadmin\" && elevated == \"elevated\" ) { \r",
																	"    pm.test(\"Status should be is 200 for user stigmanadmin\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"    // return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 403 for all other users\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate=true&force=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "true"
																},
																{
																	"key": "force",
																	"value": "true"
																}
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "{{testRev}}",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Deletes the specified revision of a STIG latest",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"let elevated = \"\";\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"   elevated = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"if (user == \"stigmanadmin\" && elevated == \"elevated\" ) { \r",
																	"    pm.test(\"Status should be is 400 for user stigmanadmin. Latest is not a permitted revision string for this endpoint.\", function () {\r",
																	"        pm.response.to.have.status(400);\r",
																	"    });\r",
																	"    // return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 403 for all other users\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate=true&force=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "true"
																},
																{
																	"key": "force",
																	"value": "true"
																}
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "latest",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Deletes a STIG (*** and all revisions ***)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"let elevated = \"\";\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"   elevated = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"stigmanadmin\" && elevated == \"elevated\" ) { \r",
													"    pm.test(\"Status should be is 200 for user stigmanadmin\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"    // return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403 for all other users\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/:benchmarkId?elevate=true&force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												":benchmarkId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true"
												},
												{
													"key": "force",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "benchmarkId",
													"value": "{{scrapBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Import a new STIG - new",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let expectedRevData = \r",
											"{\r",
											"    \"benchmarkId\": \"VPN_SRG_TEST\",\r",
											"    \"revisionStr\": \"V1R1\",\r",
											"    \"action\": \"inserted\"\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON as expected)\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object')\r",
											"    pm.expect(jsonData).to.eql(expectedRevData)\r",
											"});\r",
											"\r",
											"\r",
											"// console.log(response)\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{testStigFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=false&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "false"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a new STIG - preserve",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let expectedRevData = \r",
											"{\r",
											"    \"benchmarkId\": \"VPN_SRG_TEST\",\r",
											"    \"revisionStr\": \"V1R1\",\r",
											"    \"action\": \"preserved\"\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON as expected)\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object')\r",
											"    pm.expect(jsonData).to.eql(expectedRevData)\r",
											"});\r",
											"\r",
											"\r",
											"// console.log(response)\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{testStigFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=false&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "false"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a new STIG - clobber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let expectedRevData = \r",
											"{\r",
											"    \"benchmarkId\": \"VPN_SRG_TEST\",\r",
											"    \"revisionStr\": \"V1R1\",\r",
											"    \"action\": \"replaced\"\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON as expected)\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object')\r",
											"    pm.expect(jsonData).to.eql(expectedRevData)\r",
											"});\r",
											"\r",
											"\r",
											"// console.log(response)\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{testStigFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Replacement Tests",
					"item": [
						{
							"name": "Import and replace a STIG revision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"let expectedRevData = \r",
											"{\r",
											"    \"benchmarkId\": \"VPN_SRG_TEST\",\r",
											"    \"revisionStr\": \"V1R1\",\r",
											"    \"action\": \"replaced\"\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON as expected)\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object')\r",
											"    pm.expect(jsonData).to.eql(expectedRevData)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{testStigFileReplace}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of revisions for the specified STIG - check for updated revision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\") { //placeholder for \"users\" that should fail\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array of proper length (1, no new stig revision imported)\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array').of.length(1);\r",
											"});\r",
											"\r",
											"let description = \"This description replaces the old description\"\r",
											"\r",
											"\r",
											"for (const rev of jsonData){\r",
											"        pm.test(\"Response includes updated stig ruleCount \", function () {\r",
											"            pm.expect(rev.ruleCount).to.eql(2);\r",
											"    })\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"revisions"
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return rule data for the specified revision of a STIG after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\") { //placeholder for \"users\" that should fail\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"let checklistLength = pm.environment.get(\"checklistLength\");\r",
											"//For replacement test, length = 2\r",
											"checklistLength = 2;\r",
											"\r",
											"let testRuleId = pm.environment.get(\"testRuleId\");\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response array is proper length\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
											"});\r",
											"\r",
											"let title = \"This rule title has been replaced.\"\r",
											"\r",
											"\r",
											"for (const rule of jsonData){\r",
											"    if (rule.ruleId === testRuleId){\r",
											"        pm.test(\"Response includes updated rule title\", function () {\r",
											"            pm.expect(rule.title).to.eql(title);\r",
											"        });\r",
											"    }\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=detail&projection=ccis&projection=check&projection=fix",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"revisions",
										":revisionStr",
										"rules"
									],
									"query": [
										{
											"key": "projection",
											"value": "detail",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "ccis",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "check"
										},
										{
											"key": "projection",
											"value": "fix"
										}
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "{{testRev}}",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return rule data for the specified Rule in a revision of a STIG after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\") { //placeholder for \"users\" that should fail\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Response JSON is an object\", function () {\r",
											"//     pm.expect(jsonData).to.be.an('object');\r",
											"// });\r",
											"\r",
											"let title = \"This rule title has been replaced.\"\r",
											"\r",
											"pm.test(\"Response rule has proper title\", function () {\r",
											"    pm.expect(jsonData.title).to.eql(title);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules/:ruleId?projection=detail&projection=ccis&projection=check&projection=fix",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"revisions",
										":revisionStr",
										"rules",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "detail",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "ccis",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "check"
										},
										{
											"key": "projection",
											"value": "fix"
										}
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "{{testRev}}",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										},
										{
											"key": "ruleId",
											"value": "{{testRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Checks for other revs, content matches",
					"item": [
						{
							"name": "Import a new STIG - clobber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let expectedRevData = \r",
											"{\r",
											"    \"benchmarkId\": \"VPN_SRG_TEST\",\r",
											"    \"revisionStr\": \"V1R1\",\r",
											"    \"action\": \"replaced\"\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON as expected)\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object')\r",
											"    pm.expect(jsonData).to.eql(expectedRevData)\r",
											"});\r",
											"\r",
											"\r",
											"// console.log(response)\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{testStigFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import another stig with check-system collision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"//reset envvar to the normal value:\r",
											"let testStigFileOtherRevision = \"U_VPN_SRG_V1R1_Manual-xccdf-replace.xml\"    \r",
											"    pm.environment.set(\"testStigFileReplace\", testStigFileOtherRevision);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"let expectedRevData = \r",
											"{\r",
											"    \"benchmarkId\": \"VPN_SRG_OTHER\",\r",
											"    \"revisionStr\": \"V2R2\",\r",
											"    \"action\": \"inserted\"\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON as expected)\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object')\r",
											"    pm.expect(jsonData).to.eql(expectedRevData)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testStigFileOtherRevision = \"U_VPN_SRG-OTHER_V1R1_Manual-xccdf.xml\"    \r",
											"    pm.environment.set(\"testStigFileReplace\", testStigFileOtherRevision);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{testStigFileReplace}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return rule data for the specified revision of a STIG - after import of \"other\" stig with checkId collision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let testChecklistLength = pm.environment.get(\"checklistLength\");\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array').of.length(testChecklistLength);\r",
											"});\r",
											"\r",
											"let testRuleId = pm.environment.get(\"testRuleId\");\r",
											"\r",
											"\r",
											"let title = \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\"\r",
											"\r",
											"\r",
											"for (const rule of jsonData){\r",
											"    if (rule.ruleId === testRuleId){\r",
											"        pm.test(\"Response rule has proper title\", function () {\r",
											"            pm.expect(rule.title).to.eql(title);\r",
											"        });\r",
											"            if (rule.check.system === \"C-95877r1_chk\"){\r",
											"                pm.test(\"proper check content\", function () {\r",
											"                    pm.expect(rule.check.content).to.not.eql(\"This check content has been replaced!\");\r",
											"                });    \r",
											"            }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// for (const rule of jsonData){\r",
											"//     if (rule.ruleId === testRuleId){\r",
											"//         pm.test(\"proper number of checkContentMatches\", function () {\r",
											"//             pm.expect(rule.checkContentMatches).to.have.length(2);\r",
											"//         });\r",
											"//         pm.test(\"proper number of stigs\", function () {\r",
											"//             pm.expect(rule.stigs).to.have.length(1);\r",
											"//         });        \r",
											"     \r",
											"//     // let matchedRules = [];\r",
											"//     for (const match of rule.checkContentMatches){\r",
											"//         // matchedRules.push(rule.ruleId)\r",
											"//             if (rule.ruleId === testRuleId){\r",
											"//                 pm.test(\"proper ruleIds for check matches\", function () {\r",
											"//                     pm.expect(match.ruleId).to.be.oneOf([\"SV-106181r1_xxxx\",\"SV-106179r1_xxxx\"]);\r",
											"//                 });    \r",
											"//             }\r",
											"//         }\r",
											"//     }\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=check",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"revisions",
										":revisionStr",
										"rules"
									],
									"query": [
										{
											"key": "projection",
											"value": "detail",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "ccis",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "check"
										},
										{
											"key": "projection",
											"value": "fix",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "checkContentMatches",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "{{testRev}}",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return rule data for the specified revision of a STIG - expect matches to other rev - requests V2R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"stigmanadmin\") { //only continue for stigmanadmin\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let testChecklistLength = pm.environment.get(\"checklistLength\");\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array').of.length(2);\r",
											"});\r",
											"\r",
											"\r",
											"let testRuleId = \"SV-106179r1_xxxx\"\r",
											"let title = \"This rule title has been replaced.\"\r",
											"\r",
											"// pm.test(\"Response rule has proper title\", function () {\r",
											"//     pm.expect(jsonData.title).to.eql(title);\r",
											"// });\r",
											"\r",
											"\r",
											"for (const rule of jsonData){\r",
											"    if (rule.ruleId === \"SV-106179r1_xxxx\"){\r",
											"        pm.test(\"Response rule has proper title\", function () {\r",
											"            pm.expect(rule.title).to.eql(title);\r",
											"        });\r",
											"            if (rule.check.system === \"C-95877r1_chk\"){\r",
											"                pm.test(\"proper check content\", function () {\r",
											"                    pm.expect(rule.check.content).to.eql(\"This check content has been replaced!\");\r",
											"                });    \r",
											"            }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// for (const rule of jsonData){\r",
											"//     if (rule.ruleId === \"SV-106179r1_xxxx\"){\r",
											"//         pm.test(\"proper number of checkContentMatches\", function () {\r",
											"//             pm.expect(rule.checkContentMatches).to.have.length(2);\r",
											"//         });\r",
											"//         pm.test(\"proper number of stigs\", function () {\r",
											"//             pm.expect(rule.stigs).to.have.length(1);\r",
											"//         });        \r",
											"     \r",
											"    // let matchedRules = [];\r",
											"    // for (const match of rule.checkContentMatches){\r",
											"    //     // matchedRules.push(rule.ruleId)\r",
											"    //         if (rule.ruleId === testRuleId){\r",
											"    //             pm.test(\"proper ruleIds for check matches\", function () {\r",
											"    //                 pm.expect(match.ruleId).to.be.oneOf([\"SV-106181r1_xxxx\",testRuleId]);\r",
											"    //             });    \r",
											"    //         }\r",
											"    //     }\r",
											"//     }\r",
											"// }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=check",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"revisions",
										":revisionStr",
										"rules"
									],
									"query": [
										{
											"key": "projection",
											"value": "detail",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "ccis",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "check"
										},
										{
											"key": "projection",
											"value": "fix",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "checkContentMatches",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_OTHER",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "V2R2",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return rule data for the specified Rule in a revision of a STIG. request specific rule, expect one content match",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"stigmanadmin\") { //only continue for stigmanadmin\r",
											"\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// for (const rule of jsonData){\r",
											"//     if (rule.ruleId === testRuleId){\r",
											"//         pm.test(\"Response includes updated rule title\", function () {\r",
											"//             pm.expect(rule.title).to.eql(title);\r",
											"//         });\r",
											"//     }\r",
											"\r",
											"// }\r",
											"let testRuleId = pm.environment.get(\"testRuleId\");\r",
											"\r",
											"// pm.test(\"proper number of checkContentMatches\", function () {\r",
											"//     pm.expect(jsonData.checkContentMatches).to.have.length(2);\r",
											"// });\r",
											"// pm.test(\"proper number of stigs\", function () {\r",
											"//     pm.expect(jsonData.stigs).to.have.length(1);\r",
											"// });        \r",
											"\r",
											"// // let matchedRules = [];\r",
											"// for (const match of jsonData.checkContentMatches){\r",
											"//     // matchedRules.push(rule.ruleId)\r",
											"//         if (jsonData.ruleId === testRuleId){\r",
											"//             pm.test(\"proper ruleIds for check matches\", function () {\r",
											"//                 pm.expect(match.ruleId).to.be.oneOf([\"SV-106181r1_xxxx\",\"SV-106179r1_xxxx\"]);\r",
											"//             });    \r",
											"//         }\r",
											"//     }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules/:ruleId?projection=check",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"revisions",
										":revisionStr",
										"rules",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "detail",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "ccis",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "check"
										},
										{
											"key": "projection",
											"value": "fix",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "checkContentMatches",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}"
										},
										{
											"key": "revisionStr",
											"value": "{{testRev}}"
										},
										{
											"key": "ruleId",
											"value": "{{testRuleId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes a STIG (*** and all revisions ***) - cleanup \"other\" stig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"let elevated = \"\";\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"   elevated = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"stigmanadmin\" && elevated == \"elevated\" ) { \r",
											"    pm.test(\"Status should be is 200 for user stigmanadmin\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    // return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403 for all other users\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId?elevate=true&force=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_OTHER",
											"description": "(Required) A path parameter that indentifies a STIG"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "LVL1 cross-boundary tests",
			"item": [
				{
					"name": "LoadTestData",
					"item": [
						{
							"name": "load standard test data",
							"item": [
								{
									"name": "Import a new STIG - Win 10  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{win10Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - RHEL 7 (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{rhel7Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - VPN  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{vpnStig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data (as elevated Admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Deletes the specified revision of a STIG v1r0 - with force - could fail if not present, so no tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate=true&force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												":benchmarkId",
												"revisions",
												":revisionStr"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true"
												},
												{
													"key": "force",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "V1R0",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create and delete a new collection, and an asset in the testCollection",
							"item": [
								{
									"name": "Create a Collection in order to delete it",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"    pm.test(\"Status code is 201\", function () {\r",
													"        pm.response.to.have.status(201); \r",
													"    });\r",
													"// }\r",
													"if (pm.response.code !== 201) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let collectionToDelete = respJson.collectionId\r",
													"pm.environment.set(\"collectionToDelete\", collectionToDelete);\r",
													"\r",
													"// let requestToTest = JSON.parse(pm.request.body.raw)\r",
													"\r",
													"//Collection creator cannot see labels on collection it did not give itself a grant for\r",
													"// if (user == \"collectioncreator\") { \r",
													"//     requestToTest.labels = []\r",
													"// }\r",
													"console.log(\"created collection with id: \" + JSON.stringify(collectionToDelete));\r",
													"\r",
													"\r",
													"// created now being returned, but don't know what value it will be.\r",
													"// response validation will verify that the property exists.\r",
													"// delete respJson.created;\r",
													"\r",
													"// pm.test(\"Response matches request\", function () {\r",
													"//     pm.expect(collectionGetToPost(respJson))\r",
													"//     .to.eql(requestToTest)\r",
													"// })\r",
													"\r",
													"// function collectionGetToPost (collectionGet) {\r",
													"//     // extract the transformed and unposted properties\r",
													"//     const {collectionId, grants, labels, ...collectionPost} = collectionGet\r",
													"\r",
													"//     // add transformed properties to the derived post  \r",
													"//     collectionPost.grants = grantsPostToGet(grants)\r",
													"//     collectionPost.labels = labelsPostToGet(labels)\r",
													"\r",
													"//     // the derived post object\r",
													"//     return collectionPost\r",
													"// }\r",
													"\r",
													"// function grantsPostToGet(grantsGetArray) {\r",
													"//     const grantsPostArray = []\r",
													"//     for (const grant of grantsGetArray) {\r",
													"//         grantsPostArray.push({\r",
													"//             userId: grant.user.userId,\r",
													"//             accessLevel: grant.accessLevel\r",
													"//         })\r",
													"//     }\r",
													"//     return grantsPostArray\r",
													"// }\r",
													"\r",
													"// function labelsPostToGet(labelsGetArray) {\r",
													"//    return labelsGetArray.map( label => {\r",
													"//         const {labelId, uses, ...labelPost} = label\r",
													"//         return labelPost\r",
													"\r",
													"//     })\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TEST_delete_{{$randomNoun}}-{{$randomJobType}}\",\n    \"description\": \"Collection TEST description\",\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        },\n        \"history\": {\n            \"maxReviews\": 11\n        }\n  },\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"grants\": [\n        {\n                \"userId\": \"1\",\n                \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"85\",\n                \"accessLevel\": 1\n        }        \n    ],\n    \"labels\": [\n        {\n            \"name\": \"TEST\",\n            \"description\": \"Collection label description\",\n            \"color\": \"ffffff\"\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections?elevate=true&projection=grants&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Same tests as for GET /collection/{collectionId}\r",
													"\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"lvl3\" || user == \"globular\" || user == \"collectioncreator\" ) { \r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    // return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let deletedCollection = respJson.collectionId\r",
													"pm.environment.set(\"deletedCollection\", deletedCollection);\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested projections and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    // var regex = new RegExp(collectionMatchString);\r",
													"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
													"    //     pm.expect(jsonData.name).to.match(regex);\r",
													"    // });\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        pm.expect(jsonData).to.have.property('assets');\r",
													"\r",
													"        for (let asset of jsonData.assets){\r",
													"            // pm.expect(asset).to.have.property('name');\r",
													"            // pm.expect(asset).to.have.property('assetId');\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        pm.expect(jsonData).to.have.property('grants');\r",
													"   \r",
													"        for (let grant of jsonData.grants){\r",
													"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            // pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        pm.expect(jsonData).to.have.property('stigs');\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        // console.log(\"checking owners projection\");\r",
													"        pm.expect(jsonData).to.have.property('owners');\r",
													"        for (let owner of jsonData.owners){\r",
													"            // pm.expect(owner).to.have.all.keys(userKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData).to.have.property('statistics');\r",
													"\r",
													"        // pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// // let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(jsonData.name);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     pm.expect(jsonData.name).to.match(regex);\r",
													"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate=true&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{collectionToDelete}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create an Asset to be deleted in test collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"    pm.test(\"Status code is 201\", function () {\r",
													"        pm.response.to.have.status(201);\r",
													"    });\r",
													"// }\r",
													"if (pm.response.code !== 201) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let assetToBeDeletedInTESTCollection = respJson.assetId\r",
													"pm.environment.set(\"assetToBeDeletedInTESTCollection\", assetToBeDeletedInTESTCollection);\r",
													"\r",
													"console.log(\"created asset with id: \" + JSON.stringify(assetToBeDeletedInTESTCollection));\r",
													"\r",
													"\r",
													"// pm.test(\"Response matches request\", function () {\r",
													"//     pm.expect(assetGetToPost(respJson))\r",
													"//     .to.eql(JSON.parse(pm.request.body.raw))\r",
													"// })\r",
													"\r",
													"// function assetGetToPost(assetGet) {\r",
													"//     // extract the transformed and unposted properties\r",
													"//     const {assetId, collection, stigs, mac, fqdn, ...assetPost} = assetGet\r",
													"    \r",
													"//     // add transformed properties to the derived post  \r",
													"//     assetPost.collectionId = collection.collectionId\r",
													"//     assetPost.stigs = stigsGetToPost(stigs)\r",
													"\r",
													"//     // the derived post object\r",
													"//     return assetPost\r",
													"// }\r",
													"\r",
													"// function stigsGetToPost(stigsGetArray) {\r",
													"//     const stigsPostArray = []\r",
													"//     for (const stig of stigsGetArray) {\r",
													"//         stigsPostArray.push(stig.benchmarkId)\r",
													"//     }\r",
													"//     return stigsPostArray\r",
													"// }\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{testCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"labelIds\": [\"{{testLabel}}\"],\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "set stig-asset grants for a lvl1 user in this collection.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"{{assetToBeDeletedInTESTCollection}}\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"42\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"154\"\r\n    }        \r\n]\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"grants",
												":userId",
												"access"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												},
												{
													"key": "userId",
													"value": "{{testLvl1User}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import one or more Reviews from a JSON body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"const expectedResponse = {\r",
													"    rejected: [],\r",
													"    affected: {\r",
													"        updated: 0,\r",
													"        inserted: 1\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"Response matches request\", function () {\r",
													"    pm.expect(jsonData).to.eql(expectedResponse);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												},
												{
													"key": "assetId",
													"value": "{{assetToBeDeletedInTESTCollection}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an Asset in test collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{assetToBeDeletedInTESTCollection}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Return the requester's user information - check user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if object contains all required keys\", function () {\r",
									"    // pm.expect(jsonData).to.have.all.keys(userKeys);\r",
									"});\r",
									"\r",
									"for (let grant of jsonData.collectionGrants){\r",
									"    pm.expect(grant).to.exist;\r",
									"    pm.expect(grant.collection).to.exist;\r",
									"}\r",
									"\r",
									"pm.test(\"Check if object contains all required privileges keys\", function () {\r",
									"    pm.expect(jsonData.privileges).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
									"    pm.expect(jsonData.statistics).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if object contains info for expected user\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(user);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the Review for an Asset and Rule - expect fail for lvl1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
									"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (user == \"lvl1\" ) {\r",
									"    pm.test(\"Status should be 204 for user lvl1\", function () {\r",
									"        pm.response.to.have.status(204);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"}\r",
									"\r",
									"pm.test(\"Check for an array of checklist items.\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    // console.log(\"jsonData:\" + jsonData);\r",
									"\r",
									"});\r",
									"\r",
									"let checklistLength = pm.environment.get(\"checklistLength\");\r",
									"\r",
									"pm.test(\"Check for an array of correct length.\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
									"    // console.log(\"jsonData:\" + jsonData);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=history&projection=stigs&projection=rule&projection=metadata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "history"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "projection",
									"value": "rule"
								},
								{
									"key": "projection",
									"value": "metadata"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the STIGs mapped in the specified Collection - lvl1 - stigStats check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
									"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
									"\r",
									"pm.test(\"Response has requested properties and values\", function () {\r",
									"    for (let stig of jsonData){\r",
									"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
									"        pm.expect(stig.ruleCount).to.equal(81);\r",
									"        pm.expect(stig.assetCount).to.equal(2);\r",
									"        pm.expect(stig.revisionStr).to.equal(\"V1R1\");\r",
									"\r",
									"    };\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"stigs"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return an Asset (lvl1 user requests w/ 1 of 2 stig grants, check proper AdminStats)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//normal test start block:\r",
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response has requested properties and values\", function () {\r",
									"    // for (let item of jsonData){\r",
									"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
									"    // var regex = new RegExp(collectionMatchString);\r",
									"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
									"    //     pm.expect(jsonData.name).to.match(regex);\r",
									"    // });\r",
									"\r",
									"    // pm.expect(jsonData.collection).to.have.all.keys(collectionKeys);\r",
									"\r",
									"\r",
									"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
									"        pm.expect(jsonData.stigGrants).to.exist;\r",
									"\r",
									"        for (let grant of jsonData.stigGrants){\r",
									"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
									"            for (let user of grant.users){\r",
									"                // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
									"\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
									"        pm.expect(jsonData.stigs).to.exist;\r",
									"\r",
									"        for (let stig of jsonData.stigs){\r",
									"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
									"            pm.expect(jsonData.statusStats).to.exist;\r",
									"\r",
									"    }\r",
									"\r",
									"    if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
									"            //check for proper adminStat counts for lvl1 user\r",
									"            pm.expect(jsonData.statusStats.ruleCount).to.equal(81);\r",
									"            pm.expect(jsonData.statusStats.submittedCount).to.equal(5);\r",
									"    }\r",
									"    // };\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assets",
								":assetId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "statusStats",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigGrants",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return an Asset (lvl1 user requests w/ ZERO of 2 stig grants, expect fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//normal test start block:\r",
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for user lvl1\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assets",
								":assetId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "statusStats",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigGrants",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the Checklist for the supplied Collection and STIG-revStr - lvl1 no access, empty array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
									"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (user == \"lvl1\" ) {\r",
									"    pm.test(\"Status should be 200 with empty array for user lvl1\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"}\r",
									"\r",
									"pm.test(\"Check for an array of checklist items.\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    // console.log(\"jsonData:\" + jsonData);\r",
									"\r",
									"});\r",
									"\r",
									"let checklistLength = pm.environment.get(\"checklistLength\");\r",
									"\r",
									"pm.test(\"Check for an array of correct length.\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').of.length(0);\r",
									"    // console.log(\"jsonData:\" + jsonData);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"checklists",
								":benchmarkId",
								":revisionStr"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "benchmarkId",
									"value": "Windows_10_STIG_TEST",
									"description": "(Required) A path parameter that indentifies a STIG"
								},
								{
									"key": "revisionStr",
									"value": "V2R1",
									"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - ADMIN - lvl1 asset access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
									"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"ADMIN POSTED THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    },\n    {\n    \"ruleId\": \"{{testRuleId-lvl1NoAccess}}\",\n    \"result\": \"pass\",\n    \"detail\": \"ADMIN POSTED THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - ADMIN - lvl1 no asset access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
									"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"ADMIN POSTED THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    },\n    {\n    \"ruleId\": \"{{testRuleId-lvl1NoAccess}}\",\n    \"result\": \"pass\",\n    \"detail\": \"ADMIN POSTED THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Merge provided properties with a Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
									"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 1\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "grants",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "owners"
								},
								{
									"key": "projection",
									"value": "statistics"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set all properties of a Collection - expect fail for lvl1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
									"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n  \"description\": null,\n  \"settings\": {\n    \"fields\": {\n        \"detail\": {\n            \"enabled\": \"always\",\n            \"required\": \"findings\"\n        },\n        \"comment\": {\n            \"enabled\": \"always\",\n            \"required\": \"findings\"\n        }\n    },\n    \"status\": {\n        \"canAccept\": true,\n        \"minAcceptGrant\": 2,\n        \"resetCriteria\": \"result\"\n    }\n  },\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								},
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "grants",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "owners"
								},
								{
									"key": "projection",
									"value": "statistics"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{scrapCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set all properties of a Review - lvl1 should work",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
									"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						},
						"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
					},
					"response": []
				},
				{
					"name": "Merge provided properties with a Review - lvl1 test - noAssetAccess - w admin request check Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 404 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset-lvl1NoAccess\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.detail).to.not.eql(\"LVL1 PATCHED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"LVL1 PATCHED THIS\",\n    \"comment\": \"sure\",\n    \"status\": \"submitted\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						},
						"description": "Update the given properties of a Review, if it exists"
					},
					"response": []
				},
				{
					"name": "Merge provided properties with a Review - lvl1 test - no STIG-Asset Access - w admin request check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 404 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId-lvl1NoAccess\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.detail).to.not.eql(\"LVL1 PATCHED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"LVL1 PATCHED THIS\",\n    \"comment\": \"sure\",\n    \"status\": \"submitted\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						},
						"description": "Update the given properties of a Review, if it exists"
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - no Asset Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"lvl1\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be 200 for this test\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object, with component arrays of proper length\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData.affected.updated).to.eql(0);\r",
									"    pm.expect(jsonData.affected.inserted).to.eql(0);\r",
									"    pm.expect(jsonData.rejected).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset-lvl1NoAccess\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.detail).to.not.eql(\"LVL1 POSTED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"LVL1 POSTED THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - no Asset Access - multiple posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"lvl1\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 200 for lvl1, with all reviews rejected\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object, with component arrays of proper length\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData.permitted).to.have.lengthOf(0);\r",
									"    pm.expect(jsonData.affected.updated).to.eql(0);\r",
									"    pm.expect(jsonData.affected.inserted).to.eql(0);\r",
									"    pm.expect(jsonData.rejected).to.have.lengthOf(2);\r",
									"\r",
									"});\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset-lvl1NoAccess\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId-lvl1NoAccess\");\r",
									"// let ruleIdAllowed = pm.environment.get(\"testRuleId\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review for Rule without lvl1 access\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.detail).to.not.eql(\"LVL1 POSTED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"LVL1 POSTED THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    },\n    {\n    \"ruleId\": \"{{testRuleId-lvl1NoAccess}}\",\n    \"result\": \"pass\",\n    \"detail\": \"LVL1 POSTED THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - no STIG-Asset Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"lvl1\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be 200 for lvl1, with all reviews rejected \", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object, with component arrays of proper length\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData.affected.updated).to.eql(0);\r",
									"    pm.expect(jsonData.affected.inserted).to.eql(0);\r",
									"    pm.expect(jsonData.rejected).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId-lvl1NoAccess\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.detail).to.not.eql(\"LVL1 POSTED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId-lvl1NoAccess}}\",\n    \"result\": \"pass\",\n    \"detail\": \"LVL1 POSTED THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - no STIG-Asset Access - multiple reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"lvl1\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be 200 for lvl1, with all reviews rejected \", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object, with component arrays of proper length\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData.affected.updated).to.eql(1);\r",
									"    pm.expect(jsonData.affected.inserted).to.eql(0);\r",
									"    pm.expect(jsonData.rejected).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId-lvl1NoAccess\");\r",
									"// let ruleIdAllowed = pm.environment.get(\"testRuleId\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting review that should not have changed', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.detail).to.not.eql(\"LVL1 POSTED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"LVL1 POSTED THIS(legally!)\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    },\n    {\n    \"ruleId\": \"{{testRuleId-lvl1NoAccess}}\",\n    \"result\": \"pass\",\n    \"detail\": \"LVL1 POSTED THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set all properties of a Review - lvl1 test - no Asset Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset-lvl1NoAccess\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.detail).to.not.eql(\"LVL1 PUT THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"LVL1 PUT THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						},
						"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
					},
					"response": []
				},
				{
					"name": "Set all properties of a Review - lvl1 test - no STIG-Asset Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId-lvl1NoAccess\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.detail).to.not.eql(\"LVL1 PUT THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"LVL1 PUT THIS\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						},
						"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
					},
					"response": []
				},
				{
					"name": "Delete a Review - lvl1 test - noAssetAccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"//GITHUB ISSUE 94, indicating deleting of reviews not yet implemented\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Review - lvl1 test - no STIG-Asset Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"//GITHUB ISSUE 94, indicating deleting of reviews not yet implemented\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token.lvl1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"    user = \"lvl1\";",
							"    elevate = false;",
							"    pm.environment.set(\"user\", user);",
							"    pm.environment.set(\"elevated\", elevate);",
							"    let token = pm.environment.get(\"token.\" + user)",
							"    pm.environment.set(\"token\", token);",
							"    console.log(`No iteration data. Setting: User: ${user} elevated: ${elevate} Bearer: ${token}`);",
							"",
							"    return;  // Just use whatever settings are currently left in the env.",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Additional sundry tests",
			"item": [
				{
					"name": "LoadTestData",
					"item": [
						{
							"name": "load standard test data",
							"item": [
								{
									"name": "Import a new STIG - Win 10  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{win10Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - RHEL 7 (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{rhel7Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - VPN  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{vpnStig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data (as elevated Admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Deletes the specified revision of a STIG v1r0 - with force - could fail if not present, so no tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate=true&force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												":benchmarkId",
												"revisions",
												":revisionStr"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true"
												},
												{
													"key": "force",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "V1R0",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create and delete a new collection, and an asset in the testCollection",
							"item": [
								{
									"name": "Create a Collection in order to delete it",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"    pm.test(\"Status code is 201\", function () {\r",
													"        pm.response.to.have.status(201); \r",
													"    });\r",
													"// }\r",
													"if (pm.response.code !== 201) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let collectionToDelete = respJson.collectionId\r",
													"pm.environment.set(\"collectionToDelete\", collectionToDelete);\r",
													"\r",
													"// let requestToTest = JSON.parse(pm.request.body.raw)\r",
													"\r",
													"//Collection creator cannot see labels on collection it did not give itself a grant for\r",
													"// if (user == \"collectioncreator\") { \r",
													"//     requestToTest.labels = []\r",
													"// }\r",
													"console.log(\"created collection with id: \" + JSON.stringify(collectionToDelete));\r",
													"\r",
													"\r",
													"// created now being returned, but don't know what value it will be.\r",
													"// response validation will verify that the property exists.\r",
													"// delete respJson.created;\r",
													"\r",
													"// pm.test(\"Response matches request\", function () {\r",
													"//     pm.expect(collectionGetToPost(respJson))\r",
													"//     .to.eql(requestToTest)\r",
													"// })\r",
													"\r",
													"// function collectionGetToPost (collectionGet) {\r",
													"//     // extract the transformed and unposted properties\r",
													"//     const {collectionId, grants, labels, ...collectionPost} = collectionGet\r",
													"\r",
													"//     // add transformed properties to the derived post  \r",
													"//     collectionPost.grants = grantsPostToGet(grants)\r",
													"//     collectionPost.labels = labelsPostToGet(labels)\r",
													"\r",
													"//     // the derived post object\r",
													"//     return collectionPost\r",
													"// }\r",
													"\r",
													"// function grantsPostToGet(grantsGetArray) {\r",
													"//     const grantsPostArray = []\r",
													"//     for (const grant of grantsGetArray) {\r",
													"//         grantsPostArray.push({\r",
													"//             userId: grant.user.userId,\r",
													"//             accessLevel: grant.accessLevel\r",
													"//         })\r",
													"//     }\r",
													"//     return grantsPostArray\r",
													"// }\r",
													"\r",
													"// function labelsPostToGet(labelsGetArray) {\r",
													"//    return labelsGetArray.map( label => {\r",
													"//         const {labelId, uses, ...labelPost} = label\r",
													"//         return labelPost\r",
													"\r",
													"//     })\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TEST_delete_{{$randomNoun}}-{{$randomJobType}}\",\n    \"description\": \"Collection TEST description\",\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        },\n        \"history\": {\n            \"maxReviews\": 11\n        }\n  },\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"grants\": [\n        {\n                \"userId\": \"1\",\n                \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"85\",\n                \"accessLevel\": 1\n        }        \n    ],\n    \"labels\": [\n        {\n            \"name\": \"TEST\",\n            \"description\": \"Collection label description\",\n            \"color\": \"ffffff\"\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections?elevate=true&projection=grants&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Same tests as for GET /collection/{collectionId}\r",
													"\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"lvl3\" || user == \"globular\" || user == \"collectioncreator\" ) { \r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    // return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let deletedCollection = respJson.collectionId\r",
													"pm.environment.set(\"deletedCollection\", deletedCollection);\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested projections and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    // var regex = new RegExp(collectionMatchString);\r",
													"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
													"    //     pm.expect(jsonData.name).to.match(regex);\r",
													"    // });\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        pm.expect(jsonData).to.have.property('assets');\r",
													"\r",
													"        for (let asset of jsonData.assets){\r",
													"            // pm.expect(asset).to.have.property('name');\r",
													"            // pm.expect(asset).to.have.property('assetId');\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        pm.expect(jsonData).to.have.property('grants');\r",
													"   \r",
													"        for (let grant of jsonData.grants){\r",
													"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            // pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        pm.expect(jsonData).to.have.property('stigs');\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        // console.log(\"checking owners projection\");\r",
													"        pm.expect(jsonData).to.have.property('owners');\r",
													"        for (let owner of jsonData.owners){\r",
													"            // pm.expect(owner).to.have.all.keys(userKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData).to.have.property('statistics');\r",
													"\r",
													"        // pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// // let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(jsonData.name);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     pm.expect(jsonData.name).to.match(regex);\r",
													"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate=true&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{collectionToDelete}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create an Asset to be deleted in test collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"    pm.test(\"Status code is 201\", function () {\r",
													"        pm.response.to.have.status(201);\r",
													"    });\r",
													"// }\r",
													"if (pm.response.code !== 201) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let respJson = pm.response.json();\r",
													"let assetToBeDeletedInTESTCollection = respJson.assetId\r",
													"pm.environment.set(\"assetToBeDeletedInTESTCollection\", assetToBeDeletedInTESTCollection);\r",
													"\r",
													"console.log(\"created asset with id: \" + JSON.stringify(assetToBeDeletedInTESTCollection));\r",
													"\r",
													"\r",
													"// pm.test(\"Response matches request\", function () {\r",
													"//     pm.expect(assetGetToPost(respJson))\r",
													"//     .to.eql(JSON.parse(pm.request.body.raw))\r",
													"// })\r",
													"\r",
													"// function assetGetToPost(assetGet) {\r",
													"//     // extract the transformed and unposted properties\r",
													"//     const {assetId, collection, stigs, mac, fqdn, ...assetPost} = assetGet\r",
													"    \r",
													"//     // add transformed properties to the derived post  \r",
													"//     assetPost.collectionId = collection.collectionId\r",
													"//     assetPost.stigs = stigsGetToPost(stigs)\r",
													"\r",
													"//     // the derived post object\r",
													"//     return assetPost\r",
													"// }\r",
													"\r",
													"// function stigsGetToPost(stigsGetArray) {\r",
													"//     const stigsPostArray = []\r",
													"//     for (const stig of stigsGetArray) {\r",
													"//         stigsPostArray.push(stig.benchmarkId)\r",
													"//     }\r",
													"//     return stigsPostArray\r",
													"// }\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{testCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"labelIds\": [\"{{testLabel}}\"],\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "set stig-asset grants for a lvl1 user in this collection.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"{{assetToBeDeletedInTESTCollection}}\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"42\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"154\"\r\n    }        \r\n]\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"grants",
												":userId",
												"access"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												},
												{
													"key": "userId",
													"value": "{{testLvl1User}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import one or more Reviews from a JSON body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"const expectedResponse = {\r",
													"    rejected: [],\r",
													"    affected: {\r",
													"        updated: 0,\r",
													"        inserted: 1\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"Response matches request\", function () {\r",
													"    pm.expect(jsonData).to.eql(expectedResponse);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												},
												{
													"key": "assetId",
													"value": "{{assetToBeDeletedInTESTCollection}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an Asset in test collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{assetToBeDeletedInTESTCollection}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Check that \"informational\" results are represented as NotReviewed with Finding Details data in .ckls",
					"item": [
						{
							"name": "Set all properties of a Review - informational + result comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"informational\",\n    \"detail\": \"test\\nvisible to lvl1, THIS REVIEW IS INFORMATIONAL (but comes back as Not_Reviewed in a ckl)\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"saved\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "21",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "42",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106179r1_rule",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the Checklist for the supplied Asset and STIG XML (.ckl) - check that informational + detail exported as not_reviewed + finding_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"const xml2js = require('xml2js');\r",
											"\r",
											"\r",
											"if (user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else if (user == \"collectioncreator\" ) {\r",
											"    pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let cklData;\r",
											"\r",
											" xml2js.parseString(pm.response.text(), function (err, result) {\r",
											"        cklData = result;\r",
											"        // console.log(result);\r",
											"    });\r",
											"\r",
											"\r",
											"let cklHostName = cklData.CHECKLIST.ASSET[0].HOST_NAME[0]\r",
											"let cklIStigs = cklData.CHECKLIST.STIGS[0].iSTIG\r",
											"// let cklSiData = cklData.CHECKLIST.STIGS[0].iSTIG[0].STIG_INFO[0].SI_DATA\r",
											"// console.log(cklSiData);\r",
											"\r",
											"\r",
											"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"\r",
											"pm.test(\"Response has allowed asset\", function () {\r",
											"\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    pm.expect(cklHostName).to.match(regex);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"let currentStigId;\r",
											"\r",
											"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length. Then check for Informational review masquerading as Not_Reviewed in the ckl.\", function () {\r",
											"\r",
											"    for (let iStig of cklIStigs){\r",
											"\r",
											"        for (let cklSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
											"            // console.log (cklSiDatum.SID_NAME[0])\r",
											"            if (cklSiDatum.SID_NAME[0] == 'stigid'){\r",
											"                console.log (cklSiDatum.SID_NAME[0])\r",
											"                console.log (cklSiDatum.SID_DATA[0])\r",
											"                currentStigId = cklSiDatum.SID_DATA[0]\r",
											"                pm.expect(currentStigId).to.be.oneOf(validStigs);\r",
											"\r",
											"            }\r",
											"        }\r",
											"\r",
											"        let cklVulns = iStig.VULN;\r",
											"\r",
											"        pm.expect(cklVulns).to.be.an('array');\r",
											"\r",
											"        // Right now, only VPN_SRG_TEST has a checklist length\r",
											"        if (currentStigId == 'VPN_SRG_TEST') {\r",
											"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
											"            pm.expect(cklVulns).to.be.an('array').of.length(checklistLength);\r",
											"\r",
											"            for (let thisVuln of cklVulns){\r",
											"                for (let stigData of thisVuln.STIG_DATA){\r",
											"                    // console.log(stigData.VULN_ATTRIBUTE)\r",
											"                    // if (stigData.VULN_ATTRIBUTE)\r",
											"                    if (stigData.ATTRIBUTE_DATA[0] == 'SV-106179r1_rule'){\r",
											"                        console.log(stigData.VULN_ATTRIBUTE)\r",
											"                        console.log(thisVuln.FINDING_DETAILS[0])\r",
											"                        // pm.expect(thisVuln.FINDING_DETAILS[0]).to.be.an('array').of.length(checklistLength);\r",
											"                        var commentRegex = new RegExp(\"INFORMATIONAL\");\r",
											"                        var statusRegex = new RegExp(\"Not_Reviewed\");\r",
											"                        pm.expect(thisVuln.FINDING_DETAILS[0]).to.match(commentRegex);\r",
											"                        pm.expect(thisVuln.STATUS[0]).to.match(statusRegex);\r",
											"                    }\r",
											"\r",
											"                }\r",
											"            }\r",
											"\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=ckl",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"checklists",
										":benchmarkId",
										":revisionStr"
									],
									"query": [
										{
											"key": "format",
											"value": "ckl",
											"description": "The format of the response. Default if missing is 'json'"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "42",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_TEST",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "V1R1",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set all properties of a Review - invalid result enum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"    pm.test(\"Status should be is 400 for all users\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"INVALID\",\n    \"detail\": \"test\\nvisible to lvl1, test of invalid result enum\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"saved\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "21",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "42",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106179r1_rule",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Collection settings",
					"item": [
						{
							"name": "Invalid fields.detail.required value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 \", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$timestamp}}\",\n    \"description\": \"Collection TEST description\",\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"findings\",\n                \"required\": \"always\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"always\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 3,\n            \"resetCriteria\": \"result\"\n        }\n  },\n    \"metadata\": {},\n    \"grants\": [\n        {\n                \"userId\": \"1\",\n                \"accessLevel\": 4\n        }\n    ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 201 \", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$timestamp}}\",\n    \"description\": \"Collection TEST description\",\n    \"metadata\": {},\n    \"grants\": [\n        {\n                \"userId\": \"1\",\n                \"accessLevel\": 4\n        }\n    ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token.stigmanadmin}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Verify manager grant restrictions",
					"item": [
						{
							"name": "Merge provided properties with a Collection - make admin a manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response has proper projections\", function () {\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
											"        pm.expect(jsonData).to.have.property('statistics');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        pm.expect(jsonData).to.have.property('stigs');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
											"        pm.expect(jsonData).to.have.property('assets');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
											"        pm.expect(jsonData).to.have.property('owners');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
											"        pm.expect(jsonData).to.have.property('grants');\r",
											"    }            \r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=grants&projection=owners",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Merge provided properties with a Collection - manager attempts to change owner grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"stigmanadmin\") { //previous request made stigmanadmin a manager, they can no longer change owner grants.\r",
											"    pm.test(\"Status should be is 403 for stigmanAdmin\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 3\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=grants&projection=owners",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Merge provided properties with a Collection - manager can set other manager grants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"stigmanadmin\") { //stigmanadmin CAN create/modify manager grants\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=grants&projection=owners",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set all properties of a Collection Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"stigmanadmin\") { //previous request made stigmanadmin a manager, they can no longer change owner grants.\r",
											"    pm.test(\"Status should be is 403 for stigmanAdmin\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n  \"description\": null,\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        }\n  },\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 3\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=grants&projection=owners",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Regression Tests",
					"item": [
						{
							"name": "gh-756 - stig-assignments issue",
							"item": [
								{
									"name": "assign a benchmark used in test Collection in scrap Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"    pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"{{scrapAsset}}\"\n    ]\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?projection=restrictedUserAccess",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId",
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "restrictedUserAccess",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify that test collection still has expected benchmark assignments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"});\r",
													"\r",
													"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
													"\r",
													"\r",
													"// let stigKeys = [\r",
													"//     \"title\",\r",
													"//     \"ruleCount\",\r",
													"//     \"benchmarkId\",\r",
													"//     \"lastRevisionDate\",\r",
													"//     \"lastRevisionStr\",\r",
													"//     \"assetCount\",\r",
													"//     \"acceptedCount\",\r",
													"//     \"rejectedCount\",\r",
													"//     \"submittedCount\",\r",
													"//     \"savedCount\",\r",
													"//     \"minTs\",\r",
													"//     \"maxTs\"\r",
													"// ]\r",
													"\r",
													"// let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let returnedStigs = [];\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    for (let stig of jsonData){\r",
													"        // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        returnedStigs.push(stig.benchmarkId)\r",
													"        console.log(stig.benchmarkId)\r",
													"\r",
													"    };\r",
													"    pm.expect(returnedStigs).to.include(testBenchmark);\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "gh-761 - statusStats",
							"item": [
								{
									"name": "Import and overwrite application data (as elevated Admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "set stig-asset grant to create conditions leading to issue gh-761",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"    pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"{{testAsset}}\"\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"grants",
												":userId",
												"access"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}"
												},
												{
													"key": "userId",
													"value": "{{scrapLvl1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Assets accessible to the requester (with STIG grants projection) -statusStats",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"lvl2\" || user == \"globular\") {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, Lvl1, or bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an array\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"});\r",
													"\r",
													"let returnedAssetIds=[];\r",
													"let testAsset = pm.environment.get(\"testAsset\");\r",
													"\r",
													"\r",
													"pm.test(\"assets have expected properties and values\", function () {\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    for (let asset of jsonData){\r",
													"\r",
													"        // pm.expect(asset).to.have.all.keys(assetKeys);\r",
													"        pm.expect(asset.name).to.match(regex);\r",
													"        returnedAssetIds.push(asset.assetId);\r",
													"        // pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
													"\r",
													"\r",
													"        if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
													"            pm.expect(asset.statusStats).to.exist;\r",
													"            if (asset.assetId == testAsset) {\r",
													"                console.log (\"testing testAsset\")\r",
													"                pm.expect(asset.statusStats.ruleCount).to.eql(368);\r",
													"                pm.expect(asset.statusStats.stigCount).to.eql(2);\r",
													"\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"            for (let stig of asset.stigs){\r",
													"                // pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            }\r",
													"        }\r",
													"\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        for (let grant of asset.stigGrants){\r",
													"            // pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
													"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"            for (let user of grant.users){\r",
													"                // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        for (let stig of asset.stigs){\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"        // if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        //     for (let grant of asset.stigGrants){\r",
													"        //         pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
													"        //         for (let user of grant.users){\r",
													"        //             pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"        //         }\r",
													"        //     }\r",
													"        // }\r",
													"\r",
													"    };\r",
													"\r",
													"});\r",
													"\r",
													"// let Asset_NoStigs = pm.environment.get(\"testAsset-NoStigs\");\r",
													"// console.log(returnedAssetIds)\r",
													"// console.log(Asset_NoStigs)\r",
													"\r",
													"// if (user != \"lvl1\") {\r",
													"//     pm.test(\"check for asset with no assigned stig (edge case)\", function () {\r",
													"//         pm.expect(returnedAssetIds).to.include(Asset_NoStigs);\r",
													"\r",
													"//     });\r",
													"// }\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&projection=statusStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) Selects Assets mapped to a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "Selects Assets mapped to a STIG",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statusStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Review Key Change",
					"item": [
						{
							"name": "Import and overwrite application data (as elevated Admin) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a new STIG - with new RuleID matching old content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{testStigFile-reviewKeyChange}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the Review for an Asset and Rule - rule matches on stigId/checkContent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let testRuleId = pm.environment.get(\"testRuleId\");\r",
											"\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"    // if (jsonData.stigs){\r",
											"        pm.expect(jsonData.stigs).to.not.be.null;\r",
											"    // }\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
											"    pm.expect(jsonData.history).to.exist;\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
											"    pm.expect(jsonData?.rule).to.exist;\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
											"    pm.expect(jsonData.metadata).to.exist;\r",
											"}\r",
											"pm.test(\"Check if object contains all provided keys\", function () {\r",
											"    // pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if object contains proper ruleId\", function () {\r",
											"    pm.expect(jsonData?.ruleId).to.eql(testRuleId);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if object contains proper ruleIds\", function () {\r",
											"    pm.expect(jsonData?.ruleIds).to.include(\"SV-106179r1_yyyy\");\r",
											"    pm.expect(jsonData?.ruleIds).to.include(testRuleId);\r",
											"});\r",
											"\r",
											"pm.test(\"Check review comment for regex match string\", function () {\r",
											"    let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
											"    var regex = new RegExp(reviewMatchString);\r",
											"    pm.expect(jsonData.detail).to.match(regex);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=history&projection=stigs&projection=rule&projection=metadata",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "history"
										},
										{
											"key": "projection",
											"value": "stigs"
										},
										{
											"key": "projection",
											"value": "rule"
										},
										{
											"key": "projection",
											"value": "metadata"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106179r1_yyyy",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Review: stigs and rule projections Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"pm.test(\"Status should be is 403 for all\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"return;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106179r1_yyyy",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "Set all properties of an Asset - assign new STIG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Collection_X_lvl1_asset-1\",\n    \"collectionId\": \"{{testCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"VPN_SRG_OTHER\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Review: stigs and rule projections- put review to alternate ruleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"const respData = pm.response.json()\r",
											"const reqData = JSON.parse(pm.request.body.raw)\r",
											"const expectedReview = {\r",
											"  assetId: \"42\",\r",
											"  assetName: \"Collection_X_lvl1_asset-1\",\r",
											"  assetLabelIds: [\r",
											"        \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
											"        \"5130dc84-9a68-11ec-b1bc-0242ac110002\"      \r",
											"  ],\r",
											"  ruleId: \"SV-106179r1_yyyy\",\r",
											"  ruleIds: [\r",
											"    \"SV-106179r1_rule\",\r",
											"    \"SV-106179r1_yyyy\"\r",
											"    ],\r",
											"  result: reqData.result,\r",
											"  resultEngine: null,\r",
											"  detail: reqData.detail,\r",
											"  autoResult: reqData.autoResult,\r",
											"  comment: reqData.comment,\r",
											"  userId: userId,\r",
											"  username: user,\r",
											"  ts: respData.ts,\r",
											"  touchTs: respData.touchTs,\r",
											"  status: {\r",
											"      ts: respData.status.ts,\r",
											"      text: null,\r",
											"      user: {\r",
											"          userId: userId,\r",
											"          username: user\r",
											"      },\r",
											"      label: reqData.status\r",
											"  },\r",
											"  stigs: [        \r",
											"      {\r",
											"            isDefault: true,\r",
											"            ruleCount: 2,\r",
											"            benchmarkId: \"VPN_SRG_OTHER\",\r",
											"            revisionStr: \"V2R3\",\r",
											"            benchmarkDate: \"2021-07-19\",\r",
											"            revisionPinned: false\r",
											"        }\r",
											"    ],\r",
											"  rule: {\r",
											"    title: \"This rule title has been replaced.\",\r",
											"    ruleId: \"SV-106179r1_yyyy\",\r",
											"    version: \"SRG-NET-000019-VPN-000040\",\r",
											"    severity: \"medium\"\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response matches expected response\", function () {\r",
											"    try {\r",
											"        pm.expect(respData).to.eql(expectedReview)\r",
											"    }\r",
											"    catch (e) {\r",
											"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"        throw(e)\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106179r1_yyyy",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "Return the Review for an Asset and Rule - rule matches on stigId/checkContent Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let testRuleId = pm.environment.get(\"testRuleId\");\r",
											"\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"    pm.expect(jsonData?.stigs).to.exist;\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
											"    pm.expect(jsonData.history).to.exist;\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
											"    pm.expect(jsonData?.rule).to.exist;\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
											"    pm.expect(jsonData.metadata).to.exist;\r",
											"}\r",
											"pm.test(\"Check if object contains all provided keys\", function () {\r",
											"    // pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if object contains proper ruleId\", function () {\r",
											"    pm.expect(jsonData?.ruleId).to.eql(\"SV-106179r1_yyyy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if object contains proper ruleIds\", function () {\r",
											"    pm.expect(jsonData?.ruleIds).to.include(\"SV-106179r1_yyyy\");\r",
											"    pm.expect(jsonData?.ruleIds).to.include(testRuleId);\r",
											"});\r",
											"\r",
											"pm.test(\"Check review comment for regex match string\", function () {\r",
											"    let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
											"    var regex = new RegExp(reviewMatchString);\r",
											"    pm.expect(jsonData.detail).to.match(regex);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=history&projection=stigs&projection=rule&projection=metadata",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "history"
										},
										{
											"key": "projection",
											"value": "stigs"
										},
										{
											"key": "projection",
											"value": "rule"
										},
										{
											"key": "projection",
											"value": "metadata"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106179r1_yyyy",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes a STIG - cleanup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"stigmanadmin\" || user == \"elevated\" ) { \r",
											"    pm.test(\"Status should be is 200 for user stigmanadmin\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    // return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403 for all other users\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId?elevate=true&force=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_OTHER",
											"description": "(Required) A path parameter that indentifies a STIG"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "transfer metrics recalculation",
					"item": [
						{
							"name": "Import a new STIG - VPN R1V0 Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"// if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 403\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{testStigFile}}",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "form-data-files/U_VPN_SRG_V1R0_Manual-xccdf.xml"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set the Assets mapped to a STIG - default rev only - scrap collection for transfer test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"// let jsonData = pm.response.json();\r",
											"\r",
											"const respData = pm.response.json()\r",
											"const reqData = JSON.parse(pm.request.body.raw)\r",
											"const expectedResponse = {\r",
											"  benchmarkId: pm.environment.get(\"testBenchmark\"),\r",
											"  title: \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
											"  revisionStr: \"V1R0\",\r",
											"  benchmarkDate: \"2010-07-19\",\r",
											"  revisionPinned: true,\r",
											"  ruleCount: 81,\r",
											"  assetCount: 3,\r",
											"\r",
											"}    \r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(respData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches expected response\", function () {\r",
											"    try {\r",
											"        pm.expect(respData).to.eql(expectedResponse)\r",
											"    }\r",
											"    catch (e) {\r",
											"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"        throw(e)\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"defaultRevisionStr\": \"V1R0\"\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"stigs",
										":benchmarkId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "restrictedUserAccess",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set all properties of an Asset - Change Collection to scrap collection - then check for recalculated metrics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"let destinationCollectionId = pm.environment.get(\"scrapCollection\");\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON indicates proper collection\", function () {\r",
											"    // pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData.collection.collectionId).to.equal(destinationCollectionId);\r",
											"\r",
											"});\r",
											"pm.test(\"Response JSON indicates stigGrants were cleared\", function () {\r",
											"    for (const stigGrant of jsonData.stigGrants) {\r",
											"        pm.expect(stigGrant.users).to.have.lengthOf(0);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Collection_X_lvl1_asset-1\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify metrics were recalculated relative to new pinned rev after transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else if (user == \"lvl1\" || user == \"lvl2\" ) {\r",
											"    pm.test(\"Status should be is 200 for user lvl1 and lvl2, but can't change pins so can't affect metrics\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
											"let testLabel = pm.environment.get(\"testLabel\");\r",
											"let testLabelName = pm.environment.get(\"testLabelName\");\r",
											"\r",
											"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
											"\r",
											"\r",
											"\r",
											"// Checking that response fulfills parameter requests\r",
											"for (let item of jsonData){\r",
											"    console.log( \"testing: \" + item.name) \r",
											"\r",
											"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    // pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
											"    //     pm.expect(item.name).to.match(regex);\r",
											"    // });\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"        pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
											"            pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
											"        })\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
											"        pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
											"            pm.expect(item.assetId).to.eql(testAsset);\r",
											"        })\r",
											"    }   \r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
											"        pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
											"            let responseLabels = [];\r",
											"            for (let label of item.labels) {\r",
											"                responseLabels.push(label.labelId)\r",
											"            }\r",
											"            pm.expect(responseLabels).to.include(testLabel);\r",
											"        })\r",
											"    }           \r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
											"        pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
											"            let responseLabels = [];\r",
											"            for (let label of item.labels) {\r",
											"                responseLabels.push(label.name)\r",
											"            }\r",
											"            pm.expect(responseLabels).to.include(testLabelName);\r",
											"        })\r",
											"    }              \r",
											"\r",
											"\r",
											"\r",
											"//Checking that metric summaries are correct\r",
											"    let metricsReferenceCommon = {\r",
											"        assessed: 6,\r",
											"        assessments: testChecklistLength,\r",
											"        maxTs: \"2022-02-03T00:07:05Z\",\r",
											"        minTs: \"2020-08-11T22:27:26Z\",\r",
											"        results: {\r",
											"            fail: {\r",
											"                total: 3,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            pass: {\r",
											"                total: 1,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            error: {\r",
											"                total: 0,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            fixed: {\r",
											"                total: 0,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            unknown: {\r",
											"                total: 0,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            notchecked: {\r",
											"                total: 0,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            notselected: {\r",
											"                total: 0,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            informational: {\r",
											"                total: 0,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            notapplicable: {\r",
											"                total: 1,\r",
											"                resultEngine: 0\r",
											"            }\r",
											"        },\r",
											"        findings: {\r",
											"            low: 1,\r",
											"            medium: 2,\r",
											"            high: 0\r",
											"        },    \r",
											"        statuses: {\r",
											"            saved: {\r",
											"                total: 1,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            accepted: {\r",
											"                total: 0,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            rejected: {\r",
											"                total: 0,\r",
											"                resultEngine: 0\r",
											"            },\r",
											"            submitted: {\r",
											"                total: 4,\r",
											"                resultEngine: 0\r",
											"            }\r",
											"        }\t \r",
											"    }\r",
											"\r",
											"    metricsReferenceCommon.results.unassessed = {\r",
											"        total:  metricsReferenceCommon.results.informational.total + \r",
											"                metricsReferenceCommon.results.notselected.total + \r",
											"                metricsReferenceCommon.results.notchecked.total + \r",
											"                metricsReferenceCommon.results.error.total + \r",
											"                metricsReferenceCommon.results.fixed.total\r",
											"    }\r",
											"\r",
											"    \r",
											"    if (pm.request.url.getPath().match(/summary/)) {\r",
											"        console.log(\"checking summary metrics\")\r",
											"        if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
											"            // if (item.assetId ==  testAsset ) {\r",
											"            console.log( \"found Collection_X_lvl1_asset\") \r",
											"\r",
											"            pm.test(\"Check some stats - maxTs\", function () {\r",
											"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);\r",
											"            });                \r",
											"            pm.test(\"Check some stats - minTs\", function () {\r",
											"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);\r",
											"            });           \r",
											"\r",
											"            pm.test(\"Check some stats - findings, low\", function () {\r",
											"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);\r",
											"            });\r",
											"            pm.test(\"Check some stats - findings, medium\", function () {\r",
											"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);\r",
											"            });\r",
											"            pm.test(\"Check some stats - findings, high\", function () {\r",
											"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);\r",
											"            });                                \r",
											"\r",
											"            pm.test(\"Check some stats - results - NA\", function () {\r",
											"                pm.expect(item.metrics.results.notapplicable).to.equal(metricsReferenceCommon.results.notapplicable.total);\r",
											"            });        \r",
											"            pm.test(\"Check some stats - results - pass\", function () {\r",
											"                pm.expect(item.metrics.results.pass).to.equal(metricsReferenceCommon.results.pass.total);\r",
											"            });        \r",
											"\r",
											"            pm.test(\"Check some stats - results - fail\", function () {\r",
											"                pm.expect(item.metrics.results.fail).to.equal(metricsReferenceCommon.results.fail.total);\r",
											"            });     \r",
											"            pm.test(\"Check some stats - results - unassessed\", function () {\r",
											"                pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);\r",
											"            });                   \r",
											"\r",
											"            pm.test(\"Check some stats - status - saved\", function () {\r",
											"                pm.expect(item.metrics.statuses.saved).to.equal(metricsReferenceCommon.statuses.saved.total);\r",
											"            });   \r",
											"\r",
											"            pm.test(\"Check some stats - status - submitted\", function () {\r",
											"                pm.expect(item.metrics.statuses.submitted).to.equal(metricsReferenceCommon.statuses.submitted.total);\r",
											"            });  \r",
											"            pm.test(\"Check some stats - status - accepted\", function () {\r",
											"                pm.expect(item.metrics.statuses.accepted).to.equal(metricsReferenceCommon.statuses.accepted.total);\r",
											"            });                   \r",
											"            pm.test(\"Check some stats - status - rejected\", function () {\r",
											"                pm.expect(item.metrics.statuses.rejected).to.equal(metricsReferenceCommon.statuses.rejected.total);\r",
											"            });      \r",
											"\r",
											"            pm.test(\"Check some stats - assessments\", function () {\r",
											"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);\r",
											"            });             \r",
											"            pm.test(\"Check some stats - assessed\", function () {\r",
											"                pm.expect(item.metrics.assessed).to.equal(metricsReferenceCommon.assessed);\r",
											"            });                          \r",
											"\r",
											"        }\r",
											"    }\r",
											"\r",
											"//Checking that metric details are correct\r",
											"    if (pm.request.url.getPath().match(/detail/)) {\r",
											"        if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
											"            // if (item.assetId ==  testAsset ) {\r",
											"            console.log( \"found Collection_X_lvl1_asset\") \r",
											"\r",
											"            pm.test(\"Check some stats - maxTs\", function () {\r",
											"                pm.expect(item.metrics.maxTs).to.equal(metricsReferenceCommon.maxTs);\r",
											"            });                \r",
											"            pm.test(\"Check some stats - minTs\", function () {\r",
											"                pm.expect(item.metrics.minTs).to.equal(metricsReferenceCommon.minTs);\r",
											"            });           \r",
											"\r",
											"            pm.test(\"Check some stats - findings, low\", function () {\r",
											"                pm.expect(item.metrics.findings.low).to.equal(metricsReferenceCommon.findings.low);\r",
											"            });\r",
											"            pm.test(\"Check some stats - findings, medium\", function () {\r",
											"                pm.expect(item.metrics.findings.medium).to.equal(metricsReferenceCommon.findings.medium);\r",
											"            });\r",
											"            pm.test(\"Check some stats - findings, high\", function () {\r",
											"                pm.expect(item.metrics.findings.high).to.equal(metricsReferenceCommon.findings.high);\r",
											"            });                                \r",
											"\r",
											"            pm.test(\"Check some stats - results - NA\", function () {\r",
											"                pm.expect(item.metrics.results.notapplicable.total).to.equal(metricsReferenceCommon.results.notapplicable.total);\r",
											"            });        \r",
											"            pm.test(\"Check some stats - results - pass\", function () {\r",
											"                pm.expect(item.metrics.results.pass.total).to.equal(metricsReferenceCommon.results.pass.total);\r",
											"            });        \r",
											"\r",
											"            pm.test(\"Check some stats - results - fail\", function () {\r",
											"                pm.expect(item.metrics.results.fail.total).to.equal(metricsReferenceCommon.results.fail.total);\r",
											"            });     \r",
											"            pm.test(\"Check some stats - results - informational\", function () {\r",
											"                pm.expect(item.metrics.results.informational.total).to.equal(metricsReferenceCommon.results.informational.total);\r",
											"            });                 \r",
											"            pm.test(\"Check some stats - results - notchecked\", function () {\r",
											"                pm.expect(item.metrics.results.notchecked.total).to.equal(metricsReferenceCommon.results.notchecked.total);\r",
											"            });                 \r",
											"            pm.test(\"Check some stats - results - notselected\", function () {\r",
											"                pm.expect(item.metrics.results.notselected.total).to.equal(metricsReferenceCommon.results.notselected.total);\r",
											"            });                 \r",
											"            pm.test(\"Check some stats - results - error\", function () {\r",
											"                pm.expect(item.metrics.results.error.total).to.equal(metricsReferenceCommon.results.error.total);\r",
											"            });    \r",
											"            pm.test(\"Check some stats - results - fixed\", function () {\r",
											"                pm.expect(item.metrics.results.fixed.total).to.equal(metricsReferenceCommon.results.fixed.total);\r",
											"            });                 \r",
											"\r",
											"            // pm.test(\"Check some stats - results - unassessed\", function () {\r",
											"            //     pm.expect(item.metrics.results.unassessed).to.equal(metricsReferenceCommon.results.unassessed.total);\r",
											"            // });                   \r",
											"\r",
											"            pm.test(\"Check some stats - status - saved\", function () {\r",
											"                pm.expect(item.metrics.statuses.saved.total).to.equal(metricsReferenceCommon.statuses.saved.total);\r",
											"            });   \r",
											"\r",
											"            pm.test(\"Check some stats - status - submitted\", function () {\r",
											"                pm.expect(item.metrics.statuses.submitted.total).to.equal(metricsReferenceCommon.statuses.submitted.total);\r",
											"            });  \r",
											"            pm.test(\"Check some stats - status - accepted\", function () {\r",
											"                pm.expect(item.metrics.statuses.accepted.total).to.equal(metricsReferenceCommon.statuses.accepted.total);\r",
											"            });                   \r",
											"            pm.test(\"Check some stats - status - rejected\", function () {\r",
											"                pm.expect(item.metrics.statuses.rejected.total).to.equal(metricsReferenceCommon.statuses.rejected.total);\r",
											"            });      \r",
											"\r",
											"            pm.test(\"Check some stats - assessments\", function () {\r",
											"                pm.expect(item.metrics.assessments).to.equal(metricsReferenceCommon.assessments);\r",
											"            });             \r",
											"            pm.test(\"Check some stats - assessed\", function () {\r",
											"                pm.expect(item.metrics.assessed).to.equal(5);\r",
											"            });                          \r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"   \r",
											"\r",
											"\r",
											"return;\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"metrics",
										"detail"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete handling",
					"item": [
						{
							"name": "LoadTestData Copy",
							"item": [
								{
									"name": "Import a new STIG - VPN  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{vpnStig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - Win 10  (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{win10Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - RHEL 7 (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text"
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{rhel7Stig}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data (as elevated Admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create a Collection in order to delete it",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201); \r",
											"    });\r",
											"// }\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let collectionToDelete = respJson.collectionId\r",
											"pm.environment.set(\"collectionToDelete\", collectionToDelete);\r",
											"\r",
											"// let requestToTest = JSON.parse(pm.request.body.raw)\r",
											"\r",
											"//Collection creator cannot see labels on collection it did not give itself a grant for\r",
											"// if (user == \"collectioncreator\") { \r",
											"//     requestToTest.labels = []\r",
											"// }\r",
											"console.log(\"created collection with id: \" + JSON.stringify(collectionToDelete));\r",
											"\r",
											"\r",
											"// created now being returned, but don't know what value it will be.\r",
											"// response validation will verify that the property exists.\r",
											"// delete respJson.created;\r",
											"\r",
											"// pm.test(\"Response matches request\", function () {\r",
											"//     pm.expect(collectionGetToPost(respJson))\r",
											"//     .to.eql(requestToTest)\r",
											"// })\r",
											"\r",
											"// function collectionGetToPost (collectionGet) {\r",
											"//     // extract the transformed and unposted properties\r",
											"//     const {collectionId, grants, labels, ...collectionPost} = collectionGet\r",
											"\r",
											"//     // add transformed properties to the derived post  \r",
											"//     collectionPost.grants = grantsPostToGet(grants)\r",
											"//     collectionPost.labels = labelsPostToGet(labels)\r",
											"\r",
											"//     // the derived post object\r",
											"//     return collectionPost\r",
											"// }\r",
											"\r",
											"// function grantsPostToGet(grantsGetArray) {\r",
											"//     const grantsPostArray = []\r",
											"//     for (const grant of grantsGetArray) {\r",
											"//         grantsPostArray.push({\r",
											"//             userId: grant.user.userId,\r",
											"//             accessLevel: grant.accessLevel\r",
											"//         })\r",
											"//     }\r",
											"//     return grantsPostArray\r",
											"// }\r",
											"\r",
											"// function labelsPostToGet(labelsGetArray) {\r",
											"//    return labelsGetArray.map( label => {\r",
											"//         const {labelId, uses, ...labelPost} = label\r",
											"//         return labelPost\r",
											"\r",
											"//     })\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_delete_{{$randomNoun}}-{{$randomJobType}}\",\n    \"description\": \"Collection TEST description\",\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            },\n            \"comment\": {\n                \"enabled\": \"always\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"minAcceptGrant\": 2,\n            \"resetCriteria\": \"result\"\n        },\n        \"history\": {\n            \"maxReviews\": 11\n        }\n  },\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"grants\": [\n        {\n                \"userId\": \"1\",\n                \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"85\",\n                \"accessLevel\": 1\n        }        \n    ],\n    \"labels\": [\n        {\n            \"name\": \"TEST\",\n            \"description\": \"Collection label description\",\n            \"color\": \"ffffff\"\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/collections?elevate=true&projection=grants&projection=labels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "labels"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Asset in collection to be deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"// }\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let assetInCollectionToBeDeleted = respJson.assetId\r",
											"pm.environment.set(\"assetInCollectionToBeDeleted\", assetInCollectionToBeDeleted);\r",
											"\r",
											"console.log(\"created asset with id: \" + JSON.stringify(assetInCollectionToBeDeleted));\r",
											"\r",
											"\r",
											"// pm.test(\"Response matches request\", function () {\r",
											"//     pm.expect(assetGetToPost(respJson))\r",
											"//     .to.eql(JSON.parse(pm.request.body.raw))\r",
											"// })\r",
											"\r",
											"// function assetGetToPost(assetGet) {\r",
											"//     // extract the transformed and unposted properties\r",
											"//     const {assetId, collection, stigs, mac, fqdn, ...assetPost} = assetGet\r",
											"    \r",
											"//     // add transformed properties to the derived post  \r",
											"//     assetPost.collectionId = collection.collectionId\r",
											"//     assetPost.stigs = stigsGetToPost(stigs)\r",
											"\r",
											"//     // the derived post object\r",
											"//     return assetPost\r",
											"// }\r",
											"\r",
											"// function stigsGetToPost(stigsGetArray) {\r",
											"//     const stigsPostArray = []\r",
											"//     for (const stig of stigsGetArray) {\r",
											"//         stigsPostArray.push(stig.benchmarkId)\r",
											"//     }\r",
											"//     return stigsPostArray\r",
											"// }\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{collectionToDelete}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"labelIds\": [\"{{testLabel}}\"],\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import one or more Reviews from a JSON body Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"const expectedResponse = {\r",
											"    rejected: [],\r",
											"    affected: {\r",
											"        updated: 0,\r",
											"        inserted: 1\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response matches request\", function () {\r",
											"    pm.expect(jsonData).to.eql(expectedResponse);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{collectionToDelete}}"
										},
										{
											"key": "assetId",
											"value": "{{assetInCollectionToBeDeleted}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a Collection Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Same tests as for GET /collection/{collectionId}\r",
											"\r",
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"lvl3\" || user == \"globular\" || user == \"collectioncreator\" ) { \r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    // return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let deletedCollection = respJson.collectionId\r",
											"pm.environment.set(\"deletedCollection\", deletedCollection);\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has requested projections and values\", function () {\r",
											"    // for (let item of jsonData){\r",
											"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"    // var regex = new RegExp(collectionMatchString);\r",
											"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
											"    //     pm.expect(jsonData.name).to.match(regex);\r",
											"    // });\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
											"        pm.expect(jsonData).to.have.property('assets');\r",
											"\r",
											"        for (let asset of jsonData.assets){\r",
											"            // pm.expect(asset).to.have.property('name');\r",
											"            // pm.expect(asset).to.have.property('assetId');\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
											"        pm.expect(jsonData).to.have.property('grants');\r",
											"   \r",
											"        for (let grant of jsonData.grants){\r",
											"            // pm.expect(grant).to.have.all.keys(grantKeys);\r",
											"            // pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        pm.expect(jsonData).to.have.property('stigs');\r",
											"\r",
											"        for (let stig of jsonData.stigs){\r",
											"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
											"        // console.log(\"checking owners projection\");\r",
											"        pm.expect(jsonData).to.have.property('owners');\r",
											"        for (let owner of jsonData.owners){\r",
											"            // pm.expect(owner).to.have.all.keys(userKeys);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
											"        // console.log(\"checking statistics projection\");\r",
											"        pm.expect(jsonData).to.have.property('statistics');\r",
											"\r",
											"        // pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// // let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(jsonData.name);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     pm.expect(jsonData.name).to.match(regex);\r",
											"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
											"// });\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?elevate=true&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{collectionToDelete}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Review: asset in deleted collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"// if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"//     user = \"elevated\";\r",
											"//     console.log(\"setting user to 'elevated'\");\r",
											"// }\r",
											"\r",
											"// if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"if (pm.response.code !== 403) {\r",
											"    return;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{deletedCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{assetInCollectionToBeDeleted}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "{{testRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "Return the STIGs - from deleted collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"if (pm.response.code !==403) {\r",
											"    return;\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"stigs"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{deletedCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import reviews for asset in deleted collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{deletedCollection}}"
										},
										{
											"key": "assetId",
											"value": "{{assetInCollectionToBeDeleted}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an Asset in deleted collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{assetInCollectionToBeDeleted}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import reviews for deleted asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{deletedCollection}}"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a deleted Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"// if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
											"//     pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"    pm.test(\"Status code is 204\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"// }\r",
											"if (pm.response.code !== 204) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"// let jsonData = pm.response.json();\r",
											"\r",
											"// pm.test(\"Response JSON is an object\", function () {\r",
											"//     pm.expect(jsonData).to.be.an('object');\r",
											"// });\r",
											"\r",
											"\r",
											"// pm.test(\"Response has requested properties and values\", function () {\r",
											"//     // for (let item of jsonData){\r",
											"//     let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"//     var regex = new RegExp(collectionMatchString);\r",
											"//     pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//         pm.expect(jsonData.name).to.match(regex);\r",
											"//     });\r",
											"\r",
											"\r",
											"//     if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
											"//         pm.expect(jsonData.assets).to.exist;\r",
											"\r",
											"//         let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"//         var assetRegex = new RegExp(assetMatchString);\r",
											"//         for (let asset of jsonData.assets){\r",
											"//             // pm.expect(asset).to.have.property('name');\r",
											"//             // pm.expect(asset).to.have.property('assetId');\r",
											"//             pm.expect(asset.name).to.match(assetRegex);\r",
											"//         }\r",
											"//     }\r",
											"\r",
											"//     if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
											"//         for (let grant of jsonData.grants){\r",
											"//             pm.expect(jsonData.grants).to.exist;\r",
											"\r",
											"//             // pm.expect(grant).to.be(array);\r",
											"//             // pm.expect(grant.user).to.be(object);\r",
											"//         }\r",
											"//     }\r",
											"\r",
											"//     if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"\r",
											"//         for (let stig of jsonData.stigs){\r",
											"//             // pm.expect(stig).to.be(object);\r",
											"//             pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"//         }\r",
											"//     }\r",
											"\r",
											"//     if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
											"//         // console.log(\"checking owners projection\");\r",
											"//         pm.expect(jsonData.owners).to.exist;\r",
											"\r",
											"//         for (let owner of jsonData.owners){\r",
											"//             // pm.expect(owner).to.be(array);\r",
											"//         }\r",
											"//     }\r",
											"\r",
											"//     if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
											"//         // console.log(\"checking statistics projection\");\r",
											"//         pm.expect(jsonData.statistics).to.exist;\r",
											"//     }\r",
											"\r",
											"//     if (pm.request.url.getQueryString().match(/projection=labels/)) {\r",
											"//         // console.log(\"checking statistics projection\");\r",
											"//         pm.expect(jsonData.labels).to.exist;\r",
											"//         if (user == \"lvl1\" ) {\r",
											"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
											"//             pm.expect(jsonData.labels[0].uses).to.equal(1);\r",
											"//             pm.expect(jsonData.labels[1].uses).to.equal(1);\r",
											"\r",
											"//         }\r",
											"//         else{\r",
											"//             pm.expect(jsonData.labels.length).to.equal(2);\r",
											"\r",
											"//         }            \r",
											"\r",
											"//     }\r",
											"//     // };\r",
											"\r",
											"// });\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// // let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(jsonData.name);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     pm.expect(jsonData.name).to.match(regex);\r",
											"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
											"// });\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics"
										},
										{
											"key": "projection",
											"value": "stigs"
										},
										{
											"key": "projection",
											"value": "labels"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{deletedCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Asset in deleted collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{deletedCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"labelIds\": [\"{{testLabel}}\"],\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return test Asset (with StigGrants projection)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Collection Cloning",
					"item": [
						{
							"name": "clone data prep",
							"item": [
								{
									"name": "Import and overwrite application data (as elevated Admin) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "true",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import a new STIG - VPN R1V0 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// let jsonData = pm.response.json();\r",
													"// let expectedRevData = \r",
													"// {\r",
													"//     \"benchmarkId\": \"VPN_SRG_TEST\",\r",
													"//     \"revisionStr\": \"V1R0\",\r",
													"//     \"action\": \"inserted\"\r",
													"// }\r",
													"\r",
													"\r",
													"// pm.test(\"Response JSON as expected)\", function () {\r",
													"//     pm.expect(jsonData).to.be.an('object')\r",
													"//     pm.expect(jsonData).to.eql(expectedRevData)\r",
													"// });\r",
													"\r",
													"\r",
													"// console.log(response)\r",
													"\r",
													"\r",
													"\r",
													"// pm.test(\"Body contains string\",() => {\r",
													"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "replace",
													"value": "true",
													"description": " (This can only be one of true,false)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{testStigFile}}",
													"disabled": true
												},
												{
													"key": "importFile",
													"type": "file",
													"src": "form-data-files/U_VPN_SRG_V1R0_Manual-xccdf.xml"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs"
											],
											"query": [
												{
													"key": "clobber",
													"value": "true"
												},
												{
													"key": "elevate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set default rev only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"// let jsonData = pm.response.json();\r",
													"\r",
													"const respData = pm.response.json()\r",
													"const reqData = JSON.parse(pm.request.body.raw)\r",
													"const expectedResponse = {\r",
													"  benchmarkId: pm.environment.get(\"testBenchmark\"),\r",
													"  title: \"Virtual Private Network (VPN) Security Requirements Guide\",\r",
													"  revisionStr: \"V1R0\",\r",
													"  benchmarkDate: \"2010-07-19\",\r",
													"  revisionPinned: true,\r",
													"  ruleCount: 81,\r",
													"  assetCount: 3,\r",
													"\r",
													"}    \r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(respData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected response\", function () {\r",
													"    try {\r",
													"        pm.expect(respData).to.eql(expectedResponse)\r",
													"    }\r",
													"    catch (e) {\r",
													"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
													"        throw(e)\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"defaultRevisionStr\": \"V1R0\"\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"stigs",
												":benchmarkId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "restrictedUserAccess",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "clone param variations",
							"item": [
								{
									"name": "clone test collection - everything matches source",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Clone_{{$randomInt}}-{{$randomInt}}_X\",\r\n  \"description\": \"clone of test collection x\",\r\n  \"options\": {\r\n    \"grants\": true,\r\n    \"labels\": true,\r\n    \"assets\": true,\r\n    \"stigMappings\": \"withReviews\",\r\n    \"pinRevisions\": \"matchSource\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/clone?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"clone"
											],
											"query": [
												{
													"key": "projection",
													"value": "assets"
												},
												{
													"key": "projection",
													"value": "grants"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "clone test collection - no grants",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Clone_{{$randomInt}}-{{$randomInt}}_X\",\r\n  \"description\": \"clone of test collection x\",\r\n  \"options\": {\r\n    \"grants\": false,\r\n    \"labels\": true,\r\n    \"assets\": true,\r\n    \"stigMappings\": \"withReviews\",\r\n    \"pinRevisions\": \"matchSource\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/clone?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"clone"
											],
											"query": [
												{
													"key": "projection",
													"value": "assets"
												},
												{
													"key": "projection",
													"value": "grants"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "clone test collection - no labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Clone_{{$randomInt}}-{{$randomInt}}_X\",\r\n  \"description\": \"clone of test collection x\",\r\n  \"options\": {\r\n    \"grants\": true,\r\n    \"labels\": false,\r\n    \"assets\": true,\r\n    \"stigMappings\": \"withReviews\",\r\n    \"pinRevisions\": \"matchSource\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/clone?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"clone"
											],
											"query": [
												{
													"key": "projection",
													"value": "assets"
												},
												{
													"key": "projection",
													"value": "grants"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "clone test collection - no assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Clone_{{$randomInt}}-{{$randomInt}}_X\",\r\n  \"description\": \"clone of test collection x\",\r\n  \"options\": {\r\n    \"grants\": true,\r\n    \"labels\": true,\r\n    \"assets\": false,\r\n    \"stigMappings\": \"withReviews\",\r\n    \"pinRevisions\": \"matchSource\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/clone?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"clone"
											],
											"query": [
												{
													"key": "projection",
													"value": "assets"
												},
												{
													"key": "projection",
													"value": "grants"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "clone test collection - stigMappings=none",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Clone_{{$randomInt}}-{{$randomInt}}_X\",\r\n  \"description\": \"clone of test collection x\",\r\n  \"options\": {\r\n    \"grants\": true,\r\n    \"labels\": true,\r\n    \"assets\": true,\r\n    \"stigMappings\": \"none\",\r\n    \"pinRevisions\": \"matchSource\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/clone?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"clone"
											],
											"query": [
												{
													"key": "projection",
													"value": "assets"
												},
												{
													"key": "projection",
													"value": "grants"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "clone test collection - stigMappings= withoutReviews",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Clone_{{$randomInt}}-{{$randomInt}}_X\",\r\n  \"description\": \"clone of test collection x\",\r\n  \"options\": {\r\n    \"grants\": true,\r\n    \"labels\": true,\r\n    \"assets\": true,\r\n    \"stigMappings\": \"withoutReviews\",\r\n    \"pinRevisions\": \"matchSource\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/clone?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"clone"
											],
											"query": [
												{
													"key": "projection",
													"value": "assets"
												},
												{
													"key": "projection",
													"value": "grants"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "clone test collection - sourceDefaults",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Clone_{{$randomInt}}-{{$randomInt}}_X\",\r\n  \"description\": \"clone of test collection x\",\r\n  \"options\": {\r\n    \"grants\": true,\r\n    \"labels\": true,\r\n    \"assets\": true,\r\n    \"stigMappings\": \"withReviews\",\r\n    \"pinRevisions\": \"sourceDefaults\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/clone?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"clone"
											],
											"query": [
												{
													"key": "projection",
													"value": "assets"
												},
												{
													"key": "projection",
													"value": "grants"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "21"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let user = pm.environment.get(\"user\");",
											"console.log(\"user: \" + user);",
											"",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
											"    user = \"elevated\";",
											"    console.log(\"setting user to 'elevated'\");",
											"}",
											"",
											"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"lvl4\" && user != \"lvl4\") { ",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {",
											"        pm.response.to.have.status(403);",
											"    });",
											"    return;",
											"}",
											"else {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200); ",
											"    });",
											"}",
											"if (pm.response.code !== 200) {",
											"    return;",
											"}",
											"",
											"",
											"// let jsonData = JSON.parse(pm.response.text())",
											"let jsonDataArray = pm.response.text().split(\"\\n\")",
											"",
											" let assetsProjected = [",
											"            {",
											"                name: \"ACHERNAR_Collection_X_asset\"",
											"            },",
											"            {",
											"                name: \"Collection_X_asset\"",
											"            },",
											"            {",
											"                name: \"Collection_X_lvl1_asset-1\"",
											"            },",
											"            {",
											"                name: \"Collection_X_lvl1_asset-2\"",
											"            }",
											"        ]",
											"",
											"let grantsProjected = [",
											"            {",
											"                user: {",
											"                    userId: \"86\",",
											"                    username: \"bizarroLvl1\",",
											"                    displayName: \"bizarroLvl1\"",
											"                },",
											"                accessLevel: 1",
											"            },",
											"            {",
											"                user: {",
											"                    userId: \"85\",",
											"                    username: \"lvl1\",",
											"                    displayName: \"lvl1\"",
											"                },",
											"                accessLevel: 1",
											"            },",
											"            {",
											"                user: {",
											"                    userId: \"21\",",
											"                    username: \"lvl2\",",
											"                    displayName: \"lvl2\"",
											"                },",
											"                accessLevel: 2",
											"            },",
											"            {",
											"                user: {",
											"                    userId: \"44\",",
											"                    username: \"lvl3\",",
											"                    displayName: \"lvl3\"",
											"                },",
											"                accessLevel: 3",
											"            },",
											"            {",
											"                user: {",
											"                    userId: \"87\",",
											"                    username: \"admin\",",
											"                    displayName: \"Admin Burke\"",
											"                },",
											"                accessLevel: 4",
											"            },",
											"            {",
											"                user: {",
											"                    userId: \"1\",",
											"                    username: \"stigmanadmin\",",
											"                    displayName: \"STIGMAN Admin\"",
											"                },",
											"                accessLevel: 4",
											"            },",
											"            {",
											"                user: {",
											"                    userId: \"45\",",
											"                    username: \"lvl4\",",
											"                    displayName: \"lvl4\"",
											"                },",
											"                accessLevel: 4",
											"            }",
											"        ]",
											"",
											"let ownersProjected = [",
											"            {",
											"                // \"email\": \"admin@admin.com\",",
											"                userId: \"87\",",
											"                username: \"admin\",",
											"                displayName: \"Admin Burke\"",
											"            },",
											"            {",
											"                // \"email\": null,",
											"                userId: \"1\",",
											"                username: \"stigmanadmin\",",
											"                displayName: \"STIGMAN Admin\"",
											"            },",
											"            {",
											"                // \"email\": null,",
											"                userId: \"45\",",
											"                username: \"lvl4\",",
											"                displayName:  null",
											"            }",
											"        ]",
											"",
											"let stigsProjected = [",
											"            {",
											"                ruleCount: 81,",
											"                benchmarkId: \"VPN_SRG_TEST\",",
											"                revisionStr: \"V1R0\",",
											"                benchmarkDate: \"2010-07-19\",",
											"                revisionPinned: true",
											"            },",
											"            {",
											"                ruleCount: 287,",
											"                benchmarkId: \"Windows_10_STIG_TEST\",",
											"                revisionStr: \"V1R23\",",
											"                benchmarkDate: \"2020-06-17\",",
											"                revisionPinned: false",
											"            }",
											"        ]",
											"",
											"let statisticsProjected = {",
											"            assetCount: 4,",
											"            grantCount: 7,",
											"            checklistCount: 6",
											"        }",
											"let labelsProjected = [",
											"            {",
											"                name: \"test-label-full\",",
											"                description: \"\",",
											"                color: \"FF99CC\",",
											"                uses: 2",
											"            },",
											"            {",
											"                name: \"test-label-lvl1\",",
											"                description: \"\",",
											"                color: \"99CCFF\",",
											"                uses: 1",
											"            }",
											"        ]",
											"",
											"pm.test(\"Response JSON is an array with expected length\", function () {",
											"    pm.expect(jsonDataArray).to.be.an('array');",
											"    if (user != \"collectioncreator\" ) {",
											"        pm.expect(jsonDataArray).to.have.lengthOf.at.least(1);",
											"    }",
											"",
											"});",
											"",
											"",
											"const requestBody = JSON.parse(pm.request.body.raw)",
											"// console.log(reqData)",
											"",
											"",
											"if (requestBody.options.grants == false ){",
											"    grantsProjected = [",
											"        {",
											"            user: {",
											"                userId: \"1\",",
											"                username: \"stigmanadmin\",",
											"                displayName: \"STIGMAN Admin\"",
											"            },",
											"            accessLevel: 4",
											"        }",
											"    ]",
											"    ownersProjected = [",
											"        {",
											"            userId: \"1\",",
											"            username: \"stigmanadmin\",",
											"            displayName: \"STIGMAN Admin\"",
											"        }",
											"    ]",
											"",
											"    statisticsProjected.grantCount = 1",
											"",
											"}",
											"",
											"if (requestBody.options.pinRevisions == \"sourceDefaults\" ){",
											"    stigsProjected[1].revisionPinned = true               ",
											"}",
											"",
											"if (requestBody.options.labels == false ){",
											"    labelsProjected = []",
											"}",
											"",
											"if (requestBody.options.assets == false ){",
											"    assetsProjected = []",
											"    statisticsProjected.assetCount = 0",
											"    statisticsProjected.checklistCount = 0",
											"    stigsProjected = []",
											"    labelsProjected[0].uses = 0",
											"    labelsProjected[1].uses = 0",
											"",
											"",
											"}",
											"",
											"if (requestBody.options.stigMappings == \"none\" ){",
											"    statisticsProjected.checklistCount = 0",
											"    stigsProjected = []",
											"}",
											"",
											"console.log(jsonDataArray)",
											"let expectedCollectionName = \"Clone of Collection X\"",
											"//  pm.test(\"look for stage: result and check cloned collection properties\", function () {",
											"    for (message of jsonDataArray){",
											"        if (message.length > 0){",
											"            let messageObject = JSON.parse(message)",
											"                // console.log(messageObject)",
											"",
											"            if (messageObject.stage == \"result\"){",
											"                console.log(\"clone probably successful!\")",
											"                // pm.expect(messageObject.collection.name).to.eql(expectedCollectionName);",
											"                pm.test(\"stage: 'result' found\", function () {                ",
											"                    console.log(messageObject.collection.name)",
											"                    pm.expect(1).to.eql(1);",
											"                 })",
											"",
											"",
											"                if (pm.request.url.getQueryString().match(/projection=grants/)) {",
											"",
											"                    // if (requestBody.options.grants == false ){",
											"                    //     console.log(\"just one grant\")",
											"                    //     grantsProjected = [",
											"                    //         {",
											"                    //             user: {",
											"                    //                 userId: \"1\",",
											"                    //                 username: \"stigmanadmin\",",
											"                    //                 displayName: \"STIGMAN Admin\"",
											"                    //             },",
											"                    //             accessLevel: 4",
											"                    //         }",
											"                    //     ]",
											"                    // }",
											"                    console.log(messageObject.collection.grants)",
											"                    console.log(grantsProjected)",
											"// pm.test(\"Response matches expected response\", function () {",
											"//     try {",
											"//         pm.expect(respData).to.eql(expectedResponse)",
											"//     }",
											"//     catch (e) {",
											"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`",
											"//         throw(e)",
											"//     }",
											"// });                    ",
											"                    pm.test(\"check cloned collection grants\", function () {                    ",
											"                        pm.expect(messageObject.collection).to.have.property('grants');",
											"                        try {                        ",
											"                            pm.expect(messageObject.collection.grants).to.eql(grantsProjected);",
											"                        }",
											"                        catch (e) {",
											"                            e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`",
											"                            throw(e)",
											"                        }                    ",
											"                    })",
											"                    // for (let owner of messageObject.collection.owners){",
											"                    //     // pm.expect(owner).to.have.all.keys(userKeys);",
											"                    // }",
											"                }",
											"",
											"                if (pm.request.url.getQueryString().match(/projection=statistics/)) {",
											"                    // console.log(\"checking statistics projection\");",
											"                    pm.test(\"check cloned collection stats\", function () {                    ",
											"                        pm.expect(messageObject.collection).to.have.property('statistics');",
											"                        pm.expect(messageObject.collection.statistics.assetCount).to.eql(statisticsProjected.assetCount);",
											"                        pm.expect(messageObject.collection.statistics.grantCount).to.eql(statisticsProjected.grantCount);",
											"                        pm.expect(messageObject.collection.statistics.checklistCount).to.eql(statisticsProjected.checklistCount);",
											"                    })",
											"                }",
											"",
											"                if (pm.request.url.getQueryString().match(/projection=labels/)) {",
											"                    pm.test(\"check cloned collection labels\", function () {                    ",
											"",
											"                        console.log(\"checking labels projection\");",
											"                        pm.expect(messageObject.collection).to.have.property('labels');",
											"                        let labelProjectedResponse = []",
											"                        for (label of messageObject.collection.labels){",
											"                            let {labelId, ...labelCheckProps} = label",
											"                            labelProjectedResponse.push(labelCheckProps)",
											"                            console.log(labelCheckProps)",
											"                        }",
											"                        // console.log(labelProjectedResponse)",
											"                        pm.expect(labelProjectedResponse).to.eql(labelsProjected);",
											"                    })",
											"",
											"                }",
											"                if (pm.request.url.getQueryString().match(/projection=owners/)) {",
											"                    pm.test(\"check cloned collection owners\", function () {                    ",
											"",
											"                        console.log(\"checking owners projection\");",
											"                        // console.log(messageObject.collection.owners);",
											"                        console.log(\"checking owners projected\");",
											"                        console.log(ownersProjected);                        ",
											"                        pm.expect(messageObject.collection).to.have.property('owners');",
											"                        let ownerProjectedResponse = []",
											"                        for (owner of messageObject.collection.owners){",
											"                            let {email, ...ownerCheckProps} = owner",
											"                            ownerProjectedResponse.push(ownerCheckProps)",
											"                             console.log(ownerCheckProps)",
											"                        }",
											"                        // console.log(labelProjectedResponse)",
											"                        pm.expect(ownerProjectedResponse).to.eql(ownersProjected);",
											"",
											"",
											"",
											"//CHECK THAT USER THAT CLONED IS OWNER",
											"                    })",
											"",
											"                }",
											"",
											"",
											"                if (pm.request.url.getQueryString().match(/projection=assets/)) {",
											"                    pm.test(\"check cloned collection assets\", function () {                    ",
											"",
											"                        pm.expect(messageObject.collection).to.have.property('assets');",
											"",
											"",
											"",
											"                        console.log(\"checking assets projection\");",
											"                        pm.expect(messageObject.collection).to.have.property('labels');",
											"                        let assetsProjectedResponse = []",
											"                        for (asset of messageObject.collection.assets){",
											"                            let {assetId, ...assetCheckProps} = asset",
											"                            assetsProjectedResponse.push(assetCheckProps)",
											"                            console.log(assetCheckProps)",
											"                        }                    ",
											"                        pm.expect(assetsProjectedResponse).to.eql(assetsProjected);",
											"",
											"                        // for (let owner of messageObject.collection.owners){",
											"                        //     // pm.expect(owner).to.have.all.keys(userKeys);",
											"                        // }",
											"                    })",
											"                }",
											"",
											"",
											"                if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
											"",
											"",
											"                    // if (requestBody.options.pinRevisions == \"sourceDefaults\" ){",
											"                    //     console.log(\"need to check pins\")",
											"                    //     stigsProjected[1].revisionPinned = true               ",
											"                    // }",
											"",
											"",
											"                  pm.test(\"check cloned collection stigs\", function () {                    ",
											"",
											"                    pm.expect(messageObject.collection).to.have.property('stigs');",
											"                    pm.expect(messageObject.collection.stigs).to.eql(stigsProjected);",
											"",
											"                    // for (let owner of messageObject.collection.owners){",
											"                    //     // pm.expect(owner).to.have.all.keys(userKeys);",
											"                    // }",
											"                  })",
											"                }",
											"",
											"                return;",
											"            }",
											"            // else if (messageObject.stage == \"collection\"){",
											"            //     pm.expect(messageObject?.status).to.not.equal(\"error\");",
											"            // }",
											"",
											"        }",
											"        else {",
											"        //   console.log(\"no result yet\")",
											"        pm.expect(\"Reached end of array\").to.equal(\"with no result stage\");",
											"",
											"        }        ",
											"    }",
											"//  });",
											"",
											"pm.test(\"Response matches expected response\", function () {",
											"    try {",
											"        pm.expect(respData).to.eql(expectedResponse)",
											"    }",
											"    catch (e) {",
											"        e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`",
											"        throw(e)",
											"    }",
											"});",
											"",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");",
											"// // console.log(\"collection string = \" + collectionMatchString);",
											"// var regex = new RegExp(collectionMatchString);",
											"// let collectionNames = _.map(jsonData, 'name');",
											"// // console.log(collectionNames);",
											"",
											"// pm.test(\"Check that proper Collections are returned\", function () {",
											"//     for (let name of collectionNames){",
											"//         pm.expect(name).to.match(regex);",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );",
											"",
											"//     }",
											" ",
											"// })",
											"",
											"",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "check clone reviews",
							"item": [
								{
									"name": "clone collection for later Review check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"// if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
													"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {\r",
													"//         pm.response.to.have.status(403);\r",
													"//     });\r",
													"//     return;\r",
													"// }\r",
													"// else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200); \r",
													"    });\r",
													"// }\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"// let jsonData = JSON.parse(pm.response.text())\r",
													"let jsonDataArray = pm.response.text().split(\"\\n\")\r",
													"\r",
													"pm.test(\"Response JSON is an array with expected length\", function () {\r",
													"    pm.expect(jsonDataArray).to.be.an('array');\r",
													"    if (user != \"collectioncreator\" ) {\r",
													"        pm.expect(jsonDataArray).to.have.lengthOf.at.least(1);\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// let requestToTest = JSON.parse(pm.request.body.raw)\r",
													"\r",
													"//Collection creator cannot see labels on collection it did not give itself a grant for\r",
													"// if (user == \"collectioncreator\") { \r",
													"//     requestToTest.labels = []\r",
													"// }\r",
													"\r",
													"let expectedCollectionName = \"Clone of Collection X\"\r",
													"//  pm.test(\"look for stage: result and check cloned collection properties\", function () {\r",
													"    for (message of jsonDataArray){\r",
													"        if (message.length > 0){\r",
													"            let messageObject = JSON.parse(message)\r",
													"                // console.log(messageObject)\r",
													"\r",
													"            if (messageObject.stage == \"result\"){\r",
													"                console.log(\"clone probably successful!\")\r",
													"                // pm.expect(messageObject.collection.name).to.eql(expectedCollectionName);\r",
													"                // pm.test(\"stage: 'result' found\", function () {                \r",
													"                //     console.log(messageObject.collection.name)\r",
													"                //     pm.expect(1).to.eql(1);\r",
													"                //  })\r",
													"\r",
													"                let clonedCollectionId = messageObject.collection.collectionId\r",
													"                pm.environment.set(\"clonedCollectionId\", clonedCollectionId);\r",
													"                console.log(\"created collection with id: \" + JSON.stringify(clonedCollectionId));\r",
													"\r",
													"                return;\r",
													"            }\r",
													"            // else if (messageObject.stage == \"collection\"){\r",
													"            //     pm.expect(messageObject?.status).to.not.equal(\"error\");\r",
													"            // }\r",
													"\r",
													"        }\r",
													"        else {\r",
													"        //   console.log(\"no result yet\")\r",
													"        pm.expect(\"Reached end of array\").to.equal(\"with no result stage\");\r",
													"\r",
													"        }        \r",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Clone_{{$randomInt}}-{{$randomInt}}_X\",\r\n  \"description\": \"clone of test collection x\",\r\n  \"options\": {\r\n    \"grants\": true,\r\n    \"labels\": true,\r\n    \"assets\": true,\r\n    \"stigMappings\": \"withReviews\",\r\n    \"pinRevisions\": \"matchSource\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/clone?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"clone"
											],
											"query": [
												{
													"key": "projection",
													"value": "assets"
												},
												{
													"key": "projection",
													"value": "grants"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Reviews in cloned collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an array of length 14\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array')\r",
													"    pm.expect(jsonData.length).to.equal(14)\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
													"let reviewRegex = new RegExp(reviewMatchString);\r",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"let assetRegex = new RegExp(assetMatchString);\r",
													"\r",
													"pm.test(\"Check if each review contains expected data and assets\", function () {\r",
													"\r",
													"    for (let review of jsonData){\r",
													"        // if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        //     pm.expect(review.stigs).to.exist;\r",
													"        // }\r",
													"        // if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
													"        //     pm.expect(review.rule).to.exist;\r",
													"        // }\r",
													"        // if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
													"        //     pm.expect(review.metadata).to.exist;\r",
													"        // }\r",
													"        pm.expect(review.detail).to.match(reviewRegex);\r",
													"        \r",
													"        pm.expect(review.assetName).to.match(assetRegex);\r",
													"\r",
													"        // if (pm.request.url.getQueryString().match(/result=/)) {\r",
													"        //     let param = pm.request.url.getQueryString().match(/result=([^&]+)&/)[1];\r",
													"        //     pm.expect(review.result).to.equal(param);\r",
													"        // }\r",
													"        // if (pm.request.url.getQueryString().match(/action=/)) {\r",
													"        //     let param = pm.request.url.getQueryString().match(/action=([^&]+)&/)[1];\r",
													"        //     pm.expect(review.action).to.equal(param);\r",
													"        // }\r",
													"        // if (pm.request.url.getQueryString().match(/status=/)) {\r",
													"        //     let param = pm.request.url.getQueryString().match(/status=([^&]+)&/)[1];\r",
													"        //     pm.expect(review.status.label).to.equal(param);\r",
													"        // }    \r",
													"        // if (pm.request.url.getQueryString().match(/ruleId=/)) {\r",
													"        //     let param = pm.request.url.getQueryString().match(/ruleId=([^&]+)&/)[1];\r",
													"        //     pm.expect(review.ruleId).to.equal(param);\r",
													"        // }    \r",
													"        // if (pm.request.url.getQueryString().match(/groupId=/)) {\r",
													"        //     let param = pm.request.url.getQueryString().match(/groupId=([^&]+)&/)[1];\r",
													"        //     pm.expect(review.rule.groupId).to.equal(param);\r",
													"        // }    \r",
													"        // if (pm.request.url.getQueryString().match(/cci=/)) {\r",
													"        //     let param = pm.request.url.getQueryString().match(/cci=([^&]+)&/)[1];\r",
													"        //     pm.expect(review.cci).to.equal(param);\r",
													"        // }    \r",
													"        // if (pm.request.url.getQueryString().match(/userId=/)) {\r",
													"        //     let param = pm.request.url.getQueryString().match(/userId=([^&]+)&/)[1];\r",
													"        //     pm.expect(review.userId).to.equal(param);\r",
													"        // }    \r",
													"        // if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
													"        //     let param = pm.request.url.getQueryString().match(/assetId=([^&]+)&/)[1];\r",
													"        //     pm.expect(review.assetId).to.equal(param);\r",
													"        // }        \r",
													"        // if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
													"        //     let param = pm.request.url.getQueryString().match(/benchmarkId=([^&]+)&/)[1];\r",
													"        //     pm.expect(review.stigs[0].benchmarkId).to.equal(param);\r",
													"        // }    \r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.stigmanadmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/{{clonedCollectionId}}/reviews",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												"{{clonedCollectionId}}",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "status",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "ruleId",
													"value": "<string>",
													"description": "Selects Reviews of a Rule",
													"disabled": true
												},
												{
													"key": "groupId",
													"value": "<string>",
													"description": "A query parameter that indentifies a Group",
													"disabled": true
												},
												{
													"key": "cci",
													"value": "<string>",
													"description": "A query parameter that indentifies a CCI",
													"disabled": true
												},
												{
													"key": "userId",
													"value": "<string>",
													"description": "A path parameter that indentifies a User",
													"disabled": true
												},
												{
													"key": "assetId",
													"value": "<string>",
													"description": "A query parameter that indentifies an Asset",
													"disabled": true
												},
												{
													"key": "benchmarkId",
													"value": "<string>",
													"description": "A query parameter that indentifies a STIG",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "rule",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "clone param variations - user is either not lvl4 or not collectioncreator",
							"item": [
								{
									"name": "clone test collection - lvl4 - not collectioncreator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.lvl4}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Clone_{{$randomInt}}-{{$randomInt}}_X\",\r\n  \"description\": \"clone of test collection x\",\r\n  \"options\": {\r\n    \"grants\": true,\r\n    \"labels\": true,\r\n    \"assets\": true,\r\n    \"stigMappings\": \"withReviews\",\r\n    \"pinRevisions\": \"matchSource\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/clone?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"clone"
											],
											"query": [
												{
													"key": "projection",
													"value": "assets"
												},
												{
													"key": "projection",
													"value": "grants"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "21"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "clone test collection - collectionCreator - no collection grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token.collectioncreator}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Clone_{{$randomInt}}-{{$randomInt}}_X\",\r\n  \"description\": \"clone of test collection x\",\r\n  \"options\": {\r\n    \"grants\": true,\r\n    \"labels\": true,\r\n    \"assets\": true,\r\n    \"stigMappings\": \"withReviews\",\r\n    \"pinRevisions\": \"matchSource\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/clone?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs&projection=labels",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"clone"
											],
											"query": [
												{
													"key": "projection",
													"value": "assets"
												},
												{
													"key": "projection",
													"value": "grants"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "labels"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "21"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "export-to",
					"item": [
						{
							"name": "Import and overwrite application data (as elevated Admin) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Merge provided properties with a Collection Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response has proper projections\", function () {\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
											"        pm.expect(jsonData).to.have.property('statistics');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        pm.expect(jsonData).to.have.property('stigs');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
											"        pm.expect(jsonData).to.have.property('assets');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
											"        pm.expect(jsonData).to.have.property('owners');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
											"        pm.expect(jsonData).to.have.property('grants');\r",
											"    }            \r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"always\"\n            },\n            \"comment\": {\n                \"enabled\": \"findings\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"resetCriteria\": \"result\",\n            \"minAcceptGrant\": 3\n        },\n        \"history\": {\n            \"maxReviews\": 15\n        }\n    },  \n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 1\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"87\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "export results to another collection - entire asset - expect to create asset in destination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin, lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"// let jsonData = JSON.parse(pm.response.text())\r",
											"let jsonDataArray = pm.response.text().split(\"\\n\")\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"    pm.expect(jsonDataArray).to.be.an('array');\r",
											"    if (user != \"collectioncreator\" ) {\r",
											"        pm.expect(jsonDataArray).to.have.lengthOf.at.least(1);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"const requestBody = JSON.parse(pm.request.body.raw)\r",
											"// console.log(reqData)\r",
											"\r",
											"\r",
											"console.log(jsonDataArray)\r",
											"//  pm.test(\"look for stage: result and check cloned collection properties\", function () {\r",
											"    for (message of jsonDataArray){\r",
											"        if (message.length > 0){\r",
											"            let messageObject = JSON.parse(message)\r",
											"                console.log(messageObject)\r",
											"\r",
											"            if (messageObject.stage == \"result\"){\r",
											"                console.log(\"results export probably successful!\")\r",
											"                // pm.expect(messageObject.collection.name).to.eql(expectedCollectionName);\r",
											"                pm.test(\"stage: 'result' found, check for proper counts\", function () {                \r",
											"                    console.log(messageObject.counts)\r",
											"                    pm.expect(messageObject.counts.assetsCreated).to.eql(1);\r",
											"                    pm.expect(messageObject.counts.stigsMapped).to.eql(2);\r",
											"                    pm.expect(messageObject.counts.reviewsInserted).to.eql(9);\r",
											"                    pm.expect(messageObject.counts.reviewsUpdated).to.eql(0);\r",
											"                 })\r",
											"\r",
											"\r",
											"            }\r",
											"        }\r",
											"        // else {\r",
											"        // //   console.log(\"no result yet\")\r",
											"        // pm.expect(\"Reached end of array\").to.equal(\"with no result stage\");\r",
											"\r",
											"        // }        \r",
											"    }\r",
											"//  });\r",
											"\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(collectionNames);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     for (let name of collectionNames){\r",
											"//         pm.expect(name).to.match(regex);\r",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"//     }\r",
											" \r",
											"// })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"assetId\": \"42\"\n  }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/export-to/:dstCollectionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"export-to",
										":dstCollectionId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "dstCollectionId",
											"value": "{{scrapCollection}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get asset created via export-to",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"lvl2\" || user == \"globular\") {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, Lvl1, or bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let exportedAsset = respJson[0].assetId\r",
											"pm.environment.set(\"exportedAsset\", exportedAsset);\r",
											"\r",
											"// let jsonData = pm.response.json();\r",
											"// let testAsset = pm.environment.get(\"testAsset\");\r",
											"\r",
											"\r",
											"// pm.test(\"Response JSON is an array\", function () {\r",
											"//     pm.expect(jsonData).to.be.an('array');\r",
											"// });\r",
											"\r",
											"// let returnedAssetIds=[];\r",
											"\r",
											"// pm.test(\"assets have expected properties and values\", function () {\r",
											"//     let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"//     var regex = new RegExp(assetMatchString);\r",
											"//     for (let asset of jsonData){\r",
											"\r",
											"//         // pm.expect(asset).to.have.all.keys(assetKeys);\r",
											"//         pm.expect(asset.name).to.match(regex);\r",
											"//         returnedAssetIds.push(asset.assetId);\r",
											"//         // pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
											"\r",
											"\r",
											"//         if (pm.request.url.getQueryString().match(/projection=statusStats/)) {\r",
											"//             pm.expect(asset.statusStats).to.exist;\r",
											"//                 if (asset.assetId == testAsset) {\r",
											"//                     console.log (\"testing testAsset\")\r",
											"//                     if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"//                         console.log (\"testing ruleCount for testBenchmark for asset\")\r",
											"//                         pm.expect(asset.statusStats.ruleCount).to.eql(81);\r",
											"//                     }\r",
											"//                     else{\r",
											"//                         console.log (\"testing ruleCount for all stigs for asset\")\r",
											"//                         pm.expect(asset.statusStats.ruleCount).to.eql(368);\r",
											"\r",
											"//                     }\r",
											"//                 }\r",
											"//             }       \r",
											"\r",
											"//         if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"//             for (let stig of asset.stigs){\r",
											"//                 // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"//             }\r",
											"//         }\r",
											"\r",
											"\r",
											"//     if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"//         for (let grant of asset.stigGrants){\r",
											"//             // pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"//             pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"//             for (let user of grant.users){\r",
											"//                 // pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"\r",
											"//             }\r",
											"//         }\r",
											"//     }\r",
											"\r",
											"//     if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"//         let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"\r",
											"//         for (let stig of asset.stigs){\r",
											"//             pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"//         }\r",
											"//     }\r",
											"\r",
											"\r",
											"\r",
											"//         // if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"//         //     for (let grant of asset.stigGrants){\r",
											"//         //         pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"//         //         for (let user of grant.users){\r",
											"//         //             pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"//         //         }\r",
											"//         //     }\r",
											"//         // }\r",
											"\r",
											"//     };\r",
											"\r",
											"// });\r",
											"\r",
											"// // let Asset_NoStigs = pm.environment.get(\"testAsset-NoStigs\");\r",
											"// // console.log(returnedAssetIds)\r",
											"// // console.log(Asset_NoStigs)\r",
											"\r",
											"// // if (user != \"lvl1\") {\r",
											"// //     pm.test(\"check for asset with no assigned stig (edge case)\", function () {\r",
											"// //         pm.expect(returnedAssetIds).to.include(Asset_NoStigs);\r",
											"\r",
											"// //     });\r",
											"// // }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{scrapCollection}}&name=Collection_X_lvl1_asset-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG",
											"disabled": true
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Collection_X_lvl1_asset-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return detail metrics - asset agg - with param assetId SOURCE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let exportedAssetStatuses = respJson[0].metrics.statuses\r",
											"pm.environment.set(\"exportedAssetStatuses\", exportedAssetStatuses);\r",
											"let exportedAssetResults = respJson[0].metrics.results\r",
											"pm.environment.set(\"exportedAssetResults\", exportedAssetResults);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/asset?assetId={{testAsset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"metrics",
										"detail",
										"asset"
									],
									"query": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}"
										},
										{
											"key": "assetId",
											"value": "{{exportedAsset}}",
											"disabled": true
										},
										{
											"key": "labelName",
											"value": "{{testLabelName-lvl1}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return detail metrics - asset agg - with param assetId DEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"// if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"//     user = \"elevated\";\r",
											"//     console.log(\"setting user to 'elevated'\");\r",
											"// }\r",
											"\r",
											"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin, lvl3 and lvl4\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 200\", function () {\r",
											"//         pm.response.to.have.status(200);\r",
											"//     });\r",
											"// }\r",
											"// if (pm.response.code !== 200) {\r",
											"//     return;\r",
											"// }\r",
											"\r",
											"\r",
											"// // let jsonData = JSON.parse(pm.response.text())\r",
											"// let jsonDataArray = pm.response.text().split(\"\\n\")\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"//     pm.expect(jsonDataArray).to.be.an('array');\r",
											"//     if (user != \"collectioncreator\" ) {\r",
											"//         pm.expect(jsonDataArray).to.have.lengthOf.at.least(1);\r",
											"//     }\r",
											"\r",
											"// });\r",
											"\r",
											"\r",
											"// const requestBody = JSON.parse(pm.request.body.raw)\r",
											"// // console.log(reqData)\r",
											"let respJson = pm.response.json();\r",
											"\r",
											"// let expectedStatuses = pm.environment.get(\"exportedAssetStatuses\");\r",
											"\r",
											"\r",
											"// let expectedStatuses = {\r",
											"//                 \"saved\": {\r",
											"//                     \"total\": 9,\r",
											"//                     \"resultEngine\": 0\r",
											"//                 },\r",
											"//                 \"accepted\": {\r",
											"//                     \"total\": 0,\r",
											"//                     \"resultEngine\": 0\r",
											"//                 },\r",
											"//                 \"rejected\": {\r",
											"//                     \"total\": 0,\r",
											"//                     \"resultEngine\": 0\r",
											"//                 },\r",
											"//                 \"submitted\": {\r",
											"//                     \"total\": 0,\r",
											"//                     \"resultEngine\": 0\r",
											"//                 }\r",
											"//             }\r",
											"\r",
											"\r",
											"let expectedResults = pm.environment.get(\"exportedAssetResults\");\r",
											"console.log(expectedResults)\r",
											"console.log(respJson[0].metrics.results)\r",
											"\r",
											"// pm.test(\"check statuses against source\", function () {                \r",
											"//     pm.expect(respJson[0].metrics.statuses).to.eql(expectedStatuses);\r",
											"//     })\r",
											"\r",
											"\r",
											"pm.test(\"check results against source\", function () {                \r",
											"    pm.expect(respJson[0].metrics.results).to.eql(expectedResults);\r",
											"    })\r",
											"\r",
											"\r",
											"\r",
											"// console.log(jsonDataArray)\r",
											"// //  pm.test(\"look for stage: result and check cloned collection properties\", function () {\r",
											"//     for (message of jsonDataArray){\r",
											"//         if (message.length > 0){\r",
											"//             let messageObject = JSON.parse(message)\r",
											"//                 console.log(messageObject)\r",
											"\r",
											"//             if (messageObject.stage == \"result\"){\r",
											"//                 console.log(\"results export probably successful!\")\r",
											"//                 // pm.expect(messageObject.collection.name).to.eql(expectedCollectionName);\r",
											"//                 pm.test(\"stage: 'result' found, check for proper counts\", function () {                \r",
											"//                     console.log(messageObject.counts)\r",
											"//                     pm.expect(messageObject.counts.assetsCreated).to.eql(1);\r",
											"//                     pm.expect(messageObject.counts.stigsMapped).to.eql(2);\r",
											"//                     pm.expect(messageObject.counts.reviewsInserted).to.eql(9);\r",
											"//                     pm.expect(messageObject.counts.reviewsUpdated).to.eql(0);\r",
											"//                  })\r",
											"\r",
											"\r",
											"//             }\r",
											"//         }\r",
											"//         // else {\r",
											"//         // //   console.log(\"no result yet\")\r",
											"//         // pm.expect(\"Reached end of array\").to.equal(\"with no result stage\");\r",
											"\r",
											"//         // }        \r",
											"//     }\r",
											"// //  });\r",
											"\r",
											"\r",
											"\r",
											"// // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // // console.log(\"collection string = \" + collectionMatchString);\r",
											"// // var regex = new RegExp(collectionMatchString);\r",
											"// // let collectionNames = _.map(jsonData, 'name');\r",
											"// // // console.log(collectionNames);\r",
											"\r",
											"// // pm.test(\"Check that proper Collections are returned\", function () {\r",
											"// //     for (let name of collectionNames){\r",
											"// //         pm.expect(name).to.match(regex);\r",
											"// //         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"// //     }\r",
											" \r",
											"// // })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/asset?assetId={{exportedAsset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"metrics",
										"detail",
										"asset"
									],
									"query": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "{{exportedAsset}}"
										},
										{
											"key": "labelId",
											"value": "{{testLabel}}",
											"disabled": true
										},
										{
											"key": "labelName",
											"value": "{{testLabelName-lvl1}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Review: stigs and rule projections Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"// const respData = pm.response.json()\r",
											"// const reqData = JSON.parse(pm.request.body.raw)\r",
											"// const expectedReview = {\r",
											"//   assetId: \"42\",\r",
											"//   assetName: \"Collection_X_lvl1_asset-1\",\r",
											"//   assetLabelIds: [\r",
											"//     \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
											"//     \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
											"//     ],\r",
											"//   ruleId: pm.environment.get(\"testRuleId\"),\r",
											"//  ruleIds: [\r",
											"//         pm.environment.get(\"testRuleId\")\r",
											"//     ],  \r",
											"//   result: reqData.result,\r",
											"//   resultEngine: null,\r",
											"//   detail: reqData.detail,\r",
											"//   autoResult: reqData.autoResult,\r",
											"//   comment: reqData.comment,\r",
											"//   userId: userId,\r",
											"//   username: user,\r",
											"//   ts: respData.ts,\r",
											"//   touchTs: respData.touchTs,\r",
											"//   status: {\r",
											"//       ts: respData.status.ts,\r",
											"//       text: null,\r",
											"//       user: {\r",
											"//           userId: userId,\r",
											"//           username: user\r",
											"//       },\r",
											"//       label: reqData.status\r",
											"//   },\r",
											"//   stigs:[\r",
											"//         {\r",
											"//             isDefault: true,\r",
											"//             ruleCount: 81,\r",
											"//             benchmarkId: \"VPN_SRG_TEST\",\r",
											"//             revisionStr: \"V1R1\",\r",
											"//             benchmarkDate: \"2019-07-19\",\r",
											"//             revisionPinned: false\r",
											"//         }\r",
											"//     ],\r",
											"//   rule: {\r",
											"//     title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
											"//     ruleId: \"SV-106179r1_rule\",\r",
											"//     version: \"SRG-NET-000019-VPN-000040\",\r",
											"//     severity: \"medium\"\r",
											"//   }\r",
											"// }\r",
											"// pm.test(\"Response matches expected response\", function () {\r",
											"//     try {\r",
											"//         pm.expect(respData).to.eql(expectedReview)\r",
											"//     }\r",
											"//     catch (e) {\r",
											"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"//         throw(e)\r",
											"//     }\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"\",\n    \"autoResult\": false,\n    \"status\": \"accepted\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{exportedAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "{{testRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "export results to another collection - entire asset - asset exists Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin, lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"// let jsonData = JSON.parse(pm.response.text())\r",
											"let jsonDataArray = pm.response.text().split(\"\\n\")\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"    pm.expect(jsonDataArray).to.be.an('array');\r",
											"    if (user != \"collectioncreator\" ) {\r",
											"        pm.expect(jsonDataArray).to.have.lengthOf.at.least(1);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"const requestBody = JSON.parse(pm.request.body.raw)\r",
											"// console.log(reqData)\r",
											"\r",
											"\r",
											"console.log(jsonDataArray)\r",
											"//  pm.test(\"look for stage: result and check cloned collection properties\", function () {\r",
											"    for (message of jsonDataArray){\r",
											"        if (message.length > 0){\r",
											"            let messageObject = JSON.parse(message)\r",
											"                console.log(messageObject)\r",
											"\r",
											"            if (messageObject.stage == \"result\"){\r",
											"                console.log(\"results export probably successful!\")\r",
											"                // pm.expect(messageObject.collection.name).to.eql(expectedCollectionName);\r",
											"                pm.test(\"stage: 'result' found, check for proper counts\", function () {                \r",
											"                    console.log(messageObject.counts)\r",
											"                    pm.expect(messageObject.counts.assetsCreated).to.eql(0);\r",
											"                    pm.expect(messageObject.counts.stigsMapped).to.eql(0);\r",
											"                    pm.expect(messageObject.counts.reviewsInserted).to.eql(0);\r",
											"                    pm.expect(messageObject.counts.reviewsUpdated).to.eql(9);\r",
											"                 })\r",
											"\r",
											"\r",
											"            }\r",
											"        }\r",
											"        // else {\r",
											"        // //   console.log(\"no result yet\")\r",
											"        // pm.expect(\"Reached end of array\").to.equal(\"with no result stage\");\r",
											"\r",
											"        // }        \r",
											"    }\r",
											"//  });\r",
											"\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(collectionNames);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     for (let name of collectionNames){\r",
											"//         pm.expect(name).to.match(regex);\r",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"//     }\r",
											" \r",
											"// })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"assetId\": \"42\"\n  }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/export-to/:dstCollectionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"export-to",
										":dstCollectionId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "dstCollectionId",
											"value": "{{scrapCollection}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return detail metrics - asset agg - with param assetId DEST Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"// if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"//     user = \"elevated\";\r",
											"//     console.log(\"setting user to 'elevated'\");\r",
											"// }\r",
											"\r",
											"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin, lvl3 and lvl4\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 200\", function () {\r",
											"//         pm.response.to.have.status(200);\r",
											"//     });\r",
											"// }\r",
											"// if (pm.response.code !== 200) {\r",
											"//     return;\r",
											"// }\r",
											"\r",
											"\r",
											"// // let jsonData = JSON.parse(pm.response.text())\r",
											"// let jsonDataArray = pm.response.text().split(\"\\n\")\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"//     pm.expect(jsonDataArray).to.be.an('array');\r",
											"//     if (user != \"collectioncreator\" ) {\r",
											"//         pm.expect(jsonDataArray).to.have.lengthOf.at.least(1);\r",
											"//     }\r",
											"\r",
											"// });\r",
											"\r",
											"\r",
											"// const requestBody = JSON.parse(pm.request.body.raw)\r",
											"// // console.log(reqData)\r",
											"let respJson = pm.response.json();\r",
											"\r",
											"// let expectedStatuses = pm.environment.get(\"exportedAssetStatuses\");\r",
											"\r",
											"\r",
											"let expectedStatuses = {\r",
											"                \"saved\": {\r",
											"                    \"total\": 8,\r",
											"                    \"resultEngine\": 0\r",
											"                },\r",
											"                \"accepted\": {\r",
											"                    \"total\": 1,\r",
											"                    \"resultEngine\": 0\r",
											"                },\r",
											"                \"rejected\": {\r",
											"                    \"total\": 0,\r",
											"                    \"resultEngine\": 0\r",
											"                },\r",
											"                \"submitted\": {\r",
											"                    \"total\": 0,\r",
											"                    \"resultEngine\": 0\r",
											"                }\r",
											"            }\r",
											"\r",
											"\r",
											"let expectedResults = pm.environment.get(\"exportedAssetResults\");\r",
											"console.log(expectedResults)\r",
											"console.log(respJson[0].metrics.results)\r",
											"\r",
											"pm.test(\"check statuses against source\", function () {                \r",
											"    pm.expect(respJson[0].metrics.statuses).to.eql(expectedStatuses);\r",
											"    })\r",
											"\r",
											"\r",
											"pm.test(\"check results against source\", function () {                \r",
											"    pm.expect(respJson[0].metrics.results).to.eql(expectedResults);\r",
											"    })\r",
											"\r",
											"\r",
											"\r",
											"// console.log(jsonDataArray)\r",
											"// //  pm.test(\"look for stage: result and check cloned collection properties\", function () {\r",
											"//     for (message of jsonDataArray){\r",
											"//         if (message.length > 0){\r",
											"//             let messageObject = JSON.parse(message)\r",
											"//                 console.log(messageObject)\r",
											"\r",
											"//             if (messageObject.stage == \"result\"){\r",
											"//                 console.log(\"results export probably successful!\")\r",
											"//                 // pm.expect(messageObject.collection.name).to.eql(expectedCollectionName);\r",
											"//                 pm.test(\"stage: 'result' found, check for proper counts\", function () {                \r",
											"//                     console.log(messageObject.counts)\r",
											"//                     pm.expect(messageObject.counts.assetsCreated).to.eql(1);\r",
											"//                     pm.expect(messageObject.counts.stigsMapped).to.eql(2);\r",
											"//                     pm.expect(messageObject.counts.reviewsInserted).to.eql(9);\r",
											"//                     pm.expect(messageObject.counts.reviewsUpdated).to.eql(0);\r",
											"//                  })\r",
											"\r",
											"\r",
											"//             }\r",
											"//         }\r",
											"//         // else {\r",
											"//         // //   console.log(\"no result yet\")\r",
											"//         // pm.expect(\"Reached end of array\").to.equal(\"with no result stage\");\r",
											"\r",
											"//         // }        \r",
											"//     }\r",
											"// //  });\r",
											"\r",
											"\r",
											"\r",
											"// // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // // console.log(\"collection string = \" + collectionMatchString);\r",
											"// // var regex = new RegExp(collectionMatchString);\r",
											"// // let collectionNames = _.map(jsonData, 'name');\r",
											"// // // console.log(collectionNames);\r",
											"\r",
											"// // pm.test(\"Check that proper Collections are returned\", function () {\r",
											"// //     for (let name of collectionNames){\r",
											"// //         pm.expect(name).to.match(regex);\r",
											"// //         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"// //     }\r",
											" \r",
											"// // })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/asset?assetId={{exportedAsset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"metrics",
										"detail",
										"asset"
									],
									"query": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "{{exportedAsset}}"
										},
										{
											"key": "labelId",
											"value": "{{testLabel}}",
											"disabled": true
										},
										{
											"key": "labelName",
											"value": "{{testLabelName-lvl1}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Merge provided properties with a Collection Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response has proper projections\", function () {\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
											"        pm.expect(jsonData).to.have.property('statistics');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        pm.expect(jsonData).to.have.property('stigs');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
											"        pm.expect(jsonData).to.have.property('assets');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
											"        pm.expect(jsonData).to.have.property('owners');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
											"        pm.expect(jsonData).to.have.property('grants');\r",
											"    }            \r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"settings\": {\n        \"fields\": {\n            \"detail\": {\n                \"enabled\": \"always\",\n                \"required\": \"always\"\n            },\n            \"comment\": {\n                \"enabled\": \"findings\",\n                \"required\": \"findings\"\n            }\n        },\n        \"status\": {\n            \"canAccept\": true,\n            \"resetCriteria\": \"any\",\n            \"minAcceptGrant\": 3\n        },\n        \"history\": {\n            \"maxReviews\": 15\n        }\n    },  \n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 1\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"87\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Review: stigs and rule projections Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"console.log(\"user: \" + user);\r",
											"console.log(\"userId: \" + userId)\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"// const respData = pm.response.json()\r",
											"// const reqData = JSON.parse(pm.request.body.raw)\r",
											"// const expectedReview = {\r",
											"//   assetId: \"42\",\r",
											"//   assetName: \"Collection_X_lvl1_asset-1\",\r",
											"//   assetLabelIds: [\r",
											"//     \"755b8a28-9a68-11ec-b1bc-0242ac110002\",\r",
											"//     \"5130dc84-9a68-11ec-b1bc-0242ac110002\"\r",
											"//     ],\r",
											"//   ruleId: pm.environment.get(\"testRuleId\"),\r",
											"//  ruleIds: [\r",
											"//         pm.environment.get(\"testRuleId\")\r",
											"//     ],  \r",
											"//   result: reqData.result,\r",
											"//   resultEngine: null,\r",
											"//   detail: reqData.detail,\r",
											"//   autoResult: reqData.autoResult,\r",
											"//   comment: reqData.comment,\r",
											"//   userId: userId,\r",
											"//   username: user,\r",
											"//   ts: respData.ts,\r",
											"//   touchTs: respData.touchTs,\r",
											"//   status: {\r",
											"//       ts: respData.status.ts,\r",
											"//       text: null,\r",
											"//       user: {\r",
											"//           userId: userId,\r",
											"//           username: user\r",
											"//       },\r",
											"//       label: reqData.status\r",
											"//   },\r",
											"//   stigs:[\r",
											"//         {\r",
											"//             isDefault: true,\r",
											"//             ruleCount: 81,\r",
											"//             benchmarkId: \"VPN_SRG_TEST\",\r",
											"//             revisionStr: \"V1R1\",\r",
											"//             benchmarkDate: \"2019-07-19\",\r",
											"//             revisionPinned: false\r",
											"//         }\r",
											"//     ],\r",
											"//   rule: {\r",
											"//     title: \"The VPN Gateway must ensure inbound and outbound traffic is configured with a security policy in compliance with information flow control policies.\",\r",
											"//     ruleId: \"SV-106179r1_rule\",\r",
											"//     version: \"SRG-NET-000019-VPN-000040\",\r",
											"//     severity: \"medium\"\r",
											"//   }\r",
											"// }\r",
											"// pm.test(\"Response matches expected response\", function () {\r",
											"//     try {\r",
											"//         pm.expect(respData).to.eql(expectedReview)\r",
											"//     }\r",
											"//     catch (e) {\r",
											"//         e.message = `actual: ${JSON.stringify(e.actual)}, expected: ${JSON.stringify(e.expected)}`\r",
											"//         throw(e)\r",
											"//     }\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"pass\",\n    \"detail\": \"test\\nvisible to lvl1\",\n    \"comment\": \"\",\n    \"autoResult\": false,\n    \"status\": \"accepted\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{exportedAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "{{testRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "export results to another collection - entire asset - asset exists Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin, lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"// let jsonData = JSON.parse(pm.response.text())\r",
											"let jsonDataArray = pm.response.text().split(\"\\n\")\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"    pm.expect(jsonDataArray).to.be.an('array');\r",
											"    if (user != \"collectioncreator\" ) {\r",
											"        pm.expect(jsonDataArray).to.have.lengthOf.at.least(1);\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"const requestBody = JSON.parse(pm.request.body.raw)\r",
											"// console.log(reqData)\r",
											"\r",
											"\r",
											"console.log(jsonDataArray)\r",
											"//  pm.test(\"look for stage: result and check cloned collection properties\", function () {\r",
											"    for (message of jsonDataArray){\r",
											"        if (message.length > 0){\r",
											"            let messageObject = JSON.parse(message)\r",
											"                console.log(messageObject)\r",
											"\r",
											"            if (messageObject.stage == \"result\"){\r",
											"                console.log(\"results export probably successful!\")\r",
											"                // pm.expect(messageObject.collection.name).to.eql(expectedCollectionName);\r",
											"                pm.test(\"stage: 'result' found, check for proper counts\", function () {                \r",
											"                    console.log(messageObject.counts)\r",
											"                    pm.expect(messageObject.counts.assetsCreated).to.eql(0);\r",
											"                    pm.expect(messageObject.counts.stigsMapped).to.eql(0);\r",
											"                    pm.expect(messageObject.counts.reviewsInserted).to.eql(0);\r",
											"                    pm.expect(messageObject.counts.reviewsUpdated).to.eql(9);\r",
											"                 })\r",
											"\r",
											"\r",
											"            }\r",
											"        }\r",
											"        // else {\r",
											"        // //   console.log(\"no result yet\")\r",
											"        // pm.expect(\"Reached end of array\").to.equal(\"with no result stage\");\r",
											"\r",
											"        // }        \r",
											"    }\r",
											"//  });\r",
											"\r",
											"\r",
											"\r",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // console.log(\"collection string = \" + collectionMatchString);\r",
											"// var regex = new RegExp(collectionMatchString);\r",
											"// let collectionNames = _.map(jsonData, 'name');\r",
											"// // console.log(collectionNames);\r",
											"\r",
											"// pm.test(\"Check that proper Collections are returned\", function () {\r",
											"//     for (let name of collectionNames){\r",
											"//         pm.expect(name).to.match(regex);\r",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"//     }\r",
											" \r",
											"// })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"assetId\": \"42\"\n  }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/export-to/:dstCollectionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"export-to",
										":dstCollectionId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "dstCollectionId",
											"value": "{{scrapCollection}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return detail metrics - asset agg - with param assetId DEST Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"// if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"//     user = \"elevated\";\r",
											"//     console.log(\"setting user to 'elevated'\");\r",
											"// }\r",
											"\r",
											"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin, lvl3 and lvl4\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 200\", function () {\r",
											"//         pm.response.to.have.status(200);\r",
											"//     });\r",
											"// }\r",
											"// if (pm.response.code !== 200) {\r",
											"//     return;\r",
											"// }\r",
											"\r",
											"\r",
											"// // let jsonData = JSON.parse(pm.response.text())\r",
											"// let jsonDataArray = pm.response.text().split(\"\\n\")\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Response JSON is an array with expected length\", function () {\r",
											"//     pm.expect(jsonDataArray).to.be.an('array');\r",
											"//     if (user != \"collectioncreator\" ) {\r",
											"//         pm.expect(jsonDataArray).to.have.lengthOf.at.least(1);\r",
											"//     }\r",
											"\r",
											"// });\r",
											"\r",
											"\r",
											"// const requestBody = JSON.parse(pm.request.body.raw)\r",
											"// // console.log(reqData)\r",
											"let respJson = pm.response.json();\r",
											"\r",
											"// let expectedStatuses = pm.environment.get(\"exportedAssetStatuses\");\r",
											"\r",
											"\r",
											"let expectedStatuses = {\r",
											"                \"saved\": {\r",
											"                    \"total\": 9,\r",
											"                    \"resultEngine\": 0\r",
											"                },\r",
											"                \"accepted\": {\r",
											"                    \"total\": 0,\r",
											"                    \"resultEngine\": 0\r",
											"                },\r",
											"                \"rejected\": {\r",
											"                    \"total\": 0,\r",
											"                    \"resultEngine\": 0\r",
											"                },\r",
											"                \"submitted\": {\r",
											"                    \"total\": 0,\r",
											"                    \"resultEngine\": 0\r",
											"                }\r",
											"            }\r",
											"\r",
											"\r",
											"let expectedResults = pm.environment.get(\"exportedAssetResults\");\r",
											"console.log(expectedResults)\r",
											"console.log(respJson[0].metrics.results)\r",
											"\r",
											"pm.test(\"check statuses against source\", function () {                \r",
											"    pm.expect(respJson[0].metrics.statuses).to.eql(expectedStatuses);\r",
											"    })\r",
											"\r",
											"\r",
											"pm.test(\"check results against source\", function () {                \r",
											"    pm.expect(respJson[0].metrics.results).to.eql(expectedResults);\r",
											"    })\r",
											"\r",
											"\r",
											"\r",
											"// console.log(jsonDataArray)\r",
											"// //  pm.test(\"look for stage: result and check cloned collection properties\", function () {\r",
											"//     for (message of jsonDataArray){\r",
											"//         if (message.length > 0){\r",
											"//             let messageObject = JSON.parse(message)\r",
											"//                 console.log(messageObject)\r",
											"\r",
											"//             if (messageObject.stage == \"result\"){\r",
											"//                 console.log(\"results export probably successful!\")\r",
											"//                 // pm.expect(messageObject.collection.name).to.eql(expectedCollectionName);\r",
											"//                 pm.test(\"stage: 'result' found, check for proper counts\", function () {                \r",
											"//                     console.log(messageObject.counts)\r",
											"//                     pm.expect(messageObject.counts.assetsCreated).to.eql(1);\r",
											"//                     pm.expect(messageObject.counts.stigsMapped).to.eql(2);\r",
											"//                     pm.expect(messageObject.counts.reviewsInserted).to.eql(9);\r",
											"//                     pm.expect(messageObject.counts.reviewsUpdated).to.eql(0);\r",
											"//                  })\r",
											"\r",
											"\r",
											"//             }\r",
											"//         }\r",
											"//         // else {\r",
											"//         // //   console.log(\"no result yet\")\r",
											"//         // pm.expect(\"Reached end of array\").to.equal(\"with no result stage\");\r",
											"\r",
											"//         // }        \r",
											"//     }\r",
											"// //  });\r",
											"\r",
											"\r",
											"\r",
											"// // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"// // // console.log(\"collection string = \" + collectionMatchString);\r",
											"// // var regex = new RegExp(collectionMatchString);\r",
											"// // let collectionNames = _.map(jsonData, 'name');\r",
											"// // // console.log(collectionNames);\r",
											"\r",
											"// // pm.test(\"Check that proper Collections are returned\", function () {\r",
											"// //     for (let name of collectionNames){\r",
											"// //         pm.expect(name).to.match(regex);\r",
											"// //         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );\r",
											"\r",
											"// //     }\r",
											" \r",
											"// // })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail/asset?assetId={{exportedAsset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"metrics",
										"detail",
										"asset"
									],
									"query": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "{{exportedAsset}}"
										},
										{
											"key": "labelId",
											"value": "{{testLabel}}",
											"disabled": true
										},
										{
											"key": "labelName",
											"value": "{{testLabelName-lvl1}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{scrapCollection}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token.stigmanadmin}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Duplicate RuleIds/Rule Fingerprint",
					"item": [
						{
							"name": "Import and overwrite application data (as elevated Admin) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a new STIG - VPN  (as admin) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{vpnStig-Rules-with-matching-fingerprints}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=true&elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "true"
										},
										{
											"key": "elevate",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT a STIG assignment to an Asset Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/stigs/:benchmarkId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"stigs",
										":benchmarkId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_Rule-fingerprint-match-test",
											"description": "(Required) A path parameter that indentifies a STIG"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import one or more Reviews with matching Rule Fingerprints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"const expectedResponse = {\r",
											"    rejected: [],\r",
											"    affected: {\r",
											"        updated: 0,\r",
											"        inserted: 2\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response matches request\", function () {\r",
											"    pm.expect(jsonData).to.eql(expectedResponse);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"ruleId\": \"SV-106179r1_xxxx\",\n        \"result\": \"pass\",\n        \"detail\": \"asfeee\",\n        \"comment\": null,\n        \"resultEngine\": null,\n        \"status\": \"saved\"\n    },\n    {\n        \"ruleId\": \"SV-106179r1_zzzzzz\",\n        \"result\": \"pass\",\n        \"detail\": \"asfeee\",\n        \"comment\": null,\n        \"resultEngine\": null,\n        \"status\": \"saved\"\n    },\n    {\n        \"ruleId\": \"SV-106181r1_xxxx\",\n        \"result\": \"notapplicable\",\n        \"detail\": \"asdfsef\",\n        \"comment\": null,\n        \"resultEngine\": null,\n        \"status\": \"saved\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return detailed metrics for the specified Collection - with params Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testBenchmark = \"VPN_SRG_Rule-fingerprint-match-test\"\r",
											"let testLabel = pm.environment.get(\"testLabel\");\r",
											"let testLabelName = pm.environment.get(\"testLabelName\");\r",
											"\r",
											"let testChecklistLength = 3;\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Check that proper assets are returned\", function () {\r",
											"    for (let item of jsonData){\r",
											"            console.log( \"testing: \" + item.name) \r",
											"\r",
											"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"        var regex = new RegExp(assetMatchString);\r",
											"        pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
											"            pm.expect(item.name).to.match(regex);\r",
											"        });\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
											"                pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
											"            })\r",
											"        }\r",
											"        if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
											"                pm.expect(item.assetId).to.eql(testAsset);\r",
											"            })\r",
											"        }   \r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
											"                let responseLabels = [];\r",
											"                for (let label of item.labels) {\r",
											"                    responseLabels.push(label.labelId)\r",
											"                }\r",
											"                pm.expect(responseLabels).to.include(testLabel);\r",
											"            })\r",
											"        }           \r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
											"                let responseLabels = [];\r",
											"                for (let label of item.labels) {\r",
											"                    responseLabels.push(label.name)\r",
											"                }\r",
											"                pm.expect(responseLabels).to.include(testLabelName);\r",
											"            })\r",
											"        }              \r",
											"\r",
											"    if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
											"        // if (item.assetId ==  testAsset ) {\r",
											"            console.log( \"found Collection_X_lvl1_asset\") \r",
											"\r",
											"            pm.test(\"Check some stats - findings, low\", function () {\r",
											"                pm.expect(item.metrics.findings.low).to.equal(0);\r",
											"            });\r",
											"\r",
											"            pm.test(\"Check some stats - results - NA\", function () {\r",
											"                pm.expect(item.metrics.results.notapplicable.total).to.equal(1);\r",
											"            });        \r",
											"            pm.test(\"Check some stats - results - pass\", function () {\r",
											"                pm.expect(item.metrics.results.pass.total).to.equal(2);\r",
											"            });        \r",
											"\r",
											"        pm.test(\"Check some stats - results - fail\", function () {\r",
											"                pm.expect(item.metrics.results.fail.total).to.equal(0);\r",
											"            });        \r",
											"\r",
											"        pm.test(\"Check some stats - status - submitted\", function () {\r",
											"                pm.expect(item.metrics.statuses.submitted.total).to.equal(0);\r",
											"            });     \r",
											"        pm.test(\"Check some stats - assessments\", function () {\r",
											"                pm.expect(item.metrics.assessments).to.equal(testChecklistLength);\r",
											"            });             \r",
											"        pm.test(\"Check some stats - assessed\", function () {\r",
											"                pm.expect(item.metrics.assessed).to.equal(3);\r",
											"            });                          \r",
											"\r",
											"        }\r",
											"    }\r",
											"   \r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"    \r",
											"// }\r",
											"\r",
											"return;\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail?benchmarkId=VPN_SRG_Rule-fingerprint-match-test&assetId={{testAsset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"metrics",
										"detail"
									],
									"query": [
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_Rule-fingerprint-match-test"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}"
										},
										{
											"key": "labelId",
											"value": "{{testLabel}}",
											"disabled": true
										},
										{
											"key": "labelName",
											"value": "{{testLabelName-lvl1}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a STIG assignment to an Asset Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/stigs/:benchmarkId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"stigs",
										":benchmarkId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_Rule-fingerprint-match-test",
											"description": "(Required) A path parameter that indentifies a STIG"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT a STIG assignment to an Asset Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/stigs/:benchmarkId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"stigs",
										":benchmarkId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_Rule-fingerprint-match-test",
											"description": "(Required) A path parameter that indentifies a STIG"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return detailed metrics for the specified Collection - with params Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testBenchmark = \"VPN_SRG_Rule-fingerprint-match-test\"\r",
											"let testLabel = pm.environment.get(\"testLabel\");\r",
											"let testLabelName = pm.environment.get(\"testLabelName\");\r",
											"\r",
											"let testChecklistLength = 3;\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Check that proper assets are returned\", function () {\r",
											"    for (let item of jsonData){\r",
											"            console.log( \"testing: \" + item.name) \r",
											"\r",
											"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"        var regex = new RegExp(assetMatchString);\r",
											"        pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
											"            pm.expect(item.name).to.match(regex);\r",
											"        });\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
											"                pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
											"            })\r",
											"        }\r",
											"        if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
											"                pm.expect(item.assetId).to.eql(testAsset);\r",
											"            })\r",
											"        }   \r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
											"                let responseLabels = [];\r",
											"                for (let label of item.labels) {\r",
											"                    responseLabels.push(label.labelId)\r",
											"                }\r",
											"                pm.expect(responseLabels).to.include(testLabel);\r",
											"            })\r",
											"        }           \r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
											"                let responseLabels = [];\r",
											"                for (let label of item.labels) {\r",
											"                    responseLabels.push(label.name)\r",
											"                }\r",
											"                pm.expect(responseLabels).to.include(testLabelName);\r",
											"            })\r",
											"        }              \r",
											"\r",
											"    if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
											"        // if (item.assetId ==  testAsset ) {\r",
											"            console.log( \"found Collection_X_lvl1_asset\") \r",
											"\r",
											"            pm.test(\"Check some stats - findings, low\", function () {\r",
											"                pm.expect(item.metrics.findings.low).to.equal(0);\r",
											"            });\r",
											"\r",
											"            pm.test(\"Check some stats - results - NA\", function () {\r",
											"                pm.expect(item.metrics.results.notapplicable.total).to.equal(1);\r",
											"            });        \r",
											"            pm.test(\"Check some stats - results - pass\", function () {\r",
											"                pm.expect(item.metrics.results.pass.total).to.equal(2);\r",
											"            });        \r",
											"\r",
											"        pm.test(\"Check some stats - results - fail\", function () {\r",
											"                pm.expect(item.metrics.results.fail.total).to.equal(0);\r",
											"            });        \r",
											"\r",
											"        pm.test(\"Check some stats - status - submitted\", function () {\r",
											"                pm.expect(item.metrics.statuses.submitted.total).to.equal(0);\r",
											"            });     \r",
											"        pm.test(\"Check some stats - assessments\", function () {\r",
											"                pm.expect(item.metrics.assessments).to.equal(testChecklistLength);\r",
											"            });             \r",
											"        pm.test(\"Check some stats - assessed\", function () {\r",
											"                pm.expect(item.metrics.assessed).to.equal(3);\r",
											"            });                          \r",
											"\r",
											"        }\r",
											"    }\r",
											"   \r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"    \r",
											"// }\r",
											"\r",
											"return;\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail?benchmarkId=VPN_SRG_Rule-fingerprint-match-test&assetId={{testAsset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"metrics",
										"detail"
									],
									"query": [
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_Rule-fingerprint-match-test"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}"
										},
										{
											"key": "labelId",
											"value": "{{testLabel}}",
											"disabled": true
										},
										{
											"key": "labelName",
											"value": "{{testLabelName-lvl1}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import and overwrite application data (as elevated Admin) Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT a STIG assignment to an Asset Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/stigs/:benchmarkId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"stigs",
										":benchmarkId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_Rule-fingerprint-match-test",
											"description": "(Required) A path parameter that indentifies a STIG"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import one or more Reviews with matching RuleIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"const expectedResponse = {\r",
											"    rejected: [],\r",
											"    affected: {\r",
											"        updated: 0,\r",
											"        inserted: 2\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response matches request\", function () {\r",
											"    pm.expect(jsonData).to.eql(expectedResponse);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"ruleId\": \"SV-106179r1_xxxx\",\n        \"result\": \"pass\",\n        \"detail\": \"asfeee\",\n        \"comment\": null,\n        \"resultEngine\": null,\n        \"status\": \"saved\"\n    },\n    {\n        \"ruleId\": \"SV-106179r1_xxxx\",\n        \"result\": \"pass\",\n        \"detail\": \"asfeee\",\n        \"comment\": null,\n        \"resultEngine\": null,\n        \"status\": \"saved\"\n    },\n    {\n        \"ruleId\": \"SV-106181r1_xxxx\",\n        \"result\": \"notapplicable\",\n        \"detail\": \"asdfsef\",\n        \"comment\": null,\n        \"resultEngine\": null,\n        \"status\": \"saved\"\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return detailed metrics for the specified Collection - with params Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testBenchmark = \"VPN_SRG_Rule-fingerprint-match-test\"\r",
											"let testLabel = pm.environment.get(\"testLabel\");\r",
											"let testLabelName = pm.environment.get(\"testLabelName\");\r",
											"\r",
											"let testChecklistLength = 3;\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Check that proper assets are returned\", function () {\r",
											"    for (let item of jsonData){\r",
											"            console.log( \"testing: \" + item.name) \r",
											"\r",
											"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"        var regex = new RegExp(assetMatchString);\r",
											"        pm.test(\"Check that proper assets are returned: \" + assetMatchString, function () {\r",
											"            pm.expect(item.name).to.match(regex);\r",
											"        });\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - benchmark\", function () {\r",
											"                pm.expect(item.benchmarkId).to.eql(testBenchmark);\r",
											"            })\r",
											"        }\r",
											"        if (pm.request.url.getQueryString().match(/assetId=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - assetId\", function () {\r",
											"                pm.expect(item.assetId).to.eql(testAsset);\r",
											"            })\r",
											"        }   \r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/labelId=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - labelId\", function () {\r",
											"                let responseLabels = [];\r",
											"                for (let label of item.labels) {\r",
											"                    responseLabels.push(label.labelId)\r",
											"                }\r",
											"                pm.expect(responseLabels).to.include(testLabel);\r",
											"            })\r",
											"        }           \r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/labelName=/)) {\r",
											"            pm.test(\"verify parameter restricted response properly - labelName\", function () {\r",
											"                let responseLabels = [];\r",
											"                for (let label of item.labels) {\r",
											"                    responseLabels.push(label.name)\r",
											"                }\r",
											"                pm.expect(responseLabels).to.include(testLabelName);\r",
											"            })\r",
											"        }              \r",
											"\r",
											"    if (item.assetId ==  testAsset && item.benchmarkId == testBenchmark) {\r",
											"        // if (item.assetId ==  testAsset ) {\r",
											"            console.log( \"found Collection_X_lvl1_asset\") \r",
											"\r",
											"            pm.test(\"Check some stats - findings, low\", function () {\r",
											"                pm.expect(item.metrics.findings.low).to.equal(0);\r",
											"            });\r",
											"\r",
											"            pm.test(\"Check some stats - results - NA\", function () {\r",
											"                pm.expect(item.metrics.results.notapplicable.total).to.equal(1);\r",
											"            });        \r",
											"            pm.test(\"Check some stats - results - pass\", function () {\r",
											"                pm.expect(item.metrics.results.pass.total).to.equal(2);\r",
											"            });        \r",
											"\r",
											"        pm.test(\"Check some stats - results - fail\", function () {\r",
											"                pm.expect(item.metrics.results.fail.total).to.equal(0);\r",
											"            });        \r",
											"\r",
											"        pm.test(\"Check some stats - status - submitted\", function () {\r",
											"                pm.expect(item.metrics.statuses.submitted.total).to.equal(0);\r",
											"            });     \r",
											"        pm.test(\"Check some stats - assessments\", function () {\r",
											"                pm.expect(item.metrics.assessments).to.equal(testChecklistLength);\r",
											"            });             \r",
											"        pm.test(\"Check some stats - assessed\", function () {\r",
											"                pm.expect(item.metrics.assessed).to.equal(3);\r",
											"            });                          \r",
											"\r",
											"        }\r",
											"    }\r",
											"   \r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"    \r",
											"// }\r",
											"\r",
											"return;\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/metrics/detail?benchmarkId=VPN_SRG_Rule-fingerprint-match-test&assetId={{testAsset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"metrics",
										"detail"
									],
									"query": [
										{
											"key": "benchmarkId",
											"value": "VPN_SRG_Rule-fingerprint-match-test"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}"
										},
										{
											"key": "labelId",
											"value": "{{testLabel}}",
											"disabled": true
										},
										{
											"key": "labelName",
											"value": "{{testLabelName-lvl1}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "review status reset check",
					"item": [
						{
							"name": "Import and overwrite application data (as elevated Admin) Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH Review with new details, expect status to remain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get('user');\r",
											"\r",
											"console.log('user: ' + user)\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status is 200', () => pm.response.to.have.status(200))\r",
											"\r",
											"pm.test(\"Status is still submitted\", () => {\r",
											"    pm.expect(jsonData.status).to.have.property('label').that.eqls('submitted');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"detail\": \"these details have changed, but the status remains\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106181r1_rule",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "PATCH Review with new result, expect status to reset to saved",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\")\r",
											"console.log(\"user: \" + user)\r",
											"\r",
											"let jsonData = pm.response.json()\r",
											"\r",
											"pm.test(\"Status is 200\", () => pm.response.to.have.status(200))\r",
											"\r",
											"pm.test(\"Result was set to pass\", () => {\r",
											"     pm.expect(jsonData.result).to.eql(\"pass\")\r",
											"})\r",
											"pm.test(\"Status is now saved\", () => {\r",
											"    pm.expect(jsonData.status.label).to.eql(\"saved\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"pass\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106181r1_rule",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "PATCH Review to submitted status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\")\r",
											"console.log(\"user: \" + user)\r",
											"\r",
											"let jsonData = pm.response.json()\r",
											"\r",
											"pm.test(\"Status is 200\", () => pm.response.to.have.status(200))\r",
											"\r",
											"\r",
											"pm.test(\"Status is now submitted\", () => {\r",
											"    pm.expect(jsonData.status.label).to.eql(\"submitted\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"submitted\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106181r1_rule",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "PATCH Review patched and no longer meets Collection Requirements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\")\r",
											"console.log(\"user: \" + user)\r",
											"\r",
											"let jsonData = pm.response.json()\r",
											"\r",
											"pm.test(\"Status is 200\", () => pm.response.to.have.status(200))\r",
											"\r",
											"pm.test(\"Result was set to fail\", () => {\r",
											"     pm.expect(jsonData.result).to.eql(\"fail\")\r",
											"})\r",
											"pm.test(\"Status is now saved\", () => {\r",
											"    pm.expect(jsonData.status.label).to.eql(\"saved\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"fail\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{testAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106181r1_rule",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						}
					]
				},
				{
					"name": "valid filename from Asset with reserved chars",
					"item": [
						{
							"name": "Create an Asset in collection to be deleted Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"// if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"// }\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let assetInCollectionWithReservedChars = respJson.assetId\r",
											"pm.environment.set(\"assetInCollectionWithReservedChars\", assetInCollectionWithReservedChars);\r",
											"\r",
											"console.log(\"created asset with id: \" + JSON.stringify(assetInCollectionWithReservedChars));\r",
											"\r",
											"\r",
											"// pm.test(\"Response matches request\", function () {\r",
											"//     pm.expect(assetGetToPost(respJson))\r",
											"//     .to.eql(JSON.parse(pm.request.body.raw))\r",
											"// })\r",
											"\r",
											"// function assetGetToPost(assetGet) {\r",
											"//     // extract the transformed and unposted properties\r",
											"//     const {assetId, collection, stigs, mac, fqdn, ...assetPost} = assetGet\r",
											"    \r",
											"//     // add transformed properties to the derived post  \r",
											"//     assetPost.collectionId = collection.collectionId\r",
											"//     assetPost.stigs = stigsGetToPost(stigs)\r",
											"\r",
											"//     // the derived post object\r",
											"//     return assetPost\r",
											"// }\r",
											"\r",
											"// function stigsGetToPost(stigsGetArray) {\r",
											"//     const stigsPostArray = []\r",
											"//     for (const stig of stigsGetArray) {\r",
											"//         stigsPostArray.push(stig.benchmarkId)\r",
											"//     }\r",
											"//     return stigsPostArray\r",
											"// }\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TxxxxxEST_\\\\slash:colon..x2\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"{{testBenchmark}}\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the ckl for Asset with reserved chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"\r",
											"\r",
											"if (user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else if (user == \"collectioncreator\" ) {\r",
											"    pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"const regex = /^inline; filename=\"TxxxxxEST_&bsol;slash&colon;colon\\.\\.x2-VPN_SRG_TEST-V1R1/;\r",
											"\r",
											"\r",
											"pm.test(\"Content-Disposition is set with expected filename\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Disposition')).to.match(regex)\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=ckl",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"checklists",
										":benchmarkId",
										":revisionStr"
									],
									"query": [
										{
											"key": "format",
											"value": "ckl",
											"description": "The format of the response. Default if missing is 'json'"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{assetInCollectionWithReservedChars}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "{{testRev}}",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the cklB for Asset with reserved chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"\r",
											"if (user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else if (user == \"collectioncreator\" ) {\r",
											"    pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"const regex = /^inline; filename=\"TxxxxxEST_&bsol;slash&colon;colon\\.\\.x2-VPN_SRG_TEST-V1R1/;\r",
											"\r",
											"\r",
											"pm.test(\"Content-Disposition is set with expected filename\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Disposition')).to.match(regex)\r",
											"\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=cklb",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"checklists",
										":benchmarkId",
										":revisionStr"
									],
									"query": [
										{
											"key": "format",
											"value": "cklb",
											"description": "The format of the response. Default if missing is 'json'"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{assetInCollectionWithReservedChars}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "{{testRev}}",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the xccdf for Asset with reserved chars Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"\r",
											"if (user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else if (user == \"collectioncreator\" ) {\r",
											"    pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"const regex = /^inline; filename=\"TxxxxxEST_&bsol;slash&colon;colon\\.\\.x2-VPN_SRG_TEST-V1R1/;\r",
											"\r",
											"\r",
											"pm.test(\"Content-Disposition is set with expected filename\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Disposition')).to.match(regex)\r",
											"\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=xccdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"checklists",
										":benchmarkId",
										":revisionStr"
									],
									"query": [
										{
											"key": "format",
											"value": "xccdf",
											"description": "The format of the response. Default if missing is 'json'"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{assetInCollectionWithReservedChars}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "{{testRev}}",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "valid label checks",
					"item": [
						{
							"name": "Import and overwrite application data (as elevated Admin) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Merge provided properties with an Asset Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"labelIds\": [\n        \"{{testLabel}}\"\n    ],    \n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{scrapAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace a Labels Asset Mappings in a Collection Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"// if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"//     user = \"elevated\";\r",
											"//     console.log(\"setting user to 'elevated'\");\r",
											"// }\r",
											"\r",
											"// if ( user == \"collectioncreator\" || user == \"lvl1\" || user ==\"lvl2\" ) { //placeholder for \"users\" that should fail\r",
											"//     pm.test(\"Status should be 403 for collectioncreator\", function () {\r",
											"//         pm.response.to.have.status(403);\r",
											"//     });\r",
											"//     return;\r",
											"// }\r",
											"// else {\r",
											"//     pm.test(\"Status code is 200 for all users but collectioncreator, lvl1, or lvl2. user=\" + user, function () {\r",
											"//         pm.response.to.have.status(200);\r",
											"//     });\r",
											"// }\r",
											"\r",
											"    pm.test(\"Status code is 403 for all users\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"{{testAsset}}\"]"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/labels/:labelId/assets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"labels",
										":labelId",
										"assets"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "metadata",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "labelId",
											"value": "{{scrapLabel}}"
										}
									]
								},
								"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
							},
							"response": []
						},
						{
							"name": "Create an Asset Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let respJson = pm.response.json();\r",
											"let reqJson = JSON.parse(pm.request.body.raw)\r",
											"reqJson.labelIds = []\r",
											"\r",
											"pm.test(\"Response matches request\", function () {\r",
											"    pm.expect(assetGetToPost(respJson))\r",
											"    .to.eql(reqJson)\r",
											"})\r",
											"\r",
											"function assetGetToPost(assetGet) {\r",
											"    // extract the transformed and unposted properties\r",
											"    const {assetId, collection, stigs, mac, fqdn, ...assetPost} = assetGet\r",
											"    \r",
											"    // add transformed properties to the derived post  \r",
											"    assetPost.collectionId = collection.collectionId\r",
											"    assetPost.stigs = stigsGetToPost(stigs)\r",
											"\r",
											"    // the derived post object\r",
											"    return assetPost\r",
											"}\r",
											"\r",
											"function stigsGetToPost(stigsGetArray) {\r",
											"    const stigsPostArray = []\r",
											"    for (const stig of stigsGetArray) {\r",
											"        stigsPostArray.push(stig.benchmarkId)\r",
											"    }\r",
											"    return stigsPostArray\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_x{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"labelIds\": [\n        \"8fd5f19e-9b5e-11ec-adb1-0242c0a86004\",\n        \"1630332d-f4d5-4634-9d67-314d774050de\"\n        ],\n    \"noncomputing\": true,\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set all properties of an Asset Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"labelIds\": [\n        \"8fd5f19e-9b5e-11ec-adb1-0242c0a86004\",\n        \"1630332d-f4d5-4634-9d67-314d774050de\"\n    ],\n    \"metadata\": {\n        \"pocName\": \"poc2Put\",\n        \"pocEmail\": \"pocEmailPut@email.com\",\n        \"pocPhone\": \"12342\",\n        \"reqRar\": \"true\"\n    },\n    \"stigs\": [\n        \"VPN_SRG_TEST\",\n        \"Windows_10_STIG_TEST\",\n        \"RHEL_7_STIG_TEST\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{scrapAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check that request body without collectionId properly sets labels - GH-1293",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    pm.expect(jsonData.labelIds).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    // \"collectionId\": \"{{scrapCollection}}\",\n    // \"description\": \"test desc\",\n    // \"ip\": \"1.1.1.1\",\n    // \"noncomputing\": true,\n    \"labelIds\": [\n        \"df4e6836-a003-11ec-b1bc-0242ac110002\"\n    ]\n    // \"metadata\": {\n    //     \"pocName\": \"poc2Put\",\n    //     \"pocEmail\": \"pocEmailPut@email.com\",\n    //     \"pocPhone\": \"12342\",\n    //     \"reqRar\": \"true\"\n    // },\n    // \"stigs\": [\n    //     \"VPN_SRG_TEST\",\n    //     \"Windows_10_STIG_TEST\",\n    //     \"RHEL_7_STIG_TEST\"\n    // ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=statusStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statusStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "{{scrapAsset}}",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "restricted grant assignments outside of Collection boundary",
					"item": [
						{
							"name": "Add restricted user to collection Y",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response has proper projections\", function () {\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
											"        pm.expect(jsonData).to.have.property('statistics');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        pm.expect(jsonData).to.have.property('stigs');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
											"        pm.expect(jsonData).to.have.property('assets');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
											"        pm.expect(jsonData).to.have.property('owners');\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
											"        pm.expect(jsonData).to.have.property('grants');\r",
											"    }            \r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"87\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"1\",\n            \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"85\",\n            \"accessLevel\": 1\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=grants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "83",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "set stig-asset grants for a lvl1 user in this collection, with asset from another collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.lvl3}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"240\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"62\"\r\n    },\r\n    {\r\n        \"benchmarkId\": \"{{testBenchmark}}\",\r\n        \"assetId\": \"42\"\r\n    }     \r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"grants",
										":userId",
										"access"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										},
										{
											"key": "userId",
											"value": "{{testLvl1User}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return stig-asset grants for a lvl1 user in this collection. Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array').of.length(0);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"grants",
										":userId",
										"access"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "83"
										},
										{
											"key": "userId",
											"value": "{{testLvl1User}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "default-rev-recalc",
					"item": [
						{
							"name": "Import a new STIG - new Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// let jsonData = pm.response.json();\r",
											"// let expectedRevData = \r",
											"// {\r",
											"//     \"benchmarkId\": \"VPN_SRG_TEST\",\r",
											"//     \"revisionStr\": \"V1R1\",\r",
											"//     \"action\": \"inserted\"\r",
											"// }\r",
											"\r",
											"\r",
											"// pm.test(\"Response JSON as expected)\", function () {\r",
											"//     pm.expect(jsonData).to.be.an('object')\r",
											"//     pm.expect(jsonData).to.eql(expectedRevData)\r",
											"// });\r",
											"\r",
											"\r",
											"// console.log(response)\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Body contains string\",() => {\r",
											"//   pm.expect(response).to.include(\"currentGroupRule\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{testStigFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs?clobber=false&elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "clobber",
											"value": "false"
										},
										{
											"key": "elevate",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes the specified revision of a STIG v1r0 - with force - could fail if not present, so no tests Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr?elevate=true&force=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"revisions",
										":revisionStr"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "V1R1",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return summary metrics - check no null benchmarks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed TypeError by correcting the syntax\r",
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"let testAsset = pm.environment.get(\"testAsset\");\r",
											"let testBenchmark = pm.environment.get(\"testBenchmark\");\r",
											"let testLabel = pm.environment.get(\"testLabel\");\r",
											"let testLabelName = pm.environment.get(\"testLabelName\");\r",
											"\r",
											"\r",
											"//reference metrics\r",
											"let testChecklistLength = parseInt(pm.environment.get(\"checklistLength\"));\r",
											"let testTotalAssessmentsForTestAsset = 368;\r",
											"let testTotalAssessmentsForTestSTIG = testChecklistLength * 3;\r",
											"// let testTotalAssessmentsForCollection = 1014;\r",
											"\r",
											"\r",
											"\r",
											"// Checking that response fulfills parameter requests\r",
											"// for (let item of jsonData){\r",
											"//     console.log( \"testing: \" + item.name) \r",
											"    \r",
											"    pm.test(\"No null benchmarks\", function () {\r",
											"        for (let stig of jsonData){\r",
											"            // pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            pm.expect(stig.benchmarkId).to.not.equal(null);\r",
											"            // pm.expect(stig.revisionPinned).to.eql(false);\r",
											"\r",
											"        }\r",
											"\r",
											"    });\r",
											"\r",
											"\r",
											"return;\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/metrics/summary/stig",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"metrics",
										"summary",
										"stig"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "These tests should be self contained, provide their own authorization, and repopulate test data if required.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// pm.environment.set(\"curUser\", \"staff\");",
					"",
					"let user = pm.iterationData.get(\"user\");",
					"let elevate = pm.iterationData.get(\"elevate\");",
					"console.log(`user: ${user} elevate: ${elevate}`);",
					"",
					"",
					"//default to stigmanadmin user, elevated, if not iterating, and user is not in env",
					"if (user === undefined) {",
					"    user = \"stigmanadmin\";",
					"    userId = \"1\";",
					"    elevate = true;",
					"    pm.environment.set(\"user\", user);",
					"    pm.environment.set(\"elevated\", elevate);",
					"    let token = pm.environment.get(\"token.\" + user)",
					"    pm.environment.set(\"token\", token);",
					"    console.log(`No iteration data. Setting: User: ${user} elevated: ${elevate} Bearer: ${token}`);",
					"",
					"    return;  // Just use whatever settings are currently left in the env.",
					"}",
					"",
					"",
					"",
					"let token = pm.iterationData.get(\"token\");",
					"pm.environment.set(\"token.\"+ user, token);",
					"pm.environment.set(\"token\", token);",
					"pm.environment.set(\"user\", user);",
					"pm.environment.set(\"elevated\", elevate);",
					"console.log(`User: ${user} elevated: ${elevate} Bearer: ${token}`);",
					"",
					"//constructed data targets to test",
					"pm.environment.set(\"stigs.valid\", pm.iterationData.get(\"stigs.valid\"));",
					"pm.environment.set(\"testCollection\", pm.iterationData.get(\"testCollection\"));",
					"pm.environment.set(\"testBenchmark\", pm.iterationData.get(\"testBenchmark\"));",
					"pm.environment.set(\"testRev\", pm.iterationData.get(\"testRev\"));",
					"pm.environment.set(\"testAsset\", pm.iterationData.get(\"testAsset\"));",
					"pm.environment.set(\"testAsset-NoStigs\", pm.iterationData.get(\"testAsset-NoStigs\"));",
					"pm.environment.set(\"testAssetName\", pm.iterationData.get(\"testAssetName\"));",
					"pm.environment.set(\"testRuleId\", pm.iterationData.get(\"testRuleId\"));",
					"pm.environment.set(\"testUserId\", pm.iterationData.get(\"testUserId\"));",
					"pm.environment.set(\"userId\", pm.iterationData.get(\"userId\"));",
					"pm.environment.set(\"metadataKey\", pm.iterationData.get(\"metadataKey\"));",
					"pm.environment.set(\"metadataValue\", pm.iterationData.get(\"metadataValue\"));",
					"// pm.environment.set(\"targetCollectionName\", pm.iterationData.get(\"targetCollectionName\"));",
					"pm.environment.set(\"checklistLength\", pm.iterationData.get(\"checklistLength\"));",
					"",
					"//targets for data changes",
					"pm.environment.set(\"deleteAsset\", pm.iterationData.get(\"deleteAsset\"));",
					"pm.environment.set(\"scrapAsset\", pm.iterationData.get(\"scrapAsset\"));",
					"pm.environment.set(\"deleteCollection\", pm.iterationData.get(\"deleteCollection\"));",
					"pm.environment.set(\"scrapCollection\", pm.iterationData.get(\"scrapCollection\"));",
					"",
					"",
					"//regex strings",
					"pm.environment.set(\"collectionMatchString\", pm.iterationData.get(\"collectionMatchString\"));",
					"pm.environment.set(\"collectionMatchType\", pm.iterationData.get(\"collectionMatchType\"));",
					"pm.environment.set(\"assetMatchString\", pm.iterationData.get(\"assetMatchString\"));",
					"pm.environment.set(\"reviewMatchString\", pm.iterationData.get(\"reviewMatchString\"));",
					"",
					"//misc",
					"pm.environment.set(\"accessLevel\", pm.iterationData.get(\"accessLevel\"));",
					"",
					"// utils = {",
					"//     grantsPostToGet: function (grantsRespArray) {",
					"//     }",
					"// }",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// var user = pm.environment.get(\"user\");",
					"// var elevated = pm.environment.get(\"elevated\");",
					"",
					"// pm.test(`Collections Tests with user: ${user} elevated: ${elevated} `, function () {",
					"//     pm.expect(pm.environment.get(\"user\")).to.equal(user);",
					"// });",
					"",
					"",
					"let user = pm.environment.get(\"user\");",
					"let elevated = pm.environment.get(\"elevated\");",
					"",
					"pm.test(`user: ${user}, elevate variable (not always used): ${elevated}`, function () {",
					"    pm.expect(1).to.equal(1);",
					"});",
					"",
					"let env = pm.environment.get(\"env\");",
					"pm.test(`environment: ${env}`, function () {",
					"    pm.expect(env).to.equal(\"STIGMan Env\");",
					"});",
					"",
					"",
					"",
					""
				]
			}
		}
	]
}